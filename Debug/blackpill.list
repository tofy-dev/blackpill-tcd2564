
blackpill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009354  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080094ec  080094ec  0000a4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800954c  0800954c  0000b0fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800954c  0800954c  0000a54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009554  08009554  0000b0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009554  08009554  0000a554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009558  08009558  0000a558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  0800955c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d58  200000fc  08009658  0000b0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003e54  08009658  0000be54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015551  00000000  00000000  0000b12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037d1  00000000  00000000  0002067d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  00023e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e99  00000000  00000000  00025168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a460  00000000  00000000  00026001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017286  00000000  00000000  00040461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bcfe  00000000  00000000  000576e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f33e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fc0  00000000  00000000  000f3428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000f83e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080094d4 	.word	0x080094d4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	080094d4 	.word	0x080094d4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 fe78 	bl	80011fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f83c 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 fb80 	bl	8000c14 <MX_GPIO_Init>
  MX_DMA_Init();
 8000514:	f000 fb5e 	bl	8000bd4 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000518:	f008 faa0 	bl	8008a5c <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 800051c:	f000 f8ee 	bl	80006fc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000520:	f000 f96e 	bl	8000800 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000524:	f000 f9e6 	bl	80008f4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000528:	f000 fa5c 	bl	80009e4 <MX_TIM4_Init>
  MX_ADC1_Init();
 800052c:	f000 f894 	bl	8000658 <MX_ADC1_Init>
  MX_TIM5_Init();
 8000530:	f000 fad0 	bl	8000ad4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000534:	2100      	movs	r1, #0
 8000536:	480d      	ldr	r0, [pc, #52]	@ (800056c <main+0x68>)
 8000538:	f004 f93c 	bl	80047b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800053c:	2100      	movs	r1, #0
 800053e:	480c      	ldr	r0, [pc, #48]	@ (8000570 <main+0x6c>)
 8000540:	f004 f938 	bl	80047b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000544:	2100      	movs	r1, #0
 8000546:	480b      	ldr	r0, [pc, #44]	@ (8000574 <main+0x70>)
 8000548:	f004 f934 	bl	80047b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800054c:	2100      	movs	r1, #0
 800054e:	480a      	ldr	r0, [pc, #40]	@ (8000578 <main+0x74>)
 8000550:	f004 f930 	bl	80047b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8000554:	2104      	movs	r1, #4
 8000556:	4809      	ldr	r0, [pc, #36]	@ (800057c <main+0x78>)
 8000558:	f004 f92c 	bl	80047b4 <HAL_TIM_PWM_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) DMA_buffer, DMA_SIZE);
 800055c:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000560:	4907      	ldr	r1, [pc, #28]	@ (8000580 <main+0x7c>)
 8000562:	4808      	ldr	r0, [pc, #32]	@ (8000584 <main+0x80>)
 8000564:	f001 f834 	bl	80015d0 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <main+0x64>
 800056c:	200001c0 	.word	0x200001c0
 8000570:	20000208 	.word	0x20000208
 8000574:	20000250 	.word	0x20000250
 8000578:	20000298 	.word	0x20000298
 800057c:	200002e0 	.word	0x200002e0
 8000580:	20000328 	.word	0x20000328
 8000584:	20000118 	.word	0x20000118

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	@ 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2230      	movs	r2, #48	@ 0x30
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f008 ff70 	bl	800947c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	4b27      	ldr	r3, [pc, #156]	@ (8000650 <SystemClock_Config+0xc8>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b4:	4a26      	ldr	r2, [pc, #152]	@ (8000650 <SystemClock_Config+0xc8>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80005bc:	4b24      	ldr	r3, [pc, #144]	@ (8000650 <SystemClock_Config+0xc8>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b21      	ldr	r3, [pc, #132]	@ (8000654 <SystemClock_Config+0xcc>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a20      	ldr	r2, [pc, #128]	@ (8000654 <SystemClock_Config+0xcc>)
 80005d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000654 <SystemClock_Config+0xcc>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e4:	2301      	movs	r3, #1
 80005e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	2302      	movs	r3, #2
 80005f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80005f8:	230f      	movs	r3, #15
 80005fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80005fc:	2390      	movs	r3, #144	@ 0x90
 80005fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000600:	2304      	movs	r3, #4
 8000602:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000604:	2305      	movs	r3, #5
 8000606:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	f107 0320 	add.w	r3, r7, #32
 800060c:	4618      	mov	r0, r3
 800060e:	f003 fc03 	bl	8003e18 <HAL_RCC_OscConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000618:	f000 fb62 	bl	8000ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061c:	230f      	movs	r3, #15
 800061e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000620:	2302      	movs	r3, #2
 8000622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000628:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800062c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	2101      	movs	r1, #1
 8000638:	4618      	mov	r0, r3
 800063a:	f003 fe65 	bl	8004308 <HAL_RCC_ClockConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000644:	f000 fb4c 	bl	8000ce0 <Error_Handler>
  }
}
 8000648:	bf00      	nop
 800064a:	3750      	adds	r7, #80	@ 0x50
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065e:	463b      	mov	r3, r7
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800066a:	4b22      	ldr	r3, [pc, #136]	@ (80006f4 <MX_ADC1_Init+0x9c>)
 800066c:	4a22      	ldr	r2, [pc, #136]	@ (80006f8 <MX_ADC1_Init+0xa0>)
 800066e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000670:	4b20      	ldr	r3, [pc, #128]	@ (80006f4 <MX_ADC1_Init+0x9c>)
 8000672:	2200      	movs	r2, #0
 8000674:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000676:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <MX_ADC1_Init+0x9c>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800067c:	4b1d      	ldr	r3, [pc, #116]	@ (80006f4 <MX_ADC1_Init+0x9c>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000682:	4b1c      	ldr	r3, [pc, #112]	@ (80006f4 <MX_ADC1_Init+0x9c>)
 8000684:	2200      	movs	r2, #0
 8000686:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000688:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <MX_ADC1_Init+0x9c>)
 800068a:	2200      	movs	r2, #0
 800068c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000690:	4b18      	ldr	r3, [pc, #96]	@ (80006f4 <MX_ADC1_Init+0x9c>)
 8000692:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000696:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000698:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <MX_ADC1_Init+0x9c>)
 800069a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800069e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a0:	4b14      	ldr	r3, [pc, #80]	@ (80006f4 <MX_ADC1_Init+0x9c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006a6:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <MX_ADC1_Init+0x9c>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006ac:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <MX_ADC1_Init+0x9c>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <MX_ADC1_Init+0x9c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ba:	480e      	ldr	r0, [pc, #56]	@ (80006f4 <MX_ADC1_Init+0x9c>)
 80006bc:	f000 fe34 	bl	8001328 <HAL_ADC_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80006c6:	f000 fb0b 	bl	8000ce0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d6:	463b      	mov	r3, r7
 80006d8:	4619      	mov	r1, r3
 80006da:	4806      	ldr	r0, [pc, #24]	@ (80006f4 <MX_ADC1_Init+0x9c>)
 80006dc:	f001 f88a 	bl	80017f4 <HAL_ADC_ConfigChannel>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80006e6:	f000 fafb 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000118 	.word	0x20000118
 80006f8:	40012000 	.word	0x40012000

080006fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b092      	sub	sp, #72	@ 0x48
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000702:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800070c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
 800071c:	615a      	str	r2, [r3, #20]
 800071e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2220      	movs	r2, #32
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f008 fea8 	bl	800947c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800072c:	4b32      	ldr	r3, [pc, #200]	@ (80007f8 <MX_TIM1_Init+0xfc>)
 800072e:	4a33      	ldr	r2, [pc, #204]	@ (80007fc <MX_TIM1_Init+0x100>)
 8000730:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000732:	4b31      	ldr	r3, [pc, #196]	@ (80007f8 <MX_TIM1_Init+0xfc>)
 8000734:	2200      	movs	r2, #0
 8000736:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000738:	4b2f      	ldr	r3, [pc, #188]	@ (80007f8 <MX_TIM1_Init+0xfc>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30-1;
 800073e:	4b2e      	ldr	r3, [pc, #184]	@ (80007f8 <MX_TIM1_Init+0xfc>)
 8000740:	221d      	movs	r2, #29
 8000742:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000744:	4b2c      	ldr	r3, [pc, #176]	@ (80007f8 <MX_TIM1_Init+0xfc>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800074a:	4b2b      	ldr	r3, [pc, #172]	@ (80007f8 <MX_TIM1_Init+0xfc>)
 800074c:	2200      	movs	r2, #0
 800074e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000750:	4b29      	ldr	r3, [pc, #164]	@ (80007f8 <MX_TIM1_Init+0xfc>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000756:	4828      	ldr	r0, [pc, #160]	@ (80007f8 <MX_TIM1_Init+0xfc>)
 8000758:	f003 ffdd 	bl	8004716 <HAL_TIM_PWM_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000762:	f000 fabd 	bl	8000ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000766:	2320      	movs	r3, #32
 8000768:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076a:	2300      	movs	r3, #0
 800076c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800076e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000772:	4619      	mov	r1, r3
 8000774:	4820      	ldr	r0, [pc, #128]	@ (80007f8 <MX_TIM1_Init+0xfc>)
 8000776:	f004 fd73 	bl	8005260 <HAL_TIMEx_MasterConfigSynchronization>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000780:	f000 faae 	bl	8000ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000784:	2360      	movs	r3, #96	@ 0x60
 8000786:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 15;
 8000788:	230f      	movs	r3, #15
 800078a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800078c:	2300      	movs	r3, #0
 800078e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000790:	2300      	movs	r3, #0
 8000792:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000798:	2300      	movs	r3, #0
 800079a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800079c:	2300      	movs	r3, #0
 800079e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a4:	2200      	movs	r2, #0
 80007a6:	4619      	mov	r1, r3
 80007a8:	4813      	ldr	r0, [pc, #76]	@ (80007f8 <MX_TIM1_Init+0xfc>)
 80007aa:	f004 f90d 	bl	80049c8 <HAL_TIM_PWM_ConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80007b4:	f000 fa94 	bl	8000ce0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	4619      	mov	r1, r3
 80007da:	4807      	ldr	r0, [pc, #28]	@ (80007f8 <MX_TIM1_Init+0xfc>)
 80007dc:	f004 fdae 	bl	800533c <HAL_TIMEx_ConfigBreakDeadTime>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80007e6:	f000 fa7b 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007ea:	4803      	ldr	r0, [pc, #12]	@ (80007f8 <MX_TIM1_Init+0xfc>)
 80007ec:	f000 fbaa 	bl	8000f44 <HAL_TIM_MspPostInit>

}
 80007f0:	bf00      	nop
 80007f2:	3748      	adds	r7, #72	@ 0x48
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200001c0 	.word	0x200001c0
 80007fc:	40010000 	.word	0x40010000

08000800 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08e      	sub	sp, #56	@ 0x38
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000806:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000820:	463b      	mov	r3, r7
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]
 800082e:	615a      	str	r2, [r3, #20]
 8000830:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000832:	4b2e      	ldr	r3, [pc, #184]	@ (80008ec <MX_TIM2_Init+0xec>)
 8000834:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000838:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800083a:	4b2c      	ldr	r3, [pc, #176]	@ (80008ec <MX_TIM2_Init+0xec>)
 800083c:	2200      	movs	r2, #0
 800083e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000840:	4b2a      	ldr	r3, [pc, #168]	@ (80008ec <MX_TIM2_Init+0xec>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 480000-1;
 8000846:	4b29      	ldr	r3, [pc, #164]	@ (80008ec <MX_TIM2_Init+0xec>)
 8000848:	4a29      	ldr	r2, [pc, #164]	@ (80008f0 <MX_TIM2_Init+0xf0>)
 800084a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084c:	4b27      	ldr	r3, [pc, #156]	@ (80008ec <MX_TIM2_Init+0xec>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000852:	4b26      	ldr	r3, [pc, #152]	@ (80008ec <MX_TIM2_Init+0xec>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000858:	4824      	ldr	r0, [pc, #144]	@ (80008ec <MX_TIM2_Init+0xec>)
 800085a:	f003 ff0d 	bl	8004678 <HAL_TIM_Base_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000864:	f000 fa3c 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000868:	4820      	ldr	r0, [pc, #128]	@ (80008ec <MX_TIM2_Init+0xec>)
 800086a:	f003 ff54 	bl	8004716 <HAL_TIM_PWM_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000874:	f000 fa34 	bl	8000ce0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000878:	2306      	movs	r3, #6
 800087a:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800087c:	2300      	movs	r3, #0
 800087e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000880:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000884:	4619      	mov	r1, r3
 8000886:	4819      	ldr	r0, [pc, #100]	@ (80008ec <MX_TIM2_Init+0xec>)
 8000888:	f004 f960 	bl	8004b4c <HAL_TIM_SlaveConfigSynchro>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000892:	f000 fa25 	bl	8000ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4811      	ldr	r0, [pc, #68]	@ (80008ec <MX_TIM2_Init+0xec>)
 80008a6:	f004 fcdb 	bl	8005260 <HAL_TIMEx_MasterConfigSynchronization>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80008b0:	f000 fa16 	bl	8000ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80008b4:	2370      	movs	r3, #112	@ 0x70
 80008b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 390;
 80008b8:	f44f 73c3 	mov.w	r3, #390	@ 0x186
 80008bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008c6:	463b      	mov	r3, r7
 80008c8:	2200      	movs	r2, #0
 80008ca:	4619      	mov	r1, r3
 80008cc:	4807      	ldr	r0, [pc, #28]	@ (80008ec <MX_TIM2_Init+0xec>)
 80008ce:	f004 f87b 	bl	80049c8 <HAL_TIM_PWM_ConfigChannel>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80008d8:	f000 fa02 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008dc:	4803      	ldr	r0, [pc, #12]	@ (80008ec <MX_TIM2_Init+0xec>)
 80008de:	f000 fb31 	bl	8000f44 <HAL_TIM_MspPostInit>

}
 80008e2:	bf00      	nop
 80008e4:	3738      	adds	r7, #56	@ 0x38
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000208 	.word	0x20000208
 80008f0:	000752ff 	.word	0x000752ff

080008f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08e      	sub	sp, #56	@ 0x38
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000914:	463b      	mov	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]
 8000922:	615a      	str	r2, [r3, #20]
 8000924:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000926:	4b2d      	ldr	r3, [pc, #180]	@ (80009dc <MX_TIM3_Init+0xe8>)
 8000928:	4a2d      	ldr	r2, [pc, #180]	@ (80009e0 <MX_TIM3_Init+0xec>)
 800092a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 800092c:	4b2b      	ldr	r3, [pc, #172]	@ (80009dc <MX_TIM3_Init+0xe8>)
 800092e:	2203      	movs	r2, #3
 8000930:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000932:	4b2a      	ldr	r3, [pc, #168]	@ (80009dc <MX_TIM3_Init+0xe8>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 30-1;
 8000938:	4b28      	ldr	r3, [pc, #160]	@ (80009dc <MX_TIM3_Init+0xe8>)
 800093a:	221d      	movs	r2, #29
 800093c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093e:	4b27      	ldr	r3, [pc, #156]	@ (80009dc <MX_TIM3_Init+0xe8>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000944:	4b25      	ldr	r3, [pc, #148]	@ (80009dc <MX_TIM3_Init+0xe8>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800094a:	4824      	ldr	r0, [pc, #144]	@ (80009dc <MX_TIM3_Init+0xe8>)
 800094c:	f003 fe94 	bl	8004678 <HAL_TIM_Base_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000956:	f000 f9c3 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800095a:	4820      	ldr	r0, [pc, #128]	@ (80009dc <MX_TIM3_Init+0xe8>)
 800095c:	f003 fedb 	bl	8004716 <HAL_TIM_PWM_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000966:	f000 f9bb 	bl	8000ce0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800096a:	2306      	movs	r3, #6
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000972:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000976:	4619      	mov	r1, r3
 8000978:	4818      	ldr	r0, [pc, #96]	@ (80009dc <MX_TIM3_Init+0xe8>)
 800097a:	f004 f8e7 	bl	8004b4c <HAL_TIM_SlaveConfigSynchro>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000984:	f000 f9ac 	bl	8000ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000988:	2320      	movs	r3, #32
 800098a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4811      	ldr	r0, [pc, #68]	@ (80009dc <MX_TIM3_Init+0xe8>)
 8000998:	f004 fc62 	bl	8005260 <HAL_TIMEx_MasterConfigSynchronization>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80009a2:	f000 f99d 	bl	8000ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a6:	2360      	movs	r3, #96	@ 0x60
 80009a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 15;
 80009aa:	230f      	movs	r3, #15
 80009ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b6:	463b      	mov	r3, r7
 80009b8:	2200      	movs	r2, #0
 80009ba:	4619      	mov	r1, r3
 80009bc:	4807      	ldr	r0, [pc, #28]	@ (80009dc <MX_TIM3_Init+0xe8>)
 80009be:	f004 f803 	bl	80049c8 <HAL_TIM_PWM_ConfigChannel>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80009c8:	f000 f98a 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009cc:	4803      	ldr	r0, [pc, #12]	@ (80009dc <MX_TIM3_Init+0xe8>)
 80009ce:	f000 fab9 	bl	8000f44 <HAL_TIM_MspPostInit>

}
 80009d2:	bf00      	nop
 80009d4:	3738      	adds	r7, #56	@ 0x38
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000250 	.word	0x20000250
 80009e0:	40000400 	.word	0x40000400

080009e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08e      	sub	sp, #56	@ 0x38
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a04:	463b      	mov	r3, r7
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]
 8000a12:	615a      	str	r2, [r3, #20]
 8000a14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a16:	4b2d      	ldr	r3, [pc, #180]	@ (8000acc <MX_TIM4_Init+0xe8>)
 8000a18:	4a2d      	ldr	r2, [pc, #180]	@ (8000ad0 <MX_TIM4_Init+0xec>)
 8000a1a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000-1;
 8000a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000acc <MX_TIM4_Init+0xe8>)
 8000a1e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a22:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a24:	4b29      	ldr	r3, [pc, #164]	@ (8000acc <MX_TIM4_Init+0xe8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 30-1;
 8000a2a:	4b28      	ldr	r3, [pc, #160]	@ (8000acc <MX_TIM4_Init+0xe8>)
 8000a2c:	221d      	movs	r2, #29
 8000a2e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a30:	4b26      	ldr	r3, [pc, #152]	@ (8000acc <MX_TIM4_Init+0xe8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a36:	4b25      	ldr	r3, [pc, #148]	@ (8000acc <MX_TIM4_Init+0xe8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a3c:	4823      	ldr	r0, [pc, #140]	@ (8000acc <MX_TIM4_Init+0xe8>)
 8000a3e:	f003 fe1b 	bl	8004678 <HAL_TIM_Base_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000a48:	f000 f94a 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a4c:	481f      	ldr	r0, [pc, #124]	@ (8000acc <MX_TIM4_Init+0xe8>)
 8000a4e:	f003 fe62 	bl	8004716 <HAL_TIM_PWM_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000a58:	f000 f942 	bl	8000ce0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000a5c:	2306      	movs	r3, #6
 8000a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000a64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4818      	ldr	r0, [pc, #96]	@ (8000acc <MX_TIM4_Init+0xe8>)
 8000a6c:	f004 f86e 	bl	8004b4c <HAL_TIM_SlaveConfigSynchro>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000a76:	f000 f933 	bl	8000ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a7a:	2320      	movs	r3, #32
 8000a7c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	4810      	ldr	r0, [pc, #64]	@ (8000acc <MX_TIM4_Init+0xe8>)
 8000a8a:	f004 fbe9 	bl	8005260 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000a94:	f000 f924 	bl	8000ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a98:	2360      	movs	r3, #96	@ 0x60
 8000a9a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 15;
 8000a9c:	230f      	movs	r3, #15
 8000a9e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	2200      	movs	r2, #0
 8000aac:	4619      	mov	r1, r3
 8000aae:	4807      	ldr	r0, [pc, #28]	@ (8000acc <MX_TIM4_Init+0xe8>)
 8000ab0:	f003 ff8a 	bl	80049c8 <HAL_TIM_PWM_ConfigChannel>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000aba:	f000 f911 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000abe:	4803      	ldr	r0, [pc, #12]	@ (8000acc <MX_TIM4_Init+0xe8>)
 8000ac0:	f000 fa40 	bl	8000f44 <HAL_TIM_MspPostInit>

}
 8000ac4:	bf00      	nop
 8000ac6:	3738      	adds	r7, #56	@ 0x38
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000298 	.word	0x20000298
 8000ad0:	40000800 	.word	0x40000800

08000ad4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08e      	sub	sp, #56	@ 0x38
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ada:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000af4:	463b      	mov	r3, r7
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]
 8000b02:	615a      	str	r2, [r3, #20]
 8000b04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b06:	4b31      	ldr	r3, [pc, #196]	@ (8000bcc <MX_TIM5_Init+0xf8>)
 8000b08:	4a31      	ldr	r2, [pc, #196]	@ (8000bd0 <MX_TIM5_Init+0xfc>)
 8000b0a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000b0c:	4b2f      	ldr	r3, [pc, #188]	@ (8000bcc <MX_TIM5_Init+0xf8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b12:	4b2e      	ldr	r3, [pc, #184]	@ (8000bcc <MX_TIM5_Init+0xf8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90-1;
 8000b18:	4b2c      	ldr	r3, [pc, #176]	@ (8000bcc <MX_TIM5_Init+0xf8>)
 8000b1a:	2259      	movs	r2, #89	@ 0x59
 8000b1c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1e:	4b2b      	ldr	r3, [pc, #172]	@ (8000bcc <MX_TIM5_Init+0xf8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b24:	4b29      	ldr	r3, [pc, #164]	@ (8000bcc <MX_TIM5_Init+0xf8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000b2a:	4828      	ldr	r0, [pc, #160]	@ (8000bcc <MX_TIM5_Init+0xf8>)
 8000b2c:	f003 fda4 	bl	8004678 <HAL_TIM_Base_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000b36:	f000 f8d3 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000b3a:	4824      	ldr	r0, [pc, #144]	@ (8000bcc <MX_TIM5_Init+0xf8>)
 8000b3c:	f003 fdeb 	bl	8004716 <HAL_TIM_PWM_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000b46:	f000 f8cb 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 8000b4a:	2108      	movs	r1, #8
 8000b4c:	481f      	ldr	r0, [pc, #124]	@ (8000bcc <MX_TIM5_Init+0xf8>)
 8000b4e:	f003 fee1 	bl	8004914 <HAL_TIM_OnePulse_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8000b58:	f000 f8c2 	bl	8000ce0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000b5c:	2306      	movs	r3, #6
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8000b60:	2320      	movs	r3, #32
 8000b62:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4818      	ldr	r0, [pc, #96]	@ (8000bcc <MX_TIM5_Init+0xf8>)
 8000b6c:	f003 ffee 	bl	8004b4c <HAL_TIM_SlaveConfigSynchro>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM5_Init+0xa6>
  {
    Error_Handler();
 8000b76:	f000 f8b3 	bl	8000ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	4619      	mov	r1, r3
 8000b88:	4810      	ldr	r0, [pc, #64]	@ (8000bcc <MX_TIM5_Init+0xf8>)
 8000b8a:	f004 fb69 	bl	8005260 <HAL_TIMEx_MasterConfigSynchronization>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM5_Init+0xc4>
  {
    Error_Handler();
 8000b94:	f000 f8a4 	bl	8000ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000b98:	2370      	movs	r3, #112	@ 0x70
 8000b9a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 30-1;
 8000b9c:	231d      	movs	r3, #29
 8000b9e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ba8:	463b      	mov	r3, r7
 8000baa:	2204      	movs	r2, #4
 8000bac:	4619      	mov	r1, r3
 8000bae:	4807      	ldr	r0, [pc, #28]	@ (8000bcc <MX_TIM5_Init+0xf8>)
 8000bb0:	f003 ff0a 	bl	80049c8 <HAL_TIM_PWM_ConfigChannel>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 8000bba:	f000 f891 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000bbe:	4803      	ldr	r0, [pc, #12]	@ (8000bcc <MX_TIM5_Init+0xf8>)
 8000bc0:	f000 f9c0 	bl	8000f44 <HAL_TIM_MspPostInit>

}
 8000bc4:	bf00      	nop
 8000bc6:	3738      	adds	r7, #56	@ 0x38
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	200002e0 	.word	0x200002e0
 8000bd0:	40000c00 	.word	0x40000c00

08000bd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <MX_DMA_Init+0x3c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a0b      	ldr	r2, [pc, #44]	@ (8000c10 <MX_DMA_Init+0x3c>)
 8000be4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <MX_DMA_Init+0x3c>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2038      	movs	r0, #56	@ 0x38
 8000bfc:	f001 f98f 	bl	8001f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c00:	2038      	movs	r0, #56	@ 0x38
 8000c02:	f001 f9a8 	bl	8001f56 <HAL_NVIC_EnableIRQ>

}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800

08000c14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	4b17      	ldr	r3, [pc, #92]	@ (8000c7c <MX_GPIO_Init+0x68>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	4a16      	ldr	r2, [pc, #88]	@ (8000c7c <MX_GPIO_Init+0x68>)
 8000c24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2a:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <MX_GPIO_Init+0x68>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <MX_GPIO_Init+0x68>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c7c <MX_GPIO_Init+0x68>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b0d      	ldr	r3, [pc, #52]	@ (8000c7c <MX_GPIO_Init+0x68>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <MX_GPIO_Init+0x68>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a08      	ldr	r2, [pc, #32]	@ (8000c7c <MX_GPIO_Init+0x68>)
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <MX_GPIO_Init+0x68>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c6e:	bf00      	nop
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800

08000c80 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
//	char* data = "Callback Complete!";
//	CDC_Transmit_FS((uint8_t*)data, strlen(data));

    if (hadc->Instance == ADC1) {
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a10      	ldr	r2, [pc, #64]	@ (8000cd0 <HAL_ADC_ConvCpltCallback+0x50>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d119      	bne.n	8000cc6 <HAL_ADC_ConvCpltCallback+0x46>
		counter = counter % 100;
 8000c92:	4b10      	ldr	r3, [pc, #64]	@ (8000cd4 <HAL_ADC_ConvCpltCallback+0x54>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <HAL_ADC_ConvCpltCallback+0x58>)
 8000c98:	fb83 1302 	smull	r1, r3, r3, r2
 8000c9c:	1159      	asrs	r1, r3, #5
 8000c9e:	17d3      	asrs	r3, r2, #31
 8000ca0:	1acb      	subs	r3, r1, r3
 8000ca2:	2164      	movs	r1, #100	@ 0x64
 8000ca4:	fb01 f303 	mul.w	r3, r1, r3
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd4 <HAL_ADC_ConvCpltCallback+0x54>)
 8000cac:	6013      	str	r3, [r2, #0]
		if (counter++ == 0) {
 8000cae:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <HAL_ADC_ConvCpltCallback+0x54>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	1c5a      	adds	r2, r3, #1
 8000cb4:	4907      	ldr	r1, [pc, #28]	@ (8000cd4 <HAL_ADC_ConvCpltCallback+0x54>)
 8000cb6:	600a      	str	r2, [r1, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d104      	bne.n	8000cc6 <HAL_ADC_ConvCpltCallback+0x46>
			CDC_Transmit_FS((uint8_t*)DMA_buffer, DMA_SIZE*2);
 8000cbc:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8000cc0:	4806      	ldr	r0, [pc, #24]	@ (8000cdc <HAL_ADC_ConvCpltCallback+0x5c>)
 8000cc2:	f007 ff89 	bl	8008bd8 <CDC_Transmit_FS>
		}
    }
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40012000 	.word	0x40012000
 8000cd4:	20002268 	.word	0x20002268
 8000cd8:	51eb851f 	.word	0x51eb851f
 8000cdc:	20000328 	.word	0x20000328

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <Error_Handler+0x8>

08000cec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfa:	4a0f      	ldr	r2, [pc, #60]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000cfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d02:	4b0d      	ldr	r3, [pc, #52]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d16:	4a08      	ldr	r2, [pc, #32]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	40023800 	.word	0x40023800

08000d3c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	@ 0x28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a33      	ldr	r2, [pc, #204]	@ (8000e28 <HAL_ADC_MspInit+0xec>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d15f      	bne.n	8000e1e <HAL_ADC_MspInit+0xe2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	4b32      	ldr	r3, [pc, #200]	@ (8000e2c <HAL_ADC_MspInit+0xf0>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d66:	4a31      	ldr	r2, [pc, #196]	@ (8000e2c <HAL_ADC_MspInit+0xf0>)
 8000d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e2c <HAL_ADC_MspInit+0xf0>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b2b      	ldr	r3, [pc, #172]	@ (8000e2c <HAL_ADC_MspInit+0xf0>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	4a2a      	ldr	r2, [pc, #168]	@ (8000e2c <HAL_ADC_MspInit+0xf0>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8a:	4b28      	ldr	r3, [pc, #160]	@ (8000e2c <HAL_ADC_MspInit+0xf0>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d96:	2301      	movs	r3, #1
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4821      	ldr	r0, [pc, #132]	@ (8000e30 <HAL_ADC_MspInit+0xf4>)
 8000daa:	f001 fc5f 	bl	800266c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000dae:	4b21      	ldr	r3, [pc, #132]	@ (8000e34 <HAL_ADC_MspInit+0xf8>)
 8000db0:	4a21      	ldr	r2, [pc, #132]	@ (8000e38 <HAL_ADC_MspInit+0xfc>)
 8000db2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000db4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e34 <HAL_ADC_MspInit+0xf8>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dba:	4b1e      	ldr	r3, [pc, #120]	@ (8000e34 <HAL_ADC_MspInit+0xf8>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e34 <HAL_ADC_MspInit+0xf8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e34 <HAL_ADC_MspInit+0xf8>)
 8000dc8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dcc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dce:	4b19      	ldr	r3, [pc, #100]	@ (8000e34 <HAL_ADC_MspInit+0xf8>)
 8000dd0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000dd4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dd6:	4b17      	ldr	r3, [pc, #92]	@ (8000e34 <HAL_ADC_MspInit+0xf8>)
 8000dd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ddc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000dde:	4b15      	ldr	r3, [pc, #84]	@ (8000e34 <HAL_ADC_MspInit+0xf8>)
 8000de0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000de4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000de6:	4b13      	ldr	r3, [pc, #76]	@ (8000e34 <HAL_ADC_MspInit+0xf8>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dec:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <HAL_ADC_MspInit+0xf8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000df2:	4810      	ldr	r0, [pc, #64]	@ (8000e34 <HAL_ADC_MspInit+0xf8>)
 8000df4:	f001 f8ca 	bl	8001f8c <HAL_DMA_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000dfe:	f7ff ff6f 	bl	8000ce0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a0b      	ldr	r2, [pc, #44]	@ (8000e34 <HAL_ADC_MspInit+0xf8>)
 8000e06:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e08:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <HAL_ADC_MspInit+0xf8>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	2012      	movs	r0, #18
 8000e14:	f001 f883 	bl	8001f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e18:	2012      	movs	r0, #18
 8000e1a:	f001 f89c 	bl	8001f56 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e1e:	bf00      	nop
 8000e20:	3728      	adds	r7, #40	@ 0x28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40012000 	.word	0x40012000
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020000 	.word	0x40020000
 8000e34:	20000160 	.word	0x20000160
 8000e38:	40026410 	.word	0x40026410

08000e3c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0b      	ldr	r2, [pc, #44]	@ (8000e78 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d10d      	bne.n	8000e6a <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <HAL_TIM_PWM_MspInit+0x40>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e56:	4a09      	ldr	r2, [pc, #36]	@ (8000e7c <HAL_TIM_PWM_MspInit+0x40>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e5e:	4b07      	ldr	r3, [pc, #28]	@ (8000e7c <HAL_TIM_PWM_MspInit+0x40>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000e6a:	bf00      	nop
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40010000 	.word	0x40010000
 8000e7c:	40023800 	.word	0x40023800

08000e80 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b087      	sub	sp, #28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e90:	d10e      	bne.n	8000eb0 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	4b27      	ldr	r3, [pc, #156]	@ (8000f34 <HAL_TIM_Base_MspInit+0xb4>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9a:	4a26      	ldr	r2, [pc, #152]	@ (8000f34 <HAL_TIM_Base_MspInit+0xb4>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ea2:	4b24      	ldr	r3, [pc, #144]	@ (8000f34 <HAL_TIM_Base_MspInit+0xb4>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000eae:	e03a      	b.n	8000f26 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a20      	ldr	r2, [pc, #128]	@ (8000f38 <HAL_TIM_Base_MspInit+0xb8>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d10e      	bne.n	8000ed8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8000f34 <HAL_TIM_Base_MspInit+0xb4>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec2:	4a1c      	ldr	r2, [pc, #112]	@ (8000f34 <HAL_TIM_Base_MspInit+0xb4>)
 8000ec4:	f043 0302 	orr.w	r3, r3, #2
 8000ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eca:	4b1a      	ldr	r3, [pc, #104]	@ (8000f34 <HAL_TIM_Base_MspInit+0xb4>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]
}
 8000ed6:	e026      	b.n	8000f26 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a17      	ldr	r2, [pc, #92]	@ (8000f3c <HAL_TIM_Base_MspInit+0xbc>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d10e      	bne.n	8000f00 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b13      	ldr	r3, [pc, #76]	@ (8000f34 <HAL_TIM_Base_MspInit+0xb4>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eea:	4a12      	ldr	r2, [pc, #72]	@ (8000f34 <HAL_TIM_Base_MspInit+0xb4>)
 8000eec:	f043 0304 	orr.w	r3, r3, #4
 8000ef0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ef2:	4b10      	ldr	r3, [pc, #64]	@ (8000f34 <HAL_TIM_Base_MspInit+0xb4>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
}
 8000efe:	e012      	b.n	8000f26 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM5)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0e      	ldr	r2, [pc, #56]	@ (8000f40 <HAL_TIM_Base_MspInit+0xc0>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d10d      	bne.n	8000f26 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <HAL_TIM_Base_MspInit+0xb4>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	4a08      	ldr	r2, [pc, #32]	@ (8000f34 <HAL_TIM_Base_MspInit+0xb4>)
 8000f14:	f043 0308 	orr.w	r3, r3, #8
 8000f18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f1a:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <HAL_TIM_Base_MspInit+0xb4>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1e:	f003 0308 	and.w	r3, r3, #8
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
}
 8000f26:	bf00      	nop
 8000f28:	371c      	adds	r7, #28
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40000400 	.word	0x40000400
 8000f3c:	40000800 	.word	0x40000800
 8000f40:	40000c00 	.word	0x40000c00

08000f44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08c      	sub	sp, #48	@ 0x30
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 031c 	add.w	r3, r7, #28
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a5a      	ldr	r2, [pc, #360]	@ (80010cc <HAL_TIM_MspPostInit+0x188>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d11f      	bne.n	8000fa6 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
 8000f6a:	4b59      	ldr	r3, [pc, #356]	@ (80010d0 <HAL_TIM_MspPostInit+0x18c>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	4a58      	ldr	r2, [pc, #352]	@ (80010d0 <HAL_TIM_MspPostInit+0x18c>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f76:	4b56      	ldr	r3, [pc, #344]	@ (80010d0 <HAL_TIM_MspPostInit+0x18c>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	61bb      	str	r3, [r7, #24]
 8000f80:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f94:	2301      	movs	r3, #1
 8000f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	484d      	ldr	r0, [pc, #308]	@ (80010d4 <HAL_TIM_MspPostInit+0x190>)
 8000fa0:	f001 fb64 	bl	800266c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000fa4:	e08e      	b.n	80010c4 <HAL_TIM_MspPostInit+0x180>
  else if(htim->Instance==TIM2)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fae:	d11e      	bne.n	8000fee <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	4b46      	ldr	r3, [pc, #280]	@ (80010d0 <HAL_TIM_MspPostInit+0x18c>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb8:	4a45      	ldr	r2, [pc, #276]	@ (80010d0 <HAL_TIM_MspPostInit+0x18c>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc0:	4b43      	ldr	r3, [pc, #268]	@ (80010d0 <HAL_TIM_MspPostInit+0x18c>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fcc:	2320      	movs	r3, #32
 8000fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	483b      	ldr	r0, [pc, #236]	@ (80010d4 <HAL_TIM_MspPostInit+0x190>)
 8000fe8:	f001 fb40 	bl	800266c <HAL_GPIO_Init>
}
 8000fec:	e06a      	b.n	80010c4 <HAL_TIM_MspPostInit+0x180>
  else if(htim->Instance==TIM3)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a39      	ldr	r2, [pc, #228]	@ (80010d8 <HAL_TIM_MspPostInit+0x194>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d11e      	bne.n	8001036 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	4b34      	ldr	r3, [pc, #208]	@ (80010d0 <HAL_TIM_MspPostInit+0x18c>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001000:	4a33      	ldr	r2, [pc, #204]	@ (80010d0 <HAL_TIM_MspPostInit+0x18c>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	6313      	str	r3, [r2, #48]	@ 0x30
 8001008:	4b31      	ldr	r3, [pc, #196]	@ (80010d0 <HAL_TIM_MspPostInit+0x18c>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001014:	2340      	movs	r3, #64	@ 0x40
 8001016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001024:	2302      	movs	r3, #2
 8001026:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	f107 031c 	add.w	r3, r7, #28
 800102c:	4619      	mov	r1, r3
 800102e:	4829      	ldr	r0, [pc, #164]	@ (80010d4 <HAL_TIM_MspPostInit+0x190>)
 8001030:	f001 fb1c 	bl	800266c <HAL_GPIO_Init>
}
 8001034:	e046      	b.n	80010c4 <HAL_TIM_MspPostInit+0x180>
  else if(htim->Instance==TIM4)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a28      	ldr	r2, [pc, #160]	@ (80010dc <HAL_TIM_MspPostInit+0x198>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d11e      	bne.n	800107e <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	4b22      	ldr	r3, [pc, #136]	@ (80010d0 <HAL_TIM_MspPostInit+0x18c>)
 8001046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001048:	4a21      	ldr	r2, [pc, #132]	@ (80010d0 <HAL_TIM_MspPostInit+0x18c>)
 800104a:	f043 0302 	orr.w	r3, r3, #2
 800104e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001050:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <HAL_TIM_MspPostInit+0x18c>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800105c:	2340      	movs	r3, #64	@ 0x40
 800105e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800106c:	2302      	movs	r3, #2
 800106e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	4619      	mov	r1, r3
 8001076:	481a      	ldr	r0, [pc, #104]	@ (80010e0 <HAL_TIM_MspPostInit+0x19c>)
 8001078:	f001 faf8 	bl	800266c <HAL_GPIO_Init>
}
 800107c:	e022      	b.n	80010c4 <HAL_TIM_MspPostInit+0x180>
  else if(htim->Instance==TIM5)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a18      	ldr	r2, [pc, #96]	@ (80010e4 <HAL_TIM_MspPostInit+0x1a0>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d11d      	bne.n	80010c4 <HAL_TIM_MspPostInit+0x180>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	4b10      	ldr	r3, [pc, #64]	@ (80010d0 <HAL_TIM_MspPostInit+0x18c>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001090:	4a0f      	ldr	r2, [pc, #60]	@ (80010d0 <HAL_TIM_MspPostInit+0x18c>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	6313      	str	r3, [r2, #48]	@ 0x30
 8001098:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <HAL_TIM_MspPostInit+0x18c>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010a4:	2302      	movs	r3, #2
 80010a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80010b4:	2302      	movs	r3, #2
 80010b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	4619      	mov	r1, r3
 80010be:	4805      	ldr	r0, [pc, #20]	@ (80010d4 <HAL_TIM_MspPostInit+0x190>)
 80010c0:	f001 fad4 	bl	800266c <HAL_GPIO_Init>
}
 80010c4:	bf00      	nop
 80010c6:	3730      	adds	r7, #48	@ 0x30
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40010000 	.word	0x40010000
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40020000 	.word	0x40020000
 80010d8:	40000400 	.word	0x40000400
 80010dc:	40000800 	.word	0x40000800
 80010e0:	40020400 	.word	0x40020400
 80010e4:	40000c00 	.word	0x40000c00

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <NMI_Handler+0x4>

080010f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <HardFault_Handler+0x4>

080010f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <MemManage_Handler+0x4>

08001100 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <BusFault_Handler+0x4>

08001108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <UsageFault_Handler+0x4>

08001110 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800113e:	f000 f8af 	bl	80012a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800114c:	4802      	ldr	r0, [pc, #8]	@ (8001158 <ADC_IRQHandler+0x10>)
 800114e:	f000 f92e 	bl	80013ae <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000118 	.word	0x20000118

0800115c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001160:	4802      	ldr	r0, [pc, #8]	@ (800116c <DMA2_Stream0_IRQHandler+0x10>)
 8001162:	f001 f819 	bl	8002198 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000160 	.word	0x20000160

08001170 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001174:	4802      	ldr	r0, [pc, #8]	@ (8001180 <OTG_FS_IRQHandler+0x10>)
 8001176:	f001 fd41 	bl	8002bfc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20003750 	.word	0x20003750

08001184 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001188:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <SystemInit+0x20>)
 800118a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800118e:	4a05      	ldr	r2, [pc, #20]	@ (80011a4 <SystemInit+0x20>)
 8001190:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001194:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011ac:	f7ff ffea 	bl	8001184 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011b0:	480c      	ldr	r0, [pc, #48]	@ (80011e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011b2:	490d      	ldr	r1, [pc, #52]	@ (80011e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011b4:	4a0d      	ldr	r2, [pc, #52]	@ (80011ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b8:	e002      	b.n	80011c0 <LoopCopyDataInit>

080011ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011be:	3304      	adds	r3, #4

080011c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c4:	d3f9      	bcc.n	80011ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c6:	4a0a      	ldr	r2, [pc, #40]	@ (80011f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011c8:	4c0a      	ldr	r4, [pc, #40]	@ (80011f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011cc:	e001      	b.n	80011d2 <LoopFillZerobss>

080011ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d0:	3204      	adds	r2, #4

080011d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d4:	d3fb      	bcc.n	80011ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011d6:	f008 f959 	bl	800948c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011da:	f7ff f993 	bl	8000504 <main>
  bx  lr    
 80011de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e8:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80011ec:	0800955c 	.word	0x0800955c
  ldr r2, =_sbss
 80011f0:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80011f4:	20003e54 	.word	0x20003e54

080011f8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f8:	e7fe      	b.n	80011f8 <DMA1_Stream0_IRQHandler>
	...

080011fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001200:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <HAL_Init+0x40>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a0d      	ldr	r2, [pc, #52]	@ (800123c <HAL_Init+0x40>)
 8001206:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800120a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800120c:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <HAL_Init+0x40>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0a      	ldr	r2, [pc, #40]	@ (800123c <HAL_Init+0x40>)
 8001212:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001216:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001218:	4b08      	ldr	r3, [pc, #32]	@ (800123c <HAL_Init+0x40>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a07      	ldr	r2, [pc, #28]	@ (800123c <HAL_Init+0x40>)
 800121e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001222:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001224:	2003      	movs	r0, #3
 8001226:	f000 fe6f 	bl	8001f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800122a:	200f      	movs	r0, #15
 800122c:	f000 f808 	bl	8001240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001230:	f7ff fd5c 	bl	8000cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023c00 	.word	0x40023c00

08001240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001248:	4b12      	ldr	r3, [pc, #72]	@ (8001294 <HAL_InitTick+0x54>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <HAL_InitTick+0x58>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001256:	fbb3 f3f1 	udiv	r3, r3, r1
 800125a:	fbb2 f3f3 	udiv	r3, r2, r3
 800125e:	4618      	mov	r0, r3
 8001260:	f000 fe87 	bl	8001f72 <HAL_SYSTICK_Config>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e00e      	b.n	800128c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b0f      	cmp	r3, #15
 8001272:	d80a      	bhi.n	800128a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001274:	2200      	movs	r2, #0
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800127c:	f000 fe4f 	bl	8001f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001280:	4a06      	ldr	r2, [pc, #24]	@ (800129c <HAL_InitTick+0x5c>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	e000      	b.n	800128c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000000 	.word	0x20000000
 8001298:	20000008 	.word	0x20000008
 800129c:	20000004 	.word	0x20000004

080012a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a4:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <HAL_IncTick+0x20>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <HAL_IncTick+0x24>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4413      	add	r3, r2
 80012b0:	4a04      	ldr	r2, [pc, #16]	@ (80012c4 <HAL_IncTick+0x24>)
 80012b2:	6013      	str	r3, [r2, #0]
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000008 	.word	0x20000008
 80012c4:	2000226c 	.word	0x2000226c

080012c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return uwTick;
 80012cc:	4b03      	ldr	r3, [pc, #12]	@ (80012dc <HAL_GetTick+0x14>)
 80012ce:	681b      	ldr	r3, [r3, #0]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	2000226c 	.word	0x2000226c

080012e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e8:	f7ff ffee 	bl	80012c8 <HAL_GetTick>
 80012ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80012f8:	d005      	beq.n	8001306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001324 <HAL_Delay+0x44>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4413      	add	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001306:	bf00      	nop
 8001308:	f7ff ffde 	bl	80012c8 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	429a      	cmp	r2, r3
 8001316:	d8f7      	bhi.n	8001308 <HAL_Delay+0x28>
  {
  }
}
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000008 	.word	0x20000008

08001328 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001330:	2300      	movs	r3, #0
 8001332:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e033      	b.n	80013a6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001342:	2b00      	cmp	r3, #0
 8001344:	d109      	bne.n	800135a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff fcf8 	bl	8000d3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	f003 0310 	and.w	r3, r3, #16
 8001362:	2b00      	cmp	r3, #0
 8001364:	d118      	bne.n	8001398 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800136e:	f023 0302 	bic.w	r3, r3, #2
 8001372:	f043 0202 	orr.w	r2, r3, #2
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 fb6c 	bl	8001a58 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138a:	f023 0303 	bic.w	r3, r3, #3
 800138e:	f043 0201 	orr.w	r2, r3, #1
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	641a      	str	r2, [r3, #64]	@ 0x40
 8001396:	e001      	b.n	800139c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b086      	sub	sp, #24
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	f003 0320 	and.w	r3, r3, #32
 80013dc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d049      	beq.n	8001478 <HAL_ADC_IRQHandler+0xca>
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d046      	beq.n	8001478 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ee:	f003 0310 	and.w	r3, r3, #16
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d105      	bne.n	8001402 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d12b      	bne.n	8001468 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001414:	2b00      	cmp	r3, #0
 8001416:	d127      	bne.n	8001468 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800141e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001422:	2b00      	cmp	r3, #0
 8001424:	d006      	beq.n	8001434 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001430:	2b00      	cmp	r3, #0
 8001432:	d119      	bne.n	8001468 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0220 	bic.w	r2, r2, #32
 8001442:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001448:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001454:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d105      	bne.n	8001468 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001460:	f043 0201 	orr.w	r2, r3, #1
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff fc09 	bl	8000c80 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f06f 0212 	mvn.w	r2, #18
 8001476:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001486:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d057      	beq.n	800153e <HAL_ADC_IRQHandler+0x190>
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d054      	beq.n	800153e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001498:	f003 0310 	and.w	r3, r3, #16
 800149c:	2b00      	cmp	r3, #0
 800149e:	d105      	bne.n	80014ac <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d139      	bne.n	800152e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014c0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d006      	beq.n	80014d6 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d12b      	bne.n	800152e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d124      	bne.n	800152e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d11d      	bne.n	800152e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d119      	bne.n	800152e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001508:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800151e:	2b00      	cmp	r3, #0
 8001520:	d105      	bne.n	800152e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	f043 0201 	orr.w	r2, r3, #1
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 fc10 	bl	8001d54 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f06f 020c 	mvn.w	r2, #12
 800153c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800154c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d017      	beq.n	8001584 <HAL_ADC_IRQHandler+0x1d6>
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d014      	beq.n	8001584 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	2b01      	cmp	r3, #1
 8001566:	d10d      	bne.n	8001584 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 f929 	bl	80017cc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f06f 0201 	mvn.w	r2, #1
 8001582:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 0320 	and.w	r3, r3, #32
 800158a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001592:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d015      	beq.n	80015c6 <HAL_ADC_IRQHandler+0x218>
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d012      	beq.n	80015c6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a4:	f043 0202 	orr.w	r2, r3, #2
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f06f 0220 	mvn.w	r2, #32
 80015b4:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 f912 	bl	80017e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f06f 0220 	mvn.w	r2, #32
 80015c4:	601a      	str	r2, [r3, #0]
  }
}
 80015c6:	bf00      	nop
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d101      	bne.n	80015f2 <HAL_ADC_Start_DMA+0x22>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e0d0      	b.n	8001794 <HAL_ADC_Start_DMA+0x1c4>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b01      	cmp	r3, #1
 8001606:	d018      	beq.n	800163a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0201 	orr.w	r2, r2, #1
 8001616:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001618:	4b60      	ldr	r3, [pc, #384]	@ (800179c <HAL_ADC_Start_DMA+0x1cc>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a60      	ldr	r2, [pc, #384]	@ (80017a0 <HAL_ADC_Start_DMA+0x1d0>)
 800161e:	fba2 2303 	umull	r2, r3, r2, r3
 8001622:	0c9a      	lsrs	r2, r3, #18
 8001624:	4613      	mov	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800162c:	e002      	b.n	8001634 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	3b01      	subs	r3, #1
 8001632:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f9      	bne.n	800162e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001644:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001648:	d107      	bne.n	800165a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001658:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b01      	cmp	r3, #1
 8001666:	f040 8088 	bne.w	800177a <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001672:	f023 0301 	bic.w	r3, r3, #1
 8001676:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001688:	2b00      	cmp	r3, #0
 800168a:	d007      	beq.n	800169c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001690:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001694:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016a8:	d106      	bne.n	80016b8 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ae:	f023 0206 	bic.w	r2, r3, #6
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	645a      	str	r2, [r3, #68]	@ 0x44
 80016b6:	e002      	b.n	80016be <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2200      	movs	r2, #0
 80016bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016c6:	4b37      	ldr	r3, [pc, #220]	@ (80017a4 <HAL_ADC_Start_DMA+0x1d4>)
 80016c8:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016ce:	4a36      	ldr	r2, [pc, #216]	@ (80017a8 <HAL_ADC_Start_DMA+0x1d8>)
 80016d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016d6:	4a35      	ldr	r2, [pc, #212]	@ (80017ac <HAL_ADC_Start_DMA+0x1dc>)
 80016d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016de:	4a34      	ldr	r2, [pc, #208]	@ (80017b0 <HAL_ADC_Start_DMA+0x1e0>)
 80016e0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80016ea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80016fa:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800170a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	334c      	adds	r3, #76	@ 0x4c
 8001716:	4619      	mov	r1, r3
 8001718:	68ba      	ldr	r2, [r7, #8]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f000 fce4 	bl	80020e8 <HAL_DMA_Start_IT>
 8001720:	4603      	mov	r3, r0
 8001722:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 031f 	and.w	r3, r3, #31
 800172c:	2b00      	cmp	r3, #0
 800172e:	d10f      	bne.n	8001750 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d129      	bne.n	8001792 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	e020      	b.n	8001792 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a17      	ldr	r2, [pc, #92]	@ (80017b4 <HAL_ADC_Start_DMA+0x1e4>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d11b      	bne.n	8001792 <HAL_ADC_Start_DMA+0x1c2>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d114      	bne.n	8001792 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	e00b      	b.n	8001792 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177e:	f043 0210 	orr.w	r2, r3, #16
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178a:	f043 0201 	orr.w	r2, r3, #1
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001792:	7ffb      	ldrb	r3, [r7, #31]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3720      	adds	r7, #32
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000000 	.word	0x20000000
 80017a0:	431bde83 	.word	0x431bde83
 80017a4:	40012300 	.word	0x40012300
 80017a8:	08001c51 	.word	0x08001c51
 80017ac:	08001d0b 	.word	0x08001d0b
 80017b0:	08001d27 	.word	0x08001d27
 80017b4:	40012000 	.word	0x40012000

080017b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x1c>
 800180c:	2302      	movs	r3, #2
 800180e:	e113      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x244>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b09      	cmp	r3, #9
 800181e:	d925      	bls.n	800186c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68d9      	ldr	r1, [r3, #12]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	b29b      	uxth	r3, r3
 800182c:	461a      	mov	r2, r3
 800182e:	4613      	mov	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	3b1e      	subs	r3, #30
 8001836:	2207      	movs	r2, #7
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43da      	mvns	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	400a      	ands	r2, r1
 8001844:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68d9      	ldr	r1, [r3, #12]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	b29b      	uxth	r3, r3
 8001856:	4618      	mov	r0, r3
 8001858:	4603      	mov	r3, r0
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4403      	add	r3, r0
 800185e:	3b1e      	subs	r3, #30
 8001860:	409a      	lsls	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	e022      	b.n	80018b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6919      	ldr	r1, [r3, #16]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	b29b      	uxth	r3, r3
 8001878:	461a      	mov	r2, r3
 800187a:	4613      	mov	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4413      	add	r3, r2
 8001880:	2207      	movs	r2, #7
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43da      	mvns	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	400a      	ands	r2, r1
 800188e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6919      	ldr	r1, [r3, #16]
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	4618      	mov	r0, r3
 80018a2:	4603      	mov	r3, r0
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4403      	add	r3, r0
 80018a8:	409a      	lsls	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b06      	cmp	r3, #6
 80018b8:	d824      	bhi.n	8001904 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	3b05      	subs	r3, #5
 80018cc:	221f      	movs	r2, #31
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	400a      	ands	r2, r1
 80018da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	4618      	mov	r0, r3
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	3b05      	subs	r3, #5
 80018f6:	fa00 f203 	lsl.w	r2, r0, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	635a      	str	r2, [r3, #52]	@ 0x34
 8001902:	e04c      	b.n	800199e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b0c      	cmp	r3, #12
 800190a:	d824      	bhi.n	8001956 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	3b23      	subs	r3, #35	@ 0x23
 800191e:	221f      	movs	r2, #31
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43da      	mvns	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	400a      	ands	r2, r1
 800192c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	b29b      	uxth	r3, r3
 800193a:	4618      	mov	r0, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	3b23      	subs	r3, #35	@ 0x23
 8001948:	fa00 f203 	lsl.w	r2, r0, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	631a      	str	r2, [r3, #48]	@ 0x30
 8001954:	e023      	b.n	800199e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	3b41      	subs	r3, #65	@ 0x41
 8001968:	221f      	movs	r2, #31
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43da      	mvns	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	400a      	ands	r2, r1
 8001976:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	b29b      	uxth	r3, r3
 8001984:	4618      	mov	r0, r3
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	3b41      	subs	r3, #65	@ 0x41
 8001992:	fa00 f203 	lsl.w	r2, r0, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800199e:	4b29      	ldr	r3, [pc, #164]	@ (8001a44 <HAL_ADC_ConfigChannel+0x250>)
 80019a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a28      	ldr	r2, [pc, #160]	@ (8001a48 <HAL_ADC_ConfigChannel+0x254>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d10f      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x1d8>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b12      	cmp	r3, #18
 80019b2:	d10b      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001a48 <HAL_ADC_ConfigChannel+0x254>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d12b      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x23a>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a1c      	ldr	r2, [pc, #112]	@ (8001a4c <HAL_ADC_ConfigChannel+0x258>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d003      	beq.n	80019e8 <HAL_ADC_ConfigChannel+0x1f4>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b11      	cmp	r3, #17
 80019e6:	d122      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a11      	ldr	r2, [pc, #68]	@ (8001a4c <HAL_ADC_ConfigChannel+0x258>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d111      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a0a:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <HAL_ADC_ConfigChannel+0x25c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a11      	ldr	r2, [pc, #68]	@ (8001a54 <HAL_ADC_ConfigChannel+0x260>)
 8001a10:	fba2 2303 	umull	r2, r3, r2, r3
 8001a14:	0c9a      	lsrs	r2, r3, #18
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a20:	e002      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f9      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	40012300 	.word	0x40012300
 8001a48:	40012000 	.word	0x40012000
 8001a4c:	10000012 	.word	0x10000012
 8001a50:	20000000 	.word	0x20000000
 8001a54:	431bde83 	.word	0x431bde83

08001a58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a60:	4b79      	ldr	r3, [pc, #484]	@ (8001c48 <ADC_Init+0x1f0>)
 8001a62:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6859      	ldr	r1, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	021a      	lsls	r2, r3, #8
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ab0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6859      	ldr	r1, [r3, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ad2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6899      	ldr	r1, [r3, #8]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aea:	4a58      	ldr	r2, [pc, #352]	@ (8001c4c <ADC_Init+0x1f4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d022      	beq.n	8001b36 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001afe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6899      	ldr	r1, [r3, #8]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6899      	ldr	r1, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	e00f      	b.n	8001b56 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b54:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0202 	bic.w	r2, r2, #2
 8001b64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6899      	ldr	r1, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	7e1b      	ldrb	r3, [r3, #24]
 8001b70:	005a      	lsls	r2, r3, #1
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d01b      	beq.n	8001bbc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b92:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001ba2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6859      	ldr	r1, [r3, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	035a      	lsls	r2, r3, #13
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	e007      	b.n	8001bcc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bca:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001bda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	051a      	lsls	r2, r3, #20
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6899      	ldr	r1, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c0e:	025a      	lsls	r2, r3, #9
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6899      	ldr	r1, [r3, #8]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	029a      	lsls	r2, r3, #10
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	609a      	str	r2, [r3, #8]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	40012300 	.word	0x40012300
 8001c4c:	0f000001 	.word	0x0f000001

08001c50 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c5c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d13c      	bne.n	8001ce4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d12b      	bne.n	8001cdc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d127      	bne.n	8001cdc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c92:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d006      	beq.n	8001ca8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d119      	bne.n	8001cdc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0220 	bic.w	r2, r2, #32
 8001cb6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d105      	bne.n	8001cdc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd4:	f043 0201 	orr.w	r2, r3, #1
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f7fe ffcf 	bl	8000c80 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001ce2:	e00e      	b.n	8001d02 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce8:	f003 0310 	and.w	r3, r3, #16
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f7ff fd75 	bl	80017e0 <HAL_ADC_ErrorCallback>
}
 8001cf6:	e004      	b.n	8001d02 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	4798      	blx	r3
}
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b084      	sub	sp, #16
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d16:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f7ff fd4d 	bl	80017b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b084      	sub	sp, #16
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d32:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2240      	movs	r2, #64	@ 0x40
 8001d38:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3e:	f043 0204 	orr.w	r2, r3, #4
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f7ff fd4a 	bl	80017e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d4c:	bf00      	nop
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d78:	4b0c      	ldr	r3, [pc, #48]	@ (8001dac <__NVIC_SetPriorityGrouping+0x44>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d84:	4013      	ands	r3, r2
 8001d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d9a:	4a04      	ldr	r2, [pc, #16]	@ (8001dac <__NVIC_SetPriorityGrouping+0x44>)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	60d3      	str	r3, [r2, #12]
}
 8001da0:	bf00      	nop
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db4:	4b04      	ldr	r3, [pc, #16]	@ (8001dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	0a1b      	lsrs	r3, r3, #8
 8001dba:	f003 0307 	and.w	r3, r3, #7
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	db0b      	blt.n	8001df6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	f003 021f 	and.w	r2, r3, #31
 8001de4:	4907      	ldr	r1, [pc, #28]	@ (8001e04 <__NVIC_EnableIRQ+0x38>)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	095b      	lsrs	r3, r3, #5
 8001dec:	2001      	movs	r0, #1
 8001dee:	fa00 f202 	lsl.w	r2, r0, r2
 8001df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000e100 	.word	0xe000e100

08001e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	6039      	str	r1, [r7, #0]
 8001e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	db0a      	blt.n	8001e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	490c      	ldr	r1, [pc, #48]	@ (8001e54 <__NVIC_SetPriority+0x4c>)
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	0112      	lsls	r2, r2, #4
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e30:	e00a      	b.n	8001e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	4908      	ldr	r1, [pc, #32]	@ (8001e58 <__NVIC_SetPriority+0x50>)
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	3b04      	subs	r3, #4
 8001e40:	0112      	lsls	r2, r2, #4
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	440b      	add	r3, r1
 8001e46:	761a      	strb	r2, [r3, #24]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000e100 	.word	0xe000e100
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b089      	sub	sp, #36	@ 0x24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f1c3 0307 	rsb	r3, r3, #7
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	bf28      	it	cs
 8001e7a:	2304      	movcs	r3, #4
 8001e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3304      	adds	r3, #4
 8001e82:	2b06      	cmp	r3, #6
 8001e84:	d902      	bls.n	8001e8c <NVIC_EncodePriority+0x30>
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3b03      	subs	r3, #3
 8001e8a:	e000      	b.n	8001e8e <NVIC_EncodePriority+0x32>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	401a      	ands	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001eae:	43d9      	mvns	r1, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	4313      	orrs	r3, r2
         );
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3724      	adds	r7, #36	@ 0x24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ed4:	d301      	bcc.n	8001eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e00f      	b.n	8001efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eda:	4a0a      	ldr	r2, [pc, #40]	@ (8001f04 <SysTick_Config+0x40>)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ee2:	210f      	movs	r1, #15
 8001ee4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ee8:	f7ff ff8e 	bl	8001e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eec:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <SysTick_Config+0x40>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ef2:	4b04      	ldr	r3, [pc, #16]	@ (8001f04 <SysTick_Config+0x40>)
 8001ef4:	2207      	movs	r2, #7
 8001ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	e000e010 	.word	0xe000e010

08001f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff ff29 	bl	8001d68 <__NVIC_SetPriorityGrouping>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b086      	sub	sp, #24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	4603      	mov	r3, r0
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
 8001f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f30:	f7ff ff3e 	bl	8001db0 <__NVIC_GetPriorityGrouping>
 8001f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	68b9      	ldr	r1, [r7, #8]
 8001f3a:	6978      	ldr	r0, [r7, #20]
 8001f3c:	f7ff ff8e 	bl	8001e5c <NVIC_EncodePriority>
 8001f40:	4602      	mov	r2, r0
 8001f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f46:	4611      	mov	r1, r2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff5d 	bl	8001e08 <__NVIC_SetPriority>
}
 8001f4e:	bf00      	nop
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ff31 	bl	8001dcc <__NVIC_EnableIRQ>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ffa2 	bl	8001ec4 <SysTick_Config>
 8001f80:	4603      	mov	r3, r0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f98:	f7ff f996 	bl	80012c8 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e099      	b.n	80020dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2202      	movs	r2, #2
 8001fac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0201 	bic.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fc8:	e00f      	b.n	8001fea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fca:	f7ff f97d 	bl	80012c8 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b05      	cmp	r3, #5
 8001fd6:	d908      	bls.n	8001fea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e078      	b.n	80020dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1e8      	bne.n	8001fca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	4b38      	ldr	r3, [pc, #224]	@ (80020e4 <HAL_DMA_Init+0x158>)
 8002004:	4013      	ands	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002016:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002022:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800202e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	4313      	orrs	r3, r2
 800203a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002040:	2b04      	cmp	r3, #4
 8002042:	d107      	bne.n	8002054 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204c:	4313      	orrs	r3, r2
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	4313      	orrs	r3, r2
 8002052:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f023 0307 	bic.w	r3, r3, #7
 800206a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	4313      	orrs	r3, r2
 8002074:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207a:	2b04      	cmp	r3, #4
 800207c:	d117      	bne.n	80020ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	4313      	orrs	r3, r2
 8002086:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00e      	beq.n	80020ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 fa6f 	bl	8002574 <DMA_CheckFifoParam>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d008      	beq.n	80020ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2240      	movs	r2, #64	@ 0x40
 80020a0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80020aa:	2301      	movs	r3, #1
 80020ac:	e016      	b.n	80020dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 fa26 	bl	8002508 <DMA_CalcBaseAndBitshift>
 80020bc:	4603      	mov	r3, r0
 80020be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c4:	223f      	movs	r2, #63	@ 0x3f
 80020c6:	409a      	lsls	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	f010803f 	.word	0xf010803f

080020e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
 80020f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_DMA_Start_IT+0x26>
 800210a:	2302      	movs	r3, #2
 800210c:	e040      	b.n	8002190 <HAL_DMA_Start_IT+0xa8>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b01      	cmp	r3, #1
 8002120:	d12f      	bne.n	8002182 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2202      	movs	r2, #2
 8002126:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68b9      	ldr	r1, [r7, #8]
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 f9b8 	bl	80024ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002140:	223f      	movs	r2, #63	@ 0x3f
 8002142:	409a      	lsls	r2, r3
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0216 	orr.w	r2, r2, #22
 8002156:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215c:	2b00      	cmp	r3, #0
 800215e:	d007      	beq.n	8002170 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0208 	orr.w	r2, r2, #8
 800216e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0201 	orr.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	e005      	b.n	800218e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800218a:	2302      	movs	r3, #2
 800218c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800218e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021a4:	4b8e      	ldr	r3, [pc, #568]	@ (80023e0 <HAL_DMA_IRQHandler+0x248>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a8e      	ldr	r2, [pc, #568]	@ (80023e4 <HAL_DMA_IRQHandler+0x24c>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	0a9b      	lsrs	r3, r3, #10
 80021b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c2:	2208      	movs	r2, #8
 80021c4:	409a      	lsls	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d01a      	beq.n	8002204 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d013      	beq.n	8002204 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0204 	bic.w	r2, r2, #4
 80021ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f0:	2208      	movs	r2, #8
 80021f2:	409a      	lsls	r2, r3
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021fc:	f043 0201 	orr.w	r2, r3, #1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002208:	2201      	movs	r2, #1
 800220a:	409a      	lsls	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4013      	ands	r3, r2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d012      	beq.n	800223a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00b      	beq.n	800223a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002226:	2201      	movs	r2, #1
 8002228:	409a      	lsls	r2, r3
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002232:	f043 0202 	orr.w	r2, r3, #2
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800223e:	2204      	movs	r2, #4
 8002240:	409a      	lsls	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4013      	ands	r3, r2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d012      	beq.n	8002270 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00b      	beq.n	8002270 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800225c:	2204      	movs	r2, #4
 800225e:	409a      	lsls	r2, r3
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002268:	f043 0204 	orr.w	r2, r3, #4
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002274:	2210      	movs	r2, #16
 8002276:	409a      	lsls	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4013      	ands	r3, r2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d043      	beq.n	8002308 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d03c      	beq.n	8002308 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002292:	2210      	movs	r2, #16
 8002294:	409a      	lsls	r2, r3
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d018      	beq.n	80022da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d108      	bne.n	80022c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d024      	beq.n	8002308 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	4798      	blx	r3
 80022c6:	e01f      	b.n	8002308 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d01b      	beq.n	8002308 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	4798      	blx	r3
 80022d8:	e016      	b.n	8002308 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d107      	bne.n	80022f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0208 	bic.w	r2, r2, #8
 80022f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230c:	2220      	movs	r2, #32
 800230e:	409a      	lsls	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4013      	ands	r3, r2
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 808f 	beq.w	8002438 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0310 	and.w	r3, r3, #16
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 8087 	beq.w	8002438 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232e:	2220      	movs	r2, #32
 8002330:	409a      	lsls	r2, r3
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b05      	cmp	r3, #5
 8002340:	d136      	bne.n	80023b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0216 	bic.w	r2, r2, #22
 8002350:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695a      	ldr	r2, [r3, #20]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002360:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002366:	2b00      	cmp	r3, #0
 8002368:	d103      	bne.n	8002372 <HAL_DMA_IRQHandler+0x1da>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800236e:	2b00      	cmp	r3, #0
 8002370:	d007      	beq.n	8002382 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0208 	bic.w	r2, r2, #8
 8002380:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002386:	223f      	movs	r2, #63	@ 0x3f
 8002388:	409a      	lsls	r2, r3
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d07e      	beq.n	80024a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	4798      	blx	r3
        }
        return;
 80023ae:	e079      	b.n	80024a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d01d      	beq.n	80023fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10d      	bne.n	80023e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d031      	beq.n	8002438 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	4798      	blx	r3
 80023dc:	e02c      	b.n	8002438 <HAL_DMA_IRQHandler+0x2a0>
 80023de:	bf00      	nop
 80023e0:	20000000 	.word	0x20000000
 80023e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d023      	beq.n	8002438 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	4798      	blx	r3
 80023f8:	e01e      	b.n	8002438 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10f      	bne.n	8002428 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0210 	bic.w	r2, r2, #16
 8002416:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800243c:	2b00      	cmp	r3, #0
 800243e:	d032      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d022      	beq.n	8002492 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2205      	movs	r2, #5
 8002450:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0201 	bic.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	3301      	adds	r3, #1
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	429a      	cmp	r2, r3
 800246e:	d307      	bcc.n	8002480 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f2      	bne.n	8002464 <HAL_DMA_IRQHandler+0x2cc>
 800247e:	e000      	b.n	8002482 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002480:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002496:	2b00      	cmp	r3, #0
 8002498:	d005      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	4798      	blx	r3
 80024a2:	e000      	b.n	80024a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80024a4:	bf00      	nop
    }
  }
}
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b40      	cmp	r3, #64	@ 0x40
 80024d8:	d108      	bne.n	80024ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024ea:	e007      	b.n	80024fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	60da      	str	r2, [r3, #12]
}
 80024fc:	bf00      	nop
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	3b10      	subs	r3, #16
 8002518:	4a14      	ldr	r2, [pc, #80]	@ (800256c <DMA_CalcBaseAndBitshift+0x64>)
 800251a:	fba2 2303 	umull	r2, r3, r2, r3
 800251e:	091b      	lsrs	r3, r3, #4
 8002520:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002522:	4a13      	ldr	r2, [pc, #76]	@ (8002570 <DMA_CalcBaseAndBitshift+0x68>)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4413      	add	r3, r2
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b03      	cmp	r3, #3
 8002534:	d909      	bls.n	800254a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800253e:	f023 0303 	bic.w	r3, r3, #3
 8002542:	1d1a      	adds	r2, r3, #4
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	659a      	str	r2, [r3, #88]	@ 0x58
 8002548:	e007      	b.n	800255a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002552:	f023 0303 	bic.w	r3, r3, #3
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800255e:	4618      	mov	r0, r3
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	aaaaaaab 	.word	0xaaaaaaab
 8002570:	08009544 	.word	0x08009544

08002574 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002584:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d11f      	bne.n	80025ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b03      	cmp	r3, #3
 8002592:	d856      	bhi.n	8002642 <DMA_CheckFifoParam+0xce>
 8002594:	a201      	add	r2, pc, #4	@ (adr r2, 800259c <DMA_CheckFifoParam+0x28>)
 8002596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259a:	bf00      	nop
 800259c:	080025ad 	.word	0x080025ad
 80025a0:	080025bf 	.word	0x080025bf
 80025a4:	080025ad 	.word	0x080025ad
 80025a8:	08002643 	.word	0x08002643
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d046      	beq.n	8002646 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025bc:	e043      	b.n	8002646 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025c6:	d140      	bne.n	800264a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025cc:	e03d      	b.n	800264a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025d6:	d121      	bne.n	800261c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2b03      	cmp	r3, #3
 80025dc:	d837      	bhi.n	800264e <DMA_CheckFifoParam+0xda>
 80025de:	a201      	add	r2, pc, #4	@ (adr r2, 80025e4 <DMA_CheckFifoParam+0x70>)
 80025e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e4:	080025f5 	.word	0x080025f5
 80025e8:	080025fb 	.word	0x080025fb
 80025ec:	080025f5 	.word	0x080025f5
 80025f0:	0800260d 	.word	0x0800260d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
      break;
 80025f8:	e030      	b.n	800265c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d025      	beq.n	8002652 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800260a:	e022      	b.n	8002652 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002610:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002614:	d11f      	bne.n	8002656 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800261a:	e01c      	b.n	8002656 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b02      	cmp	r3, #2
 8002620:	d903      	bls.n	800262a <DMA_CheckFifoParam+0xb6>
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b03      	cmp	r3, #3
 8002626:	d003      	beq.n	8002630 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002628:	e018      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	73fb      	strb	r3, [r7, #15]
      break;
 800262e:	e015      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002634:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00e      	beq.n	800265a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
      break;
 8002640:	e00b      	b.n	800265a <DMA_CheckFifoParam+0xe6>
      break;
 8002642:	bf00      	nop
 8002644:	e00a      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      break;
 8002646:	bf00      	nop
 8002648:	e008      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      break;
 800264a:	bf00      	nop
 800264c:	e006      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      break;
 800264e:	bf00      	nop
 8002650:	e004      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      break;
 8002652:	bf00      	nop
 8002654:	e002      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      break;   
 8002656:	bf00      	nop
 8002658:	e000      	b.n	800265c <DMA_CheckFifoParam+0xe8>
      break;
 800265a:	bf00      	nop
    }
  } 
  
  return status; 
 800265c:	7bfb      	ldrb	r3, [r7, #15]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop

0800266c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800266c:	b480      	push	{r7}
 800266e:	b089      	sub	sp, #36	@ 0x24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800267a:	2300      	movs	r3, #0
 800267c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800267e:	2300      	movs	r3, #0
 8002680:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
 8002686:	e159      	b.n	800293c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002688:	2201      	movs	r2, #1
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	f040 8148 	bne.w	8002936 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d005      	beq.n	80026be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d130      	bne.n	8002720 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	2203      	movs	r2, #3
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026f4:	2201      	movs	r2, #1
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	091b      	lsrs	r3, r3, #4
 800270a:	f003 0201 	and.w	r2, r3, #1
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	2b03      	cmp	r3, #3
 800272a:	d017      	beq.n	800275c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	2203      	movs	r2, #3
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d123      	bne.n	80027b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	08da      	lsrs	r2, r3, #3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3208      	adds	r2, #8
 8002770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002774:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	220f      	movs	r2, #15
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	08da      	lsrs	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3208      	adds	r2, #8
 80027aa:	69b9      	ldr	r1, [r7, #24]
 80027ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	2203      	movs	r2, #3
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 0203 	and.w	r2, r3, #3
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80a2 	beq.w	8002936 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	4b57      	ldr	r3, [pc, #348]	@ (8002954 <HAL_GPIO_Init+0x2e8>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fa:	4a56      	ldr	r2, [pc, #344]	@ (8002954 <HAL_GPIO_Init+0x2e8>)
 80027fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002800:	6453      	str	r3, [r2, #68]	@ 0x44
 8002802:	4b54      	ldr	r3, [pc, #336]	@ (8002954 <HAL_GPIO_Init+0x2e8>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002806:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800280e:	4a52      	ldr	r2, [pc, #328]	@ (8002958 <HAL_GPIO_Init+0x2ec>)
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	089b      	lsrs	r3, r3, #2
 8002814:	3302      	adds	r3, #2
 8002816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	220f      	movs	r2, #15
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a49      	ldr	r2, [pc, #292]	@ (800295c <HAL_GPIO_Init+0x2f0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d019      	beq.n	800286e <HAL_GPIO_Init+0x202>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a48      	ldr	r2, [pc, #288]	@ (8002960 <HAL_GPIO_Init+0x2f4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d013      	beq.n	800286a <HAL_GPIO_Init+0x1fe>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a47      	ldr	r2, [pc, #284]	@ (8002964 <HAL_GPIO_Init+0x2f8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d00d      	beq.n	8002866 <HAL_GPIO_Init+0x1fa>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a46      	ldr	r2, [pc, #280]	@ (8002968 <HAL_GPIO_Init+0x2fc>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d007      	beq.n	8002862 <HAL_GPIO_Init+0x1f6>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a45      	ldr	r2, [pc, #276]	@ (800296c <HAL_GPIO_Init+0x300>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d101      	bne.n	800285e <HAL_GPIO_Init+0x1f2>
 800285a:	2304      	movs	r3, #4
 800285c:	e008      	b.n	8002870 <HAL_GPIO_Init+0x204>
 800285e:	2307      	movs	r3, #7
 8002860:	e006      	b.n	8002870 <HAL_GPIO_Init+0x204>
 8002862:	2303      	movs	r3, #3
 8002864:	e004      	b.n	8002870 <HAL_GPIO_Init+0x204>
 8002866:	2302      	movs	r3, #2
 8002868:	e002      	b.n	8002870 <HAL_GPIO_Init+0x204>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <HAL_GPIO_Init+0x204>
 800286e:	2300      	movs	r3, #0
 8002870:	69fa      	ldr	r2, [r7, #28]
 8002872:	f002 0203 	and.w	r2, r2, #3
 8002876:	0092      	lsls	r2, r2, #2
 8002878:	4093      	lsls	r3, r2
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002880:	4935      	ldr	r1, [pc, #212]	@ (8002958 <HAL_GPIO_Init+0x2ec>)
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	089b      	lsrs	r3, r3, #2
 8002886:	3302      	adds	r3, #2
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800288e:	4b38      	ldr	r3, [pc, #224]	@ (8002970 <HAL_GPIO_Init+0x304>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	43db      	mvns	r3, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4013      	ands	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028b2:	4a2f      	ldr	r2, [pc, #188]	@ (8002970 <HAL_GPIO_Init+0x304>)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002970 <HAL_GPIO_Init+0x304>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028dc:	4a24      	ldr	r2, [pc, #144]	@ (8002970 <HAL_GPIO_Init+0x304>)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028e2:	4b23      	ldr	r3, [pc, #140]	@ (8002970 <HAL_GPIO_Init+0x304>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002906:	4a1a      	ldr	r2, [pc, #104]	@ (8002970 <HAL_GPIO_Init+0x304>)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800290c:	4b18      	ldr	r3, [pc, #96]	@ (8002970 <HAL_GPIO_Init+0x304>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002930:	4a0f      	ldr	r2, [pc, #60]	@ (8002970 <HAL_GPIO_Init+0x304>)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3301      	adds	r3, #1
 800293a:	61fb      	str	r3, [r7, #28]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	2b0f      	cmp	r3, #15
 8002940:	f67f aea2 	bls.w	8002688 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop
 8002948:	3724      	adds	r7, #36	@ 0x24
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800
 8002958:	40013800 	.word	0x40013800
 800295c:	40020000 	.word	0x40020000
 8002960:	40020400 	.word	0x40020400
 8002964:	40020800 	.word	0x40020800
 8002968:	40020c00 	.word	0x40020c00
 800296c:	40021000 	.word	0x40021000
 8002970:	40013c00 	.word	0x40013c00

08002974 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af02      	add	r7, sp, #8
 800297a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e101      	b.n	8002b8a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	d106      	bne.n	80029a6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f006 fa61 	bl	8008e68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2203      	movs	r2, #3
 80029aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029b4:	d102      	bne.n	80029bc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f002 fe24 	bl	800560e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	7c1a      	ldrb	r2, [r3, #16]
 80029ce:	f88d 2000 	strb.w	r2, [sp]
 80029d2:	3304      	adds	r3, #4
 80029d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029d6:	f002 fd03 	bl	80053e0 <USB_CoreInit>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0ce      	b.n	8002b8a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2100      	movs	r1, #0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f002 fe1c 	bl	8005630 <USB_SetCurrentMode>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2202      	movs	r2, #2
 8002a02:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e0bf      	b.n	8002b8a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	73fb      	strb	r3, [r7, #15]
 8002a0e:	e04a      	b.n	8002aa6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a10:	7bfa      	ldrb	r2, [r7, #15]
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4413      	add	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	3315      	adds	r3, #21
 8002a20:	2201      	movs	r2, #1
 8002a22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a24:	7bfa      	ldrb	r2, [r7, #15]
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	3314      	adds	r3, #20
 8002a34:	7bfa      	ldrb	r2, [r7, #15]
 8002a36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a38:	7bfa      	ldrb	r2, [r7, #15]
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
 8002a3c:	b298      	uxth	r0, r3
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4413      	add	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	332e      	adds	r3, #46	@ 0x2e
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a50:	7bfa      	ldrb	r2, [r7, #15]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	3318      	adds	r3, #24
 8002a60:	2200      	movs	r2, #0
 8002a62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a64:	7bfa      	ldrb	r2, [r7, #15]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	331c      	adds	r3, #28
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a78:	7bfa      	ldrb	r2, [r7, #15]
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	4413      	add	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	3320      	adds	r3, #32
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a8c:	7bfa      	ldrb	r2, [r7, #15]
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	4413      	add	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	3324      	adds	r3, #36	@ 0x24
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	73fb      	strb	r3, [r7, #15]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	791b      	ldrb	r3, [r3, #4]
 8002aaa:	7bfa      	ldrb	r2, [r7, #15]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d3af      	bcc.n	8002a10 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	73fb      	strb	r3, [r7, #15]
 8002ab4:	e044      	b.n	8002b40 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ab6:	7bfa      	ldrb	r2, [r7, #15]
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4413      	add	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002acc:	7bfa      	ldrb	r2, [r7, #15]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002ade:	7bfa      	ldrb	r2, [r7, #15]
 8002ae0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ae2:	7bfa      	ldrb	r2, [r7, #15]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002af8:	7bfa      	ldrb	r2, [r7, #15]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	4413      	add	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b0e:	7bfa      	ldrb	r2, [r7, #15]
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	791b      	ldrb	r3, [r3, #4]
 8002b44:	7bfa      	ldrb	r2, [r7, #15]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d3b5      	bcc.n	8002ab6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	7c1a      	ldrb	r2, [r3, #16]
 8002b52:	f88d 2000 	strb.w	r2, [sp]
 8002b56:	3304      	adds	r3, #4
 8002b58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b5a:	f002 fdb5 	bl	80056c8 <USB_DevInit>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e00c      	b.n	8002b8a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f003 fdff 	bl	8006786 <USB_DevDisconnect>

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_PCD_Start+0x1c>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e022      	b.n	8002bf4 <HAL_PCD_Start+0x62>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d009      	beq.n	8002bd6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d105      	bne.n	8002bd6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f002 fd06 	bl	80055ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f003 fdad 	bl	8006744 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002bfc:	b590      	push	{r4, r7, lr}
 8002bfe:	b08d      	sub	sp, #52	@ 0x34
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f003 fe6b 	bl	80068ee <USB_GetMode>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f040 848c 	bne.w	8003538 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f003 fdcf 	bl	80067c8 <USB_ReadInterrupts>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 8482 	beq.w	8003536 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	0a1b      	lsrs	r3, r3, #8
 8002c3c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f003 fdbc 	bl	80067c8 <USB_ReadInterrupts>
 8002c50:	4603      	mov	r3, r0
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d107      	bne.n	8002c6a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695a      	ldr	r2, [r3, #20]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f002 0202 	and.w	r2, r2, #2
 8002c68:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f003 fdaa 	bl	80067c8 <USB_ReadInterrupts>
 8002c74:	4603      	mov	r3, r0
 8002c76:	f003 0310 	and.w	r3, r3, #16
 8002c7a:	2b10      	cmp	r3, #16
 8002c7c:	d161      	bne.n	8002d42 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	699a      	ldr	r2, [r3, #24]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0210 	bic.w	r2, r2, #16
 8002c8c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	f003 020f 	and.w	r2, r3, #15
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	4413      	add	r3, r2
 8002caa:	3304      	adds	r3, #4
 8002cac:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002cb4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002cb8:	d124      	bne.n	8002d04 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d035      	beq.n	8002d32 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	091b      	lsrs	r3, r3, #4
 8002cce:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002cd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	6a38      	ldr	r0, [r7, #32]
 8002cda:	f003 fbe1 	bl	80064a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	091b      	lsrs	r3, r3, #4
 8002ce6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cea:	441a      	add	r2, r3
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	695a      	ldr	r2, [r3, #20]
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	091b      	lsrs	r3, r3, #4
 8002cf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cfc:	441a      	add	r2, r3
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	615a      	str	r2, [r3, #20]
 8002d02:	e016      	b.n	8002d32 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002d0a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002d0e:	d110      	bne.n	8002d32 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d16:	2208      	movs	r2, #8
 8002d18:	4619      	mov	r1, r3
 8002d1a:	6a38      	ldr	r0, [r7, #32]
 8002d1c:	f003 fbc0 	bl	80064a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	695a      	ldr	r2, [r3, #20]
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	091b      	lsrs	r3, r3, #4
 8002d28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d2c:	441a      	add	r2, r3
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	699a      	ldr	r2, [r3, #24]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f042 0210 	orr.w	r2, r2, #16
 8002d40:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f003 fd3e 	bl	80067c8 <USB_ReadInterrupts>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d52:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002d56:	f040 80a7 	bne.w	8002ea8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f003 fd43 	bl	80067ee <USB_ReadDevAllOutEpInterrupt>
 8002d68:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002d6a:	e099      	b.n	8002ea0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 808e 	beq.w	8002e94 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	4611      	mov	r1, r2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f003 fd67 	bl	8006856 <USB_ReadDevOutEPInterrupt>
 8002d88:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00c      	beq.n	8002dae <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d96:	015a      	lsls	r2, r3, #5
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002da0:	461a      	mov	r2, r3
 8002da2:	2301      	movs	r3, #1
 8002da4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002da6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 fea3 	bl	8003af4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00c      	beq.n	8002dd2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2308      	movs	r3, #8
 8002dc8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002dca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 ff79 	bl	8003cc4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f003 0310 	and.w	r3, r3, #16
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002de8:	461a      	mov	r2, r3
 8002dea:	2310      	movs	r3, #16
 8002dec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d030      	beq.n	8002e5a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e00:	2b80      	cmp	r3, #128	@ 0x80
 8002e02:	d109      	bne.n	8002e18 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	69fa      	ldr	r2, [r7, #28]
 8002e0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e16:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002e18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	4413      	add	r3, r2
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	78db      	ldrb	r3, [r3, #3]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d108      	bne.n	8002e48 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	4619      	mov	r1, r3
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f006 f90c 	bl	8009060 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4a:	015a      	lsls	r2, r3, #5
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e54:	461a      	mov	r2, r3
 8002e56:	2302      	movs	r3, #2
 8002e58:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	f003 0320 	and.w	r3, r3, #32
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d008      	beq.n	8002e76 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e70:	461a      	mov	r2, r3
 8002e72:	2320      	movs	r3, #32
 8002e74:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d009      	beq.n	8002e94 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e82:	015a      	lsls	r2, r3, #5
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	4413      	add	r3, r2
 8002e88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e92:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e96:	3301      	adds	r3, #1
 8002e98:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e9c:	085b      	lsrs	r3, r3, #1
 8002e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f47f af62 	bne.w	8002d6c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f003 fc8b 	bl	80067c8 <USB_ReadInterrupts>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eb8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ebc:	f040 80db 	bne.w	8003076 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f003 fcac 	bl	8006822 <USB_ReadDevAllInEpInterrupt>
 8002eca:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002ed0:	e0cd      	b.n	800306e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 80c2 	beq.w	8003062 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f003 fcd2 	bl	8006892 <USB_ReadDevInEPInterrupt>
 8002eee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d057      	beq.n	8002faa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efc:	f003 030f 	and.w	r3, r3, #15
 8002f00:	2201      	movs	r2, #1
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	43db      	mvns	r3, r3
 8002f14:	69f9      	ldr	r1, [r7, #28]
 8002f16:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f20:	015a      	lsls	r2, r3, #5
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	799b      	ldrb	r3, [r3, #6]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d132      	bne.n	8002f9e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	3320      	adds	r3, #32
 8002f48:	6819      	ldr	r1, [r3, #0]
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f4e:	4613      	mov	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4403      	add	r3, r0
 8002f58:	331c      	adds	r3, #28
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4419      	add	r1, r3
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f62:	4613      	mov	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4403      	add	r3, r0
 8002f6c:	3320      	adds	r3, #32
 8002f6e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d113      	bne.n	8002f9e <HAL_PCD_IRQHandler+0x3a2>
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4413      	add	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	3324      	adds	r3, #36	@ 0x24
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d108      	bne.n	8002f9e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6818      	ldr	r0, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f96:	461a      	mov	r2, r3
 8002f98:	2101      	movs	r1, #1
 8002f9a:	f003 fcd9 	bl	8006950 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f005 ffe0 	bl	8008f6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d008      	beq.n	8002fc6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	2308      	movs	r3, #8
 8002fc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fdc:	461a      	mov	r2, r3
 8002fde:	2310      	movs	r3, #16
 8002fe0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fee:	015a      	lsls	r2, r3, #5
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	2340      	movs	r3, #64	@ 0x40
 8002ffc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d023      	beq.n	8003050 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003008:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800300a:	6a38      	ldr	r0, [r7, #32]
 800300c:	f002 fcc0 	bl	8005990 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003012:	4613      	mov	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	3310      	adds	r3, #16
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	4413      	add	r3, r2
 8003020:	3304      	adds	r3, #4
 8003022:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	78db      	ldrb	r3, [r3, #3]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d108      	bne.n	800303e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2200      	movs	r2, #0
 8003030:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	b2db      	uxtb	r3, r3
 8003036:	4619      	mov	r1, r3
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f006 f823 	bl	8009084 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800303e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	4413      	add	r3, r2
 8003046:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800304a:	461a      	mov	r2, r3
 800304c:	2302      	movs	r3, #2
 800304e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800305a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 fcbd 	bl	80039dc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003064:	3301      	adds	r3, #1
 8003066:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800306a:	085b      	lsrs	r3, r3, #1
 800306c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800306e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003070:	2b00      	cmp	r3, #0
 8003072:	f47f af2e 	bne.w	8002ed2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f003 fba4 	bl	80067c8 <USB_ReadInterrupts>
 8003080:	4603      	mov	r3, r0
 8003082:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003086:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800308a:	d122      	bne.n	80030d2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	69fa      	ldr	r2, [r7, #28]
 8003096:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800309a:	f023 0301 	bic.w	r3, r3, #1
 800309e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d108      	bne.n	80030bc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80030b2:	2100      	movs	r1, #0
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 fea3 	bl	8003e00 <HAL_PCDEx_LPM_Callback>
 80030ba:	e002      	b.n	80030c2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f005 ffc1 	bl	8009044 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695a      	ldr	r2, [r3, #20]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80030d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f003 fb76 	bl	80067c8 <USB_ReadInterrupts>
 80030dc:	4603      	mov	r3, r0
 80030de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030e6:	d112      	bne.n	800310e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d102      	bne.n	80030fe <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f005 ff7d 	bl	8008ff8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695a      	ldr	r2, [r3, #20]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800310c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f003 fb58 	bl	80067c8 <USB_ReadInterrupts>
 8003118:	4603      	mov	r3, r0
 800311a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800311e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003122:	f040 80b7 	bne.w	8003294 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	69fa      	ldr	r2, [r7, #28]
 8003130:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003134:	f023 0301 	bic.w	r3, r3, #1
 8003138:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2110      	movs	r1, #16
 8003140:	4618      	mov	r0, r3
 8003142:	f002 fc25 	bl	8005990 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003146:	2300      	movs	r3, #0
 8003148:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800314a:	e046      	b.n	80031da <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800314c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	4413      	add	r3, r2
 8003154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003158:	461a      	mov	r2, r3
 800315a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800315e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003162:	015a      	lsls	r2, r3, #5
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	4413      	add	r3, r2
 8003168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003170:	0151      	lsls	r1, r2, #5
 8003172:	69fa      	ldr	r2, [r7, #28]
 8003174:	440a      	add	r2, r1
 8003176:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800317a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800317e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	4413      	add	r3, r2
 8003188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800318c:	461a      	mov	r2, r3
 800318e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003192:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003196:	015a      	lsls	r2, r3, #5
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	4413      	add	r3, r2
 800319c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031a4:	0151      	lsls	r1, r2, #5
 80031a6:	69fa      	ldr	r2, [r7, #28]
 80031a8:	440a      	add	r2, r1
 80031aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80031ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80031b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80031b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031b6:	015a      	lsls	r2, r3, #5
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	4413      	add	r3, r2
 80031bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031c4:	0151      	lsls	r1, r2, #5
 80031c6:	69fa      	ldr	r2, [r7, #28]
 80031c8:	440a      	add	r2, r1
 80031ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80031ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80031d2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031d6:	3301      	adds	r3, #1
 80031d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	791b      	ldrb	r3, [r3, #4]
 80031de:	461a      	mov	r2, r3
 80031e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d3b2      	bcc.n	800314c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	69fa      	ldr	r2, [r7, #28]
 80031f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031f4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80031f8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	7bdb      	ldrb	r3, [r3, #15]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d016      	beq.n	8003230 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003208:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800320c:	69fa      	ldr	r2, [r7, #28]
 800320e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003212:	f043 030b 	orr.w	r3, r3, #11
 8003216:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003228:	f043 030b 	orr.w	r3, r3, #11
 800322c:	6453      	str	r3, [r2, #68]	@ 0x44
 800322e:	e015      	b.n	800325c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	69fa      	ldr	r2, [r7, #28]
 800323a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800323e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003242:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003246:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	69fa      	ldr	r2, [r7, #28]
 8003252:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003256:	f043 030b 	orr.w	r3, r3, #11
 800325a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	69fa      	ldr	r2, [r7, #28]
 8003266:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800326a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800326e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6818      	ldr	r0, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800327e:	461a      	mov	r2, r3
 8003280:	f003 fb66 	bl	8006950 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695a      	ldr	r2, [r3, #20]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003292:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f003 fa95 	bl	80067c8 <USB_ReadInterrupts>
 800329e:	4603      	mov	r3, r0
 80032a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032a8:	d123      	bne.n	80032f2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f003 fb2b 	bl	800690a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f002 fbe2 	bl	8005a82 <USB_GetDevSpeed>
 80032be:	4603      	mov	r3, r0
 80032c0:	461a      	mov	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681c      	ldr	r4, [r3, #0]
 80032ca:	f001 f9c9 	bl	8004660 <HAL_RCC_GetHCLKFreq>
 80032ce:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032d4:	461a      	mov	r2, r3
 80032d6:	4620      	mov	r0, r4
 80032d8:	f002 f8e6 	bl	80054a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f005 fe6c 	bl	8008fba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695a      	ldr	r2, [r3, #20]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80032f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f003 fa66 	bl	80067c8 <USB_ReadInterrupts>
 80032fc:	4603      	mov	r3, r0
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b08      	cmp	r3, #8
 8003304:	d10a      	bne.n	800331c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f005 fe49 	bl	8008f9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695a      	ldr	r2, [r3, #20]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f002 0208 	and.w	r2, r2, #8
 800331a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f003 fa51 	bl	80067c8 <USB_ReadInterrupts>
 8003326:	4603      	mov	r3, r0
 8003328:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800332c:	2b80      	cmp	r3, #128	@ 0x80
 800332e:	d123      	bne.n	8003378 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800333c:	2301      	movs	r3, #1
 800333e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003340:	e014      	b.n	800336c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003346:	4613      	mov	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	4413      	add	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d105      	bne.n	8003366 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800335a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335c:	b2db      	uxtb	r3, r3
 800335e:	4619      	mov	r1, r3
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 fb0a 	bl	800397a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003368:	3301      	adds	r3, #1
 800336a:	627b      	str	r3, [r7, #36]	@ 0x24
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	791b      	ldrb	r3, [r3, #4]
 8003370:	461a      	mov	r2, r3
 8003372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003374:	4293      	cmp	r3, r2
 8003376:	d3e4      	bcc.n	8003342 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f003 fa23 	bl	80067c8 <USB_ReadInterrupts>
 8003382:	4603      	mov	r3, r0
 8003384:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003388:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800338c:	d13c      	bne.n	8003408 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800338e:	2301      	movs	r3, #1
 8003390:	627b      	str	r3, [r7, #36]	@ 0x24
 8003392:	e02b      	b.n	80033ec <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	4413      	add	r3, r2
 800339c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033a8:	4613      	mov	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4413      	add	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	3318      	adds	r3, #24
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d115      	bne.n	80033e6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80033ba:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80033bc:	2b00      	cmp	r3, #0
 80033be:	da12      	bge.n	80033e6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033c4:	4613      	mov	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	3317      	adds	r3, #23
 80033d0:	2201      	movs	r2, #1
 80033d2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80033d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	4619      	mov	r1, r3
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 faca 	bl	800397a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	3301      	adds	r3, #1
 80033ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	791b      	ldrb	r3, [r3, #4]
 80033f0:	461a      	mov	r2, r3
 80033f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d3cd      	bcc.n	8003394 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695a      	ldr	r2, [r3, #20]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003406:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f003 f9db 	bl	80067c8 <USB_ReadInterrupts>
 8003412:	4603      	mov	r3, r0
 8003414:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003418:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800341c:	d156      	bne.n	80034cc <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800341e:	2301      	movs	r3, #1
 8003420:	627b      	str	r3, [r7, #36]	@ 0x24
 8003422:	e045      	b.n	80034b0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	4413      	add	r3, r2
 800342c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003438:	4613      	mov	r3, r2
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	4413      	add	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d12e      	bne.n	80034aa <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800344c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800344e:	2b00      	cmp	r3, #0
 8003450:	da2b      	bge.n	80034aa <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	0c1a      	lsrs	r2, r3, #16
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800345c:	4053      	eors	r3, r2
 800345e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003462:	2b00      	cmp	r3, #0
 8003464:	d121      	bne.n	80034aa <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800346a:	4613      	mov	r3, r2
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4413      	add	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003478:	2201      	movs	r2, #1
 800347a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10a      	bne.n	80034aa <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	69fa      	ldr	r2, [r7, #28]
 800349e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034a6:	6053      	str	r3, [r2, #4]
            break;
 80034a8:	e008      	b.n	80034bc <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ac:	3301      	adds	r3, #1
 80034ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	791b      	ldrb	r3, [r3, #4]
 80034b4:	461a      	mov	r2, r3
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d3b3      	bcc.n	8003424 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695a      	ldr	r2, [r3, #20]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80034ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f003 f979 	bl	80067c8 <USB_ReadInterrupts>
 80034d6:	4603      	mov	r3, r0
 80034d8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80034dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034e0:	d10a      	bne.n	80034f8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f005 fde0 	bl	80090a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695a      	ldr	r2, [r3, #20]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80034f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f003 f963 	bl	80067c8 <USB_ReadInterrupts>
 8003502:	4603      	mov	r3, r0
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b04      	cmp	r3, #4
 800350a:	d115      	bne.n	8003538 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f005 fdd0 	bl	80090c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6859      	ldr	r1, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	430a      	orrs	r2, r1
 8003532:	605a      	str	r2, [r3, #4]
 8003534:	e000      	b.n	8003538 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003536:	bf00      	nop
    }
  }
}
 8003538:	3734      	adds	r7, #52	@ 0x34
 800353a:	46bd      	mov	sp, r7
 800353c:	bd90      	pop	{r4, r7, pc}

0800353e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b082      	sub	sp, #8
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	460b      	mov	r3, r1
 8003548:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <HAL_PCD_SetAddress+0x1a>
 8003554:	2302      	movs	r3, #2
 8003556:	e012      	b.n	800357e <HAL_PCD_SetAddress+0x40>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	78fa      	ldrb	r2, [r7, #3]
 8003564:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	78fa      	ldrb	r2, [r7, #3]
 800356c:	4611      	mov	r1, r2
 800356e:	4618      	mov	r0, r3
 8003570:	f003 f8c2 	bl	80066f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b084      	sub	sp, #16
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
 800358e:	4608      	mov	r0, r1
 8003590:	4611      	mov	r1, r2
 8003592:	461a      	mov	r2, r3
 8003594:	4603      	mov	r3, r0
 8003596:	70fb      	strb	r3, [r7, #3]
 8003598:	460b      	mov	r3, r1
 800359a:	803b      	strh	r3, [r7, #0]
 800359c:	4613      	mov	r3, r2
 800359e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	da0f      	bge.n	80035cc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	f003 020f 	and.w	r2, r3, #15
 80035b2:	4613      	mov	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	3310      	adds	r3, #16
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	4413      	add	r3, r2
 80035c0:	3304      	adds	r3, #4
 80035c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2201      	movs	r2, #1
 80035c8:	705a      	strb	r2, [r3, #1]
 80035ca:	e00f      	b.n	80035ec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035cc:	78fb      	ldrb	r3, [r7, #3]
 80035ce:	f003 020f 	and.w	r2, r3, #15
 80035d2:	4613      	mov	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	4413      	add	r3, r2
 80035e2:	3304      	adds	r3, #4
 80035e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80035ec:	78fb      	ldrb	r3, [r7, #3]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80035f8:	883b      	ldrh	r3, [r7, #0]
 80035fa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	78ba      	ldrb	r2, [r7, #2]
 8003606:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	785b      	ldrb	r3, [r3, #1]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d004      	beq.n	800361a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	461a      	mov	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800361a:	78bb      	ldrb	r3, [r7, #2]
 800361c:	2b02      	cmp	r3, #2
 800361e:	d102      	bne.n	8003626 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_PCD_EP_Open+0xae>
 8003630:	2302      	movs	r3, #2
 8003632:	e00e      	b.n	8003652 <HAL_PCD_EP_Open+0xcc>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68f9      	ldr	r1, [r7, #12]
 8003642:	4618      	mov	r0, r3
 8003644:	f002 fa42 	bl	8005acc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003650:	7afb      	ldrb	r3, [r7, #11]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b084      	sub	sp, #16
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
 8003662:	460b      	mov	r3, r1
 8003664:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003666:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800366a:	2b00      	cmp	r3, #0
 800366c:	da0f      	bge.n	800368e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800366e:	78fb      	ldrb	r3, [r7, #3]
 8003670:	f003 020f 	and.w	r2, r3, #15
 8003674:	4613      	mov	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	3310      	adds	r3, #16
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	4413      	add	r3, r2
 8003682:	3304      	adds	r3, #4
 8003684:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2201      	movs	r2, #1
 800368a:	705a      	strb	r2, [r3, #1]
 800368c:	e00f      	b.n	80036ae <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	f003 020f 	and.w	r2, r3, #15
 8003694:	4613      	mov	r3, r2
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	4413      	add	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	4413      	add	r3, r2
 80036a4:	3304      	adds	r3, #4
 80036a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80036ae:	78fb      	ldrb	r3, [r7, #3]
 80036b0:	f003 030f 	and.w	r3, r3, #15
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d101      	bne.n	80036c8 <HAL_PCD_EP_Close+0x6e>
 80036c4:	2302      	movs	r3, #2
 80036c6:	e00e      	b.n	80036e6 <HAL_PCD_EP_Close+0x8c>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68f9      	ldr	r1, [r7, #12]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f002 fa80 	bl	8005bdc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b086      	sub	sp, #24
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	60f8      	str	r0, [r7, #12]
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	603b      	str	r3, [r7, #0]
 80036fa:	460b      	mov	r3, r1
 80036fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036fe:	7afb      	ldrb	r3, [r7, #11]
 8003700:	f003 020f 	and.w	r2, r3, #15
 8003704:	4613      	mov	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	4413      	add	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4413      	add	r3, r2
 8003714:	3304      	adds	r3, #4
 8003716:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	2200      	movs	r2, #0
 8003728:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2200      	movs	r2, #0
 800372e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003730:	7afb      	ldrb	r3, [r7, #11]
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	b2da      	uxtb	r2, r3
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	799b      	ldrb	r3, [r3, #6]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d102      	bne.n	800374a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6818      	ldr	r0, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	799b      	ldrb	r3, [r3, #6]
 8003752:	461a      	mov	r2, r3
 8003754:	6979      	ldr	r1, [r7, #20]
 8003756:	f002 fb1d 	bl	8005d94 <USB_EPStartXfer>

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	460b      	mov	r3, r1
 800376e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	f003 020f 	and.w	r2, r3, #15
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003786:	681b      	ldr	r3, [r3, #0]
}
 8003788:	4618      	mov	r0, r3
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	607a      	str	r2, [r7, #4]
 800379e:	603b      	str	r3, [r7, #0]
 80037a0:	460b      	mov	r3, r1
 80037a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037a4:	7afb      	ldrb	r3, [r7, #11]
 80037a6:	f003 020f 	and.w	r2, r3, #15
 80037aa:	4613      	mov	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	3310      	adds	r3, #16
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	4413      	add	r3, r2
 80037b8:	3304      	adds	r3, #4
 80037ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2200      	movs	r2, #0
 80037cc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2201      	movs	r2, #1
 80037d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037d4:	7afb      	ldrb	r3, [r7, #11]
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	799b      	ldrb	r3, [r3, #6]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d102      	bne.n	80037ee <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6818      	ldr	r0, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	799b      	ldrb	r3, [r3, #6]
 80037f6:	461a      	mov	r2, r3
 80037f8:	6979      	ldr	r1, [r7, #20]
 80037fa:	f002 facb 	bl	8005d94 <USB_EPStartXfer>

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	460b      	mov	r3, r1
 8003812:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	7912      	ldrb	r2, [r2, #4]
 800381e:	4293      	cmp	r3, r2
 8003820:	d901      	bls.n	8003826 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e04f      	b.n	80038c6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003826:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800382a:	2b00      	cmp	r3, #0
 800382c:	da0f      	bge.n	800384e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800382e:	78fb      	ldrb	r3, [r7, #3]
 8003830:	f003 020f 	and.w	r2, r3, #15
 8003834:	4613      	mov	r3, r2
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	3310      	adds	r3, #16
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	4413      	add	r3, r2
 8003842:	3304      	adds	r3, #4
 8003844:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2201      	movs	r2, #1
 800384a:	705a      	strb	r2, [r3, #1]
 800384c:	e00d      	b.n	800386a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800384e:	78fa      	ldrb	r2, [r7, #3]
 8003850:	4613      	mov	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	4413      	add	r3, r2
 8003860:	3304      	adds	r3, #4
 8003862:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	b2da      	uxtb	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_PCD_EP_SetStall+0x82>
 8003886:	2302      	movs	r3, #2
 8003888:	e01d      	b.n	80038c6 <HAL_PCD_EP_SetStall+0xbe>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68f9      	ldr	r1, [r7, #12]
 8003898:	4618      	mov	r0, r3
 800389a:	f002 fe59 	bl	8006550 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d109      	bne.n	80038bc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6818      	ldr	r0, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	7999      	ldrb	r1, [r3, #6]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038b6:	461a      	mov	r2, r3
 80038b8:	f003 f84a 	bl	8006950 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b084      	sub	sp, #16
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	460b      	mov	r3, r1
 80038d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80038da:	78fb      	ldrb	r3, [r7, #3]
 80038dc:	f003 030f 	and.w	r3, r3, #15
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	7912      	ldrb	r2, [r2, #4]
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d901      	bls.n	80038ec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e042      	b.n	8003972 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	da0f      	bge.n	8003914 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	f003 020f 	and.w	r2, r3, #15
 80038fa:	4613      	mov	r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	4413      	add	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	3310      	adds	r3, #16
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	4413      	add	r3, r2
 8003908:	3304      	adds	r3, #4
 800390a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2201      	movs	r2, #1
 8003910:	705a      	strb	r2, [r3, #1]
 8003912:	e00f      	b.n	8003934 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003914:	78fb      	ldrb	r3, [r7, #3]
 8003916:	f003 020f 	and.w	r2, r3, #15
 800391a:	4613      	mov	r3, r2
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	4413      	add	r3, r2
 800392a:	3304      	adds	r3, #4
 800392c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	f003 030f 	and.w	r3, r3, #15
 8003940:	b2da      	uxtb	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_PCD_EP_ClrStall+0x86>
 8003950:	2302      	movs	r3, #2
 8003952:	e00e      	b.n	8003972 <HAL_PCD_EP_ClrStall+0xa4>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68f9      	ldr	r1, [r7, #12]
 8003962:	4618      	mov	r0, r3
 8003964:	f002 fe62 	bl	800662c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b084      	sub	sp, #16
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	460b      	mov	r3, r1
 8003984:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003986:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800398a:	2b00      	cmp	r3, #0
 800398c:	da0c      	bge.n	80039a8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800398e:	78fb      	ldrb	r3, [r7, #3]
 8003990:	f003 020f 	and.w	r2, r3, #15
 8003994:	4613      	mov	r3, r2
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	3310      	adds	r3, #16
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	4413      	add	r3, r2
 80039a2:	3304      	adds	r3, #4
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	e00c      	b.n	80039c2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039a8:	78fb      	ldrb	r3, [r7, #3]
 80039aa:	f003 020f 	and.w	r2, r3, #15
 80039ae:	4613      	mov	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4413      	add	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	4413      	add	r3, r2
 80039be:	3304      	adds	r3, #4
 80039c0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68f9      	ldr	r1, [r7, #12]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f002 fc81 	bl	80062d0 <USB_EPStopXfer>
 80039ce:	4603      	mov	r3, r0
 80039d0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80039d2:	7afb      	ldrb	r3, [r7, #11]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08a      	sub	sp, #40	@ 0x28
 80039e0:	af02      	add	r7, sp, #8
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	4613      	mov	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	4413      	add	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	3310      	adds	r3, #16
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	4413      	add	r3, r2
 8003a00:	3304      	adds	r3, #4
 8003a02:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	695a      	ldr	r2, [r3, #20]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d901      	bls.n	8003a14 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e06b      	b.n	8003aec <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	691a      	ldr	r2, [r3, #16]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	69fa      	ldr	r2, [r7, #28]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d902      	bls.n	8003a30 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	3303      	adds	r3, #3
 8003a34:	089b      	lsrs	r3, r3, #2
 8003a36:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a38:	e02a      	b.n	8003a90 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	691a      	ldr	r2, [r3, #16]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	69fa      	ldr	r2, [r7, #28]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d902      	bls.n	8003a56 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	3303      	adds	r3, #3
 8003a5a:	089b      	lsrs	r3, r3, #2
 8003a5c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	68d9      	ldr	r1, [r3, #12]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	4603      	mov	r3, r0
 8003a72:	6978      	ldr	r0, [r7, #20]
 8003a74:	f002 fcd6 	bl	8006424 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	441a      	add	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	695a      	ldr	r2, [r3, #20]
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	441a      	add	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d809      	bhi.n	8003aba <PCD_WriteEmptyTxFifo+0xde>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	695a      	ldr	r2, [r3, #20]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d203      	bcs.n	8003aba <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1bf      	bne.n	8003a3a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	691a      	ldr	r2, [r3, #16]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d811      	bhi.n	8003aea <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	f003 030f 	and.w	r3, r3, #15
 8003acc:	2201      	movs	r2, #1
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ada:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	6939      	ldr	r1, [r7, #16]
 8003ae2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3720      	adds	r7, #32
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	333c      	adds	r3, #60	@ 0x3c
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	799b      	ldrb	r3, [r3, #6]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d17b      	bne.n	8003c22 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d015      	beq.n	8003b60 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	4a61      	ldr	r2, [pc, #388]	@ (8003cbc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	f240 80b9 	bls.w	8003cb0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 80b3 	beq.w	8003cb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	015a      	lsls	r2, r3, #5
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	4413      	add	r3, r2
 8003b52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b56:	461a      	mov	r2, r3
 8003b58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b5c:	6093      	str	r3, [r2, #8]
 8003b5e:	e0a7      	b.n	8003cb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d009      	beq.n	8003b7e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b76:	461a      	mov	r2, r3
 8003b78:	2320      	movs	r3, #32
 8003b7a:	6093      	str	r3, [r2, #8]
 8003b7c:	e098      	b.n	8003cb0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f040 8093 	bne.w	8003cb0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	4a4b      	ldr	r2, [pc, #300]	@ (8003cbc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d90f      	bls.n	8003bb2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00a      	beq.n	8003bb2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ba8:	461a      	mov	r2, r3
 8003baa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bae:	6093      	str	r3, [r2, #8]
 8003bb0:	e07e      	b.n	8003cb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	4413      	add	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a1a      	ldr	r2, [r3, #32]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	0159      	lsls	r1, r3, #5
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	440b      	add	r3, r1
 8003bd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bde:	1ad2      	subs	r2, r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d114      	bne.n	8003c14 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d109      	bne.n	8003c06 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6818      	ldr	r0, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	2101      	movs	r1, #1
 8003c00:	f002 fea6 	bl	8006950 <USB_EP0_OutStart>
 8003c04:	e006      	b.n	8003c14 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	441a      	add	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	4619      	mov	r1, r3
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f005 f98a 	bl	8008f34 <HAL_PCD_DataOutStageCallback>
 8003c20:	e046      	b.n	8003cb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	4a26      	ldr	r2, [pc, #152]	@ (8003cc0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d124      	bne.n	8003c74 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00a      	beq.n	8003c4a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c40:	461a      	mov	r2, r3
 8003c42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c46:	6093      	str	r3, [r2, #8]
 8003c48:	e032      	b.n	8003cb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f003 0320 	and.w	r3, r3, #32
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d008      	beq.n	8003c66 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c60:	461a      	mov	r2, r3
 8003c62:	2320      	movs	r3, #32
 8003c64:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f005 f961 	bl	8008f34 <HAL_PCD_DataOutStageCallback>
 8003c72:	e01d      	b.n	8003cb0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d114      	bne.n	8003ca4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	4413      	add	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	440b      	add	r3, r1
 8003c88:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d108      	bne.n	8003ca4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	f002 fe56 	bl	8006950 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	4619      	mov	r1, r3
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f005 f942 	bl	8008f34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3720      	adds	r7, #32
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	4f54300a 	.word	0x4f54300a
 8003cc0:	4f54310a 	.word	0x4f54310a

08003cc4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	333c      	adds	r3, #60	@ 0x3c
 8003cdc:	3304      	adds	r3, #4
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	4a15      	ldr	r2, [pc, #84]	@ (8003d4c <PCD_EP_OutSetupPacket_int+0x88>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d90e      	bls.n	8003d18 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d009      	beq.n	8003d18 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d10:	461a      	mov	r2, r3
 8003d12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d16:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f005 f8f9 	bl	8008f10 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	4a0a      	ldr	r2, [pc, #40]	@ (8003d4c <PCD_EP_OutSetupPacket_int+0x88>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d90c      	bls.n	8003d40 <PCD_EP_OutSetupPacket_int+0x7c>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	799b      	ldrb	r3, [r3, #6]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d108      	bne.n	8003d40 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d38:	461a      	mov	r2, r3
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	f002 fe08 	bl	8006950 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3718      	adds	r7, #24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	4f54300a 	.word	0x4f54300a

08003d50 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	70fb      	strb	r3, [r7, #3]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d66:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d107      	bne.n	8003d7e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003d6e:	883b      	ldrh	r3, [r7, #0]
 8003d70:	0419      	lsls	r1, r3, #16
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d7c:	e028      	b.n	8003dd0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d84:	0c1b      	lsrs	r3, r3, #16
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	4413      	add	r3, r2
 8003d8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	73fb      	strb	r3, [r7, #15]
 8003d90:	e00d      	b.n	8003dae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	7bfb      	ldrb	r3, [r7, #15]
 8003d98:	3340      	adds	r3, #64	@ 0x40
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	0c1b      	lsrs	r3, r3, #16
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	4413      	add	r3, r2
 8003da6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
 8003daa:	3301      	adds	r3, #1
 8003dac:	73fb      	strb	r3, [r7, #15]
 8003dae:	7bfa      	ldrb	r2, [r7, #15]
 8003db0:	78fb      	ldrb	r3, [r7, #3]
 8003db2:	3b01      	subs	r3, #1
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d3ec      	bcc.n	8003d92 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003db8:	883b      	ldrh	r3, [r7, #0]
 8003dba:	0418      	lsls	r0, r3, #16
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6819      	ldr	r1, [r3, #0]
 8003dc0:	78fb      	ldrb	r3, [r7, #3]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	68ba      	ldr	r2, [r7, #8]
 8003dc6:	4302      	orrs	r2, r0
 8003dc8:	3340      	adds	r3, #64	@ 0x40
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	440b      	add	r3, r1
 8003dce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	460b      	mov	r3, r1
 8003de8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	887a      	ldrh	r2, [r7, #2]
 8003df0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e267      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d075      	beq.n	8003f22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e36:	4b88      	ldr	r3, [pc, #544]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 030c 	and.w	r3, r3, #12
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d00c      	beq.n	8003e5c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e42:	4b85      	ldr	r3, [pc, #532]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d112      	bne.n	8003e74 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e4e:	4b82      	ldr	r3, [pc, #520]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e5a:	d10b      	bne.n	8003e74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e5c:	4b7e      	ldr	r3, [pc, #504]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d05b      	beq.n	8003f20 <HAL_RCC_OscConfig+0x108>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d157      	bne.n	8003f20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e242      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e7c:	d106      	bne.n	8003e8c <HAL_RCC_OscConfig+0x74>
 8003e7e:	4b76      	ldr	r3, [pc, #472]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a75      	ldr	r2, [pc, #468]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	e01d      	b.n	8003ec8 <HAL_RCC_OscConfig+0xb0>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e94:	d10c      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x98>
 8003e96:	4b70      	ldr	r3, [pc, #448]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a6f      	ldr	r2, [pc, #444]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003e9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	4b6d      	ldr	r3, [pc, #436]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a6c      	ldr	r2, [pc, #432]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	e00b      	b.n	8003ec8 <HAL_RCC_OscConfig+0xb0>
 8003eb0:	4b69      	ldr	r3, [pc, #420]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a68      	ldr	r2, [pc, #416]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003eb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	4b66      	ldr	r3, [pc, #408]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a65      	ldr	r2, [pc, #404]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003ec2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ec6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d013      	beq.n	8003ef8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed0:	f7fd f9fa 	bl	80012c8 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ed8:	f7fd f9f6 	bl	80012c8 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b64      	cmp	r3, #100	@ 0x64
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e207      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eea:	4b5b      	ldr	r3, [pc, #364]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0f0      	beq.n	8003ed8 <HAL_RCC_OscConfig+0xc0>
 8003ef6:	e014      	b.n	8003f22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef8:	f7fd f9e6 	bl	80012c8 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f00:	f7fd f9e2 	bl	80012c8 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b64      	cmp	r3, #100	@ 0x64
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e1f3      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f12:	4b51      	ldr	r3, [pc, #324]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f0      	bne.n	8003f00 <HAL_RCC_OscConfig+0xe8>
 8003f1e:	e000      	b.n	8003f22 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d063      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f2e:	4b4a      	ldr	r3, [pc, #296]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 030c 	and.w	r3, r3, #12
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00b      	beq.n	8003f52 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f3a:	4b47      	ldr	r3, [pc, #284]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d11c      	bne.n	8003f80 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f46:	4b44      	ldr	r3, [pc, #272]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d116      	bne.n	8003f80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f52:	4b41      	ldr	r3, [pc, #260]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d005      	beq.n	8003f6a <HAL_RCC_OscConfig+0x152>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d001      	beq.n	8003f6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e1c7      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f6a:	4b3b      	ldr	r3, [pc, #236]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	4937      	ldr	r1, [pc, #220]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f7e:	e03a      	b.n	8003ff6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d020      	beq.n	8003fca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f88:	4b34      	ldr	r3, [pc, #208]	@ (800405c <HAL_RCC_OscConfig+0x244>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8e:	f7fd f99b 	bl	80012c8 <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f96:	f7fd f997 	bl	80012c8 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e1a8      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa8:	4b2b      	ldr	r3, [pc, #172]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0f0      	beq.n	8003f96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb4:	4b28      	ldr	r3, [pc, #160]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	4925      	ldr	r1, [pc, #148]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	600b      	str	r3, [r1, #0]
 8003fc8:	e015      	b.n	8003ff6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fca:	4b24      	ldr	r3, [pc, #144]	@ (800405c <HAL_RCC_OscConfig+0x244>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd0:	f7fd f97a 	bl	80012c8 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fd8:	f7fd f976 	bl	80012c8 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e187      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fea:	4b1b      	ldr	r3, [pc, #108]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d036      	beq.n	8004070 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d016      	beq.n	8004038 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800400a:	4b15      	ldr	r3, [pc, #84]	@ (8004060 <HAL_RCC_OscConfig+0x248>)
 800400c:	2201      	movs	r2, #1
 800400e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004010:	f7fd f95a 	bl	80012c8 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004018:	f7fd f956 	bl	80012c8 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e167      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800402a:	4b0b      	ldr	r3, [pc, #44]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 800402c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f0      	beq.n	8004018 <HAL_RCC_OscConfig+0x200>
 8004036:	e01b      	b.n	8004070 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004038:	4b09      	ldr	r3, [pc, #36]	@ (8004060 <HAL_RCC_OscConfig+0x248>)
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800403e:	f7fd f943 	bl	80012c8 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004044:	e00e      	b.n	8004064 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004046:	f7fd f93f 	bl	80012c8 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d907      	bls.n	8004064 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e150      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
 8004058:	40023800 	.word	0x40023800
 800405c:	42470000 	.word	0x42470000
 8004060:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004064:	4b88      	ldr	r3, [pc, #544]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 8004066:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1ea      	bne.n	8004046 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 8097 	beq.w	80041ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800407e:	2300      	movs	r3, #0
 8004080:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004082:	4b81      	ldr	r3, [pc, #516]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 8004084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004086:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10f      	bne.n	80040ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800408e:	2300      	movs	r3, #0
 8004090:	60bb      	str	r3, [r7, #8]
 8004092:	4b7d      	ldr	r3, [pc, #500]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 8004094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004096:	4a7c      	ldr	r2, [pc, #496]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 8004098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800409c:	6413      	str	r3, [r2, #64]	@ 0x40
 800409e:	4b7a      	ldr	r3, [pc, #488]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 80040a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040a6:	60bb      	str	r3, [r7, #8]
 80040a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040aa:	2301      	movs	r3, #1
 80040ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ae:	4b77      	ldr	r3, [pc, #476]	@ (800428c <HAL_RCC_OscConfig+0x474>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d118      	bne.n	80040ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ba:	4b74      	ldr	r3, [pc, #464]	@ (800428c <HAL_RCC_OscConfig+0x474>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a73      	ldr	r2, [pc, #460]	@ (800428c <HAL_RCC_OscConfig+0x474>)
 80040c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040c6:	f7fd f8ff 	bl	80012c8 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ce:	f7fd f8fb 	bl	80012c8 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e10c      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e0:	4b6a      	ldr	r3, [pc, #424]	@ (800428c <HAL_RCC_OscConfig+0x474>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0f0      	beq.n	80040ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d106      	bne.n	8004102 <HAL_RCC_OscConfig+0x2ea>
 80040f4:	4b64      	ldr	r3, [pc, #400]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 80040f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f8:	4a63      	ldr	r2, [pc, #396]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004100:	e01c      	b.n	800413c <HAL_RCC_OscConfig+0x324>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	2b05      	cmp	r3, #5
 8004108:	d10c      	bne.n	8004124 <HAL_RCC_OscConfig+0x30c>
 800410a:	4b5f      	ldr	r3, [pc, #380]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 800410c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800410e:	4a5e      	ldr	r2, [pc, #376]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 8004110:	f043 0304 	orr.w	r3, r3, #4
 8004114:	6713      	str	r3, [r2, #112]	@ 0x70
 8004116:	4b5c      	ldr	r3, [pc, #368]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 8004118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800411a:	4a5b      	ldr	r2, [pc, #364]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	6713      	str	r3, [r2, #112]	@ 0x70
 8004122:	e00b      	b.n	800413c <HAL_RCC_OscConfig+0x324>
 8004124:	4b58      	ldr	r3, [pc, #352]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 8004126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004128:	4a57      	ldr	r2, [pc, #348]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 800412a:	f023 0301 	bic.w	r3, r3, #1
 800412e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004130:	4b55      	ldr	r3, [pc, #340]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 8004132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004134:	4a54      	ldr	r2, [pc, #336]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 8004136:	f023 0304 	bic.w	r3, r3, #4
 800413a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d015      	beq.n	8004170 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004144:	f7fd f8c0 	bl	80012c8 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800414a:	e00a      	b.n	8004162 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800414c:	f7fd f8bc 	bl	80012c8 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800415a:	4293      	cmp	r3, r2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e0cb      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004162:	4b49      	ldr	r3, [pc, #292]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 8004164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0ee      	beq.n	800414c <HAL_RCC_OscConfig+0x334>
 800416e:	e014      	b.n	800419a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004170:	f7fd f8aa 	bl	80012c8 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004176:	e00a      	b.n	800418e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004178:	f7fd f8a6 	bl	80012c8 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004186:	4293      	cmp	r3, r2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e0b5      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800418e:	4b3e      	ldr	r3, [pc, #248]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 8004190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1ee      	bne.n	8004178 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800419a:	7dfb      	ldrb	r3, [r7, #23]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d105      	bne.n	80041ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041a0:	4b39      	ldr	r3, [pc, #228]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 80041a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a4:	4a38      	ldr	r2, [pc, #224]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 80041a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 80a1 	beq.w	80042f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041b6:	4b34      	ldr	r3, [pc, #208]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 030c 	and.w	r3, r3, #12
 80041be:	2b08      	cmp	r3, #8
 80041c0:	d05c      	beq.n	800427c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d141      	bne.n	800424e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ca:	4b31      	ldr	r3, [pc, #196]	@ (8004290 <HAL_RCC_OscConfig+0x478>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d0:	f7fd f87a 	bl	80012c8 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d8:	f7fd f876 	bl	80012c8 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e087      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ea:	4b27      	ldr	r3, [pc, #156]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f0      	bne.n	80041d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69da      	ldr	r2, [r3, #28]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004204:	019b      	lsls	r3, r3, #6
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420c:	085b      	lsrs	r3, r3, #1
 800420e:	3b01      	subs	r3, #1
 8004210:	041b      	lsls	r3, r3, #16
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004218:	061b      	lsls	r3, r3, #24
 800421a:	491b      	ldr	r1, [pc, #108]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 800421c:	4313      	orrs	r3, r2
 800421e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004220:	4b1b      	ldr	r3, [pc, #108]	@ (8004290 <HAL_RCC_OscConfig+0x478>)
 8004222:	2201      	movs	r2, #1
 8004224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004226:	f7fd f84f 	bl	80012c8 <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800422e:	f7fd f84b 	bl	80012c8 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e05c      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004240:	4b11      	ldr	r3, [pc, #68]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0f0      	beq.n	800422e <HAL_RCC_OscConfig+0x416>
 800424c:	e054      	b.n	80042f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800424e:	4b10      	ldr	r3, [pc, #64]	@ (8004290 <HAL_RCC_OscConfig+0x478>)
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004254:	f7fd f838 	bl	80012c8 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800425c:	f7fd f834 	bl	80012c8 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e045      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800426e:	4b06      	ldr	r3, [pc, #24]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0x444>
 800427a:	e03d      	b.n	80042f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d107      	bne.n	8004294 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e038      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
 8004288:	40023800 	.word	0x40023800
 800428c:	40007000 	.word	0x40007000
 8004290:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004294:	4b1b      	ldr	r3, [pc, #108]	@ (8004304 <HAL_RCC_OscConfig+0x4ec>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d028      	beq.n	80042f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d121      	bne.n	80042f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d11a      	bne.n	80042f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042c4:	4013      	ands	r3, r2
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d111      	bne.n	80042f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042da:	085b      	lsrs	r3, r3, #1
 80042dc:	3b01      	subs	r3, #1
 80042de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d107      	bne.n	80042f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d001      	beq.n	80042f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40023800 	.word	0x40023800

08004308 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e0cc      	b.n	80044b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800431c:	4b68      	ldr	r3, [pc, #416]	@ (80044c0 <HAL_RCC_ClockConfig+0x1b8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	429a      	cmp	r2, r3
 8004328:	d90c      	bls.n	8004344 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800432a:	4b65      	ldr	r3, [pc, #404]	@ (80044c0 <HAL_RCC_ClockConfig+0x1b8>)
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004332:	4b63      	ldr	r3, [pc, #396]	@ (80044c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	429a      	cmp	r2, r3
 800433e:	d001      	beq.n	8004344 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e0b8      	b.n	80044b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d020      	beq.n	8004392 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800435c:	4b59      	ldr	r3, [pc, #356]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	4a58      	ldr	r2, [pc, #352]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004362:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004366:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0308 	and.w	r3, r3, #8
 8004370:	2b00      	cmp	r3, #0
 8004372:	d005      	beq.n	8004380 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004374:	4b53      	ldr	r3, [pc, #332]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	4a52      	ldr	r2, [pc, #328]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800437e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004380:	4b50      	ldr	r3, [pc, #320]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	494d      	ldr	r1, [pc, #308]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 800438e:	4313      	orrs	r3, r2
 8004390:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	d044      	beq.n	8004428 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d107      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043a6:	4b47      	ldr	r3, [pc, #284]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d119      	bne.n	80043e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e07f      	b.n	80044b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d003      	beq.n	80043c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043c2:	2b03      	cmp	r3, #3
 80043c4:	d107      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043c6:	4b3f      	ldr	r3, [pc, #252]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d109      	bne.n	80043e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e06f      	b.n	80044b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d6:	4b3b      	ldr	r3, [pc, #236]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e067      	b.n	80044b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043e6:	4b37      	ldr	r3, [pc, #220]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f023 0203 	bic.w	r2, r3, #3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	4934      	ldr	r1, [pc, #208]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043f8:	f7fc ff66 	bl	80012c8 <HAL_GetTick>
 80043fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fe:	e00a      	b.n	8004416 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004400:	f7fc ff62 	bl	80012c8 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800440e:	4293      	cmp	r3, r2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e04f      	b.n	80044b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004416:	4b2b      	ldr	r3, [pc, #172]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 020c 	and.w	r2, r3, #12
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	429a      	cmp	r2, r3
 8004426:	d1eb      	bne.n	8004400 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004428:	4b25      	ldr	r3, [pc, #148]	@ (80044c0 <HAL_RCC_ClockConfig+0x1b8>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d20c      	bcs.n	8004450 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004436:	4b22      	ldr	r3, [pc, #136]	@ (80044c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800443e:	4b20      	ldr	r3, [pc, #128]	@ (80044c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	429a      	cmp	r2, r3
 800444a:	d001      	beq.n	8004450 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e032      	b.n	80044b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b00      	cmp	r3, #0
 800445a:	d008      	beq.n	800446e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800445c:	4b19      	ldr	r3, [pc, #100]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	4916      	ldr	r1, [pc, #88]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 800446a:	4313      	orrs	r3, r2
 800446c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0308 	and.w	r3, r3, #8
 8004476:	2b00      	cmp	r3, #0
 8004478:	d009      	beq.n	800448e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800447a:	4b12      	ldr	r3, [pc, #72]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	490e      	ldr	r1, [pc, #56]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	4313      	orrs	r3, r2
 800448c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800448e:	f000 f821 	bl	80044d4 <HAL_RCC_GetSysClockFreq>
 8004492:	4602      	mov	r2, r0
 8004494:	4b0b      	ldr	r3, [pc, #44]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	091b      	lsrs	r3, r3, #4
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	490a      	ldr	r1, [pc, #40]	@ (80044c8 <HAL_RCC_ClockConfig+0x1c0>)
 80044a0:	5ccb      	ldrb	r3, [r1, r3]
 80044a2:	fa22 f303 	lsr.w	r3, r2, r3
 80044a6:	4a09      	ldr	r2, [pc, #36]	@ (80044cc <HAL_RCC_ClockConfig+0x1c4>)
 80044a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80044aa:	4b09      	ldr	r3, [pc, #36]	@ (80044d0 <HAL_RCC_ClockConfig+0x1c8>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fc fec6 	bl	8001240 <HAL_InitTick>

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	40023c00 	.word	0x40023c00
 80044c4:	40023800 	.word	0x40023800
 80044c8:	08009534 	.word	0x08009534
 80044cc:	20000000 	.word	0x20000000
 80044d0:	20000004 	.word	0x20000004

080044d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044d8:	b090      	sub	sp, #64	@ 0x40
 80044da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044ec:	4b59      	ldr	r3, [pc, #356]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x180>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 030c 	and.w	r3, r3, #12
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d00d      	beq.n	8004514 <HAL_RCC_GetSysClockFreq+0x40>
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	f200 80a1 	bhi.w	8004640 <HAL_RCC_GetSysClockFreq+0x16c>
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d002      	beq.n	8004508 <HAL_RCC_GetSysClockFreq+0x34>
 8004502:	2b04      	cmp	r3, #4
 8004504:	d003      	beq.n	800450e <HAL_RCC_GetSysClockFreq+0x3a>
 8004506:	e09b      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004508:	4b53      	ldr	r3, [pc, #332]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x184>)
 800450a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800450c:	e09b      	b.n	8004646 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800450e:	4b53      	ldr	r3, [pc, #332]	@ (800465c <HAL_RCC_GetSysClockFreq+0x188>)
 8004510:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004512:	e098      	b.n	8004646 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004514:	4b4f      	ldr	r3, [pc, #316]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x180>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800451c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800451e:	4b4d      	ldr	r3, [pc, #308]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x180>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d028      	beq.n	800457c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800452a:	4b4a      	ldr	r3, [pc, #296]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x180>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	099b      	lsrs	r3, r3, #6
 8004530:	2200      	movs	r2, #0
 8004532:	623b      	str	r3, [r7, #32]
 8004534:	627a      	str	r2, [r7, #36]	@ 0x24
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800453c:	2100      	movs	r1, #0
 800453e:	4b47      	ldr	r3, [pc, #284]	@ (800465c <HAL_RCC_GetSysClockFreq+0x188>)
 8004540:	fb03 f201 	mul.w	r2, r3, r1
 8004544:	2300      	movs	r3, #0
 8004546:	fb00 f303 	mul.w	r3, r0, r3
 800454a:	4413      	add	r3, r2
 800454c:	4a43      	ldr	r2, [pc, #268]	@ (800465c <HAL_RCC_GetSysClockFreq+0x188>)
 800454e:	fba0 1202 	umull	r1, r2, r0, r2
 8004552:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004554:	460a      	mov	r2, r1
 8004556:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004558:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800455a:	4413      	add	r3, r2
 800455c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800455e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004560:	2200      	movs	r2, #0
 8004562:	61bb      	str	r3, [r7, #24]
 8004564:	61fa      	str	r2, [r7, #28]
 8004566:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800456a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800456e:	f7fb fe33 	bl	80001d8 <__aeabi_uldivmod>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4613      	mov	r3, r2
 8004578:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800457a:	e053      	b.n	8004624 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800457c:	4b35      	ldr	r3, [pc, #212]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x180>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	099b      	lsrs	r3, r3, #6
 8004582:	2200      	movs	r2, #0
 8004584:	613b      	str	r3, [r7, #16]
 8004586:	617a      	str	r2, [r7, #20]
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800458e:	f04f 0b00 	mov.w	fp, #0
 8004592:	4652      	mov	r2, sl
 8004594:	465b      	mov	r3, fp
 8004596:	f04f 0000 	mov.w	r0, #0
 800459a:	f04f 0100 	mov.w	r1, #0
 800459e:	0159      	lsls	r1, r3, #5
 80045a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045a4:	0150      	lsls	r0, r2, #5
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	ebb2 080a 	subs.w	r8, r2, sl
 80045ae:	eb63 090b 	sbc.w	r9, r3, fp
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	f04f 0300 	mov.w	r3, #0
 80045ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80045be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80045c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80045c6:	ebb2 0408 	subs.w	r4, r2, r8
 80045ca:	eb63 0509 	sbc.w	r5, r3, r9
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	f04f 0300 	mov.w	r3, #0
 80045d6:	00eb      	lsls	r3, r5, #3
 80045d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045dc:	00e2      	lsls	r2, r4, #3
 80045de:	4614      	mov	r4, r2
 80045e0:	461d      	mov	r5, r3
 80045e2:	eb14 030a 	adds.w	r3, r4, sl
 80045e6:	603b      	str	r3, [r7, #0]
 80045e8:	eb45 030b 	adc.w	r3, r5, fp
 80045ec:	607b      	str	r3, [r7, #4]
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045fa:	4629      	mov	r1, r5
 80045fc:	028b      	lsls	r3, r1, #10
 80045fe:	4621      	mov	r1, r4
 8004600:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004604:	4621      	mov	r1, r4
 8004606:	028a      	lsls	r2, r1, #10
 8004608:	4610      	mov	r0, r2
 800460a:	4619      	mov	r1, r3
 800460c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800460e:	2200      	movs	r2, #0
 8004610:	60bb      	str	r3, [r7, #8]
 8004612:	60fa      	str	r2, [r7, #12]
 8004614:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004618:	f7fb fdde 	bl	80001d8 <__aeabi_uldivmod>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4613      	mov	r3, r2
 8004622:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004624:	4b0b      	ldr	r3, [pc, #44]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x180>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	0c1b      	lsrs	r3, r3, #16
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	3301      	adds	r3, #1
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004634:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004638:	fbb2 f3f3 	udiv	r3, r2, r3
 800463c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800463e:	e002      	b.n	8004646 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004640:	4b05      	ldr	r3, [pc, #20]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x184>)
 8004642:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004644:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004648:	4618      	mov	r0, r3
 800464a:	3740      	adds	r7, #64	@ 0x40
 800464c:	46bd      	mov	sp, r7
 800464e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004652:	bf00      	nop
 8004654:	40023800 	.word	0x40023800
 8004658:	00f42400 	.word	0x00f42400
 800465c:	017d7840 	.word	0x017d7840

08004660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004664:	4b03      	ldr	r3, [pc, #12]	@ (8004674 <HAL_RCC_GetHCLKFreq+0x14>)
 8004666:	681b      	ldr	r3, [r3, #0]
}
 8004668:	4618      	mov	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	20000000 	.word	0x20000000

08004678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e041      	b.n	800470e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d106      	bne.n	80046a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7fc fbee 	bl	8000e80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	3304      	adds	r3, #4
 80046b4:	4619      	mov	r1, r3
 80046b6:	4610      	mov	r0, r2
 80046b8:	f000 fa8a 	bl	8004bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e041      	b.n	80047ac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b00      	cmp	r3, #0
 8004732:	d106      	bne.n	8004742 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f7fc fb7d 	bl	8000e3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2202      	movs	r2, #2
 8004746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3304      	adds	r3, #4
 8004752:	4619      	mov	r1, r3
 8004754:	4610      	mov	r0, r2
 8004756:	f000 fa3b 	bl	8004bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d109      	bne.n	80047d8 <HAL_TIM_PWM_Start+0x24>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	bf14      	ite	ne
 80047d0:	2301      	movne	r3, #1
 80047d2:	2300      	moveq	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	e022      	b.n	800481e <HAL_TIM_PWM_Start+0x6a>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d109      	bne.n	80047f2 <HAL_TIM_PWM_Start+0x3e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	bf14      	ite	ne
 80047ea:	2301      	movne	r3, #1
 80047ec:	2300      	moveq	r3, #0
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	e015      	b.n	800481e <HAL_TIM_PWM_Start+0x6a>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d109      	bne.n	800480c <HAL_TIM_PWM_Start+0x58>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b01      	cmp	r3, #1
 8004802:	bf14      	ite	ne
 8004804:	2301      	movne	r3, #1
 8004806:	2300      	moveq	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	e008      	b.n	800481e <HAL_TIM_PWM_Start+0x6a>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b01      	cmp	r3, #1
 8004816:	bf14      	ite	ne
 8004818:	2301      	movne	r3, #1
 800481a:	2300      	moveq	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e068      	b.n	80048f8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d104      	bne.n	8004836 <HAL_TIM_PWM_Start+0x82>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004834:	e013      	b.n	800485e <HAL_TIM_PWM_Start+0xaa>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b04      	cmp	r3, #4
 800483a:	d104      	bne.n	8004846 <HAL_TIM_PWM_Start+0x92>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004844:	e00b      	b.n	800485e <HAL_TIM_PWM_Start+0xaa>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b08      	cmp	r3, #8
 800484a:	d104      	bne.n	8004856 <HAL_TIM_PWM_Start+0xa2>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004854:	e003      	b.n	800485e <HAL_TIM_PWM_Start+0xaa>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2202      	movs	r2, #2
 800485a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2201      	movs	r2, #1
 8004864:	6839      	ldr	r1, [r7, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f000 fcd4 	bl	8005214 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a23      	ldr	r2, [pc, #140]	@ (8004900 <HAL_TIM_PWM_Start+0x14c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d107      	bne.n	8004886 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004884:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a1d      	ldr	r2, [pc, #116]	@ (8004900 <HAL_TIM_PWM_Start+0x14c>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d018      	beq.n	80048c2 <HAL_TIM_PWM_Start+0x10e>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004898:	d013      	beq.n	80048c2 <HAL_TIM_PWM_Start+0x10e>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a19      	ldr	r2, [pc, #100]	@ (8004904 <HAL_TIM_PWM_Start+0x150>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d00e      	beq.n	80048c2 <HAL_TIM_PWM_Start+0x10e>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a17      	ldr	r2, [pc, #92]	@ (8004908 <HAL_TIM_PWM_Start+0x154>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d009      	beq.n	80048c2 <HAL_TIM_PWM_Start+0x10e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a16      	ldr	r2, [pc, #88]	@ (800490c <HAL_TIM_PWM_Start+0x158>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d004      	beq.n	80048c2 <HAL_TIM_PWM_Start+0x10e>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a14      	ldr	r2, [pc, #80]	@ (8004910 <HAL_TIM_PWM_Start+0x15c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d111      	bne.n	80048e6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2b06      	cmp	r3, #6
 80048d2:	d010      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e4:	e007      	b.n	80048f6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f042 0201 	orr.w	r2, r2, #1
 80048f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40010000 	.word	0x40010000
 8004904:	40000400 	.word	0x40000400
 8004908:	40000800 	.word	0x40000800
 800490c:	40000c00 	.word	0x40000c00
 8004910:	40014000 	.word	0x40014000

08004914 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e041      	b.n	80049ac <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	d106      	bne.n	8004942 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f839 	bl	80049b4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2202      	movs	r2, #2
 8004946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3304      	adds	r3, #4
 8004952:	4619      	mov	r1, r3
 8004954:	4610      	mov	r0, r2
 8004956:	f000 f93b 	bl	8004bd0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0208 	bic.w	r2, r2, #8
 8004968:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6819      	ldr	r1, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d101      	bne.n	80049e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049e2:	2302      	movs	r3, #2
 80049e4:	e0ae      	b.n	8004b44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b0c      	cmp	r3, #12
 80049f2:	f200 809f 	bhi.w	8004b34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80049f6:	a201      	add	r2, pc, #4	@ (adr r2, 80049fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fc:	08004a31 	.word	0x08004a31
 8004a00:	08004b35 	.word	0x08004b35
 8004a04:	08004b35 	.word	0x08004b35
 8004a08:	08004b35 	.word	0x08004b35
 8004a0c:	08004a71 	.word	0x08004a71
 8004a10:	08004b35 	.word	0x08004b35
 8004a14:	08004b35 	.word	0x08004b35
 8004a18:	08004b35 	.word	0x08004b35
 8004a1c:	08004ab3 	.word	0x08004ab3
 8004a20:	08004b35 	.word	0x08004b35
 8004a24:	08004b35 	.word	0x08004b35
 8004a28:	08004b35 	.word	0x08004b35
 8004a2c:	08004af3 	.word	0x08004af3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68b9      	ldr	r1, [r7, #8]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 f950 	bl	8004cdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699a      	ldr	r2, [r3, #24]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0208 	orr.w	r2, r2, #8
 8004a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699a      	ldr	r2, [r3, #24]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0204 	bic.w	r2, r2, #4
 8004a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6999      	ldr	r1, [r3, #24]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	691a      	ldr	r2, [r3, #16]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	619a      	str	r2, [r3, #24]
      break;
 8004a6e:	e064      	b.n	8004b3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68b9      	ldr	r1, [r7, #8]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 f996 	bl	8004da8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699a      	ldr	r2, [r3, #24]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699a      	ldr	r2, [r3, #24]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6999      	ldr	r1, [r3, #24]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	021a      	lsls	r2, r3, #8
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	619a      	str	r2, [r3, #24]
      break;
 8004ab0:	e043      	b.n	8004b3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68b9      	ldr	r1, [r7, #8]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 f9e1 	bl	8004e80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69da      	ldr	r2, [r3, #28]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f042 0208 	orr.w	r2, r2, #8
 8004acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69da      	ldr	r2, [r3, #28]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0204 	bic.w	r2, r2, #4
 8004adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69d9      	ldr	r1, [r3, #28]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	691a      	ldr	r2, [r3, #16]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	61da      	str	r2, [r3, #28]
      break;
 8004af0:	e023      	b.n	8004b3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68b9      	ldr	r1, [r7, #8]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 fa2b 	bl	8004f54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	69da      	ldr	r2, [r3, #28]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	69da      	ldr	r2, [r3, #28]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	69d9      	ldr	r1, [r3, #28]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	021a      	lsls	r2, r3, #8
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	61da      	str	r2, [r3, #28]
      break;
 8004b32:	e002      	b.n	8004b3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	75fb      	strb	r3, [r7, #23]
      break;
 8004b38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d101      	bne.n	8004b64 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004b60:	2302      	movs	r3, #2
 8004b62:	e031      	b.n	8004bc8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004b74:	6839      	ldr	r1, [r7, #0]
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fa3c 	bl	8004ff4 <TIM_SlaveTimer_SetConfig>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d009      	beq.n	8004b96 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e018      	b.n	8004bc8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ba4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68da      	ldr	r2, [r3, #12]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004bb4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a37      	ldr	r2, [pc, #220]	@ (8004cc0 <TIM_Base_SetConfig+0xf0>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d00f      	beq.n	8004c08 <TIM_Base_SetConfig+0x38>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bee:	d00b      	beq.n	8004c08 <TIM_Base_SetConfig+0x38>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a34      	ldr	r2, [pc, #208]	@ (8004cc4 <TIM_Base_SetConfig+0xf4>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d007      	beq.n	8004c08 <TIM_Base_SetConfig+0x38>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a33      	ldr	r2, [pc, #204]	@ (8004cc8 <TIM_Base_SetConfig+0xf8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d003      	beq.n	8004c08 <TIM_Base_SetConfig+0x38>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a32      	ldr	r2, [pc, #200]	@ (8004ccc <TIM_Base_SetConfig+0xfc>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d108      	bne.n	8004c1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a28      	ldr	r2, [pc, #160]	@ (8004cc0 <TIM_Base_SetConfig+0xf0>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d01b      	beq.n	8004c5a <TIM_Base_SetConfig+0x8a>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c28:	d017      	beq.n	8004c5a <TIM_Base_SetConfig+0x8a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a25      	ldr	r2, [pc, #148]	@ (8004cc4 <TIM_Base_SetConfig+0xf4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d013      	beq.n	8004c5a <TIM_Base_SetConfig+0x8a>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a24      	ldr	r2, [pc, #144]	@ (8004cc8 <TIM_Base_SetConfig+0xf8>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d00f      	beq.n	8004c5a <TIM_Base_SetConfig+0x8a>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a23      	ldr	r2, [pc, #140]	@ (8004ccc <TIM_Base_SetConfig+0xfc>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d00b      	beq.n	8004c5a <TIM_Base_SetConfig+0x8a>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a22      	ldr	r2, [pc, #136]	@ (8004cd0 <TIM_Base_SetConfig+0x100>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d007      	beq.n	8004c5a <TIM_Base_SetConfig+0x8a>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a21      	ldr	r2, [pc, #132]	@ (8004cd4 <TIM_Base_SetConfig+0x104>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d003      	beq.n	8004c5a <TIM_Base_SetConfig+0x8a>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a20      	ldr	r2, [pc, #128]	@ (8004cd8 <TIM_Base_SetConfig+0x108>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d108      	bne.n	8004c6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	689a      	ldr	r2, [r3, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8004cc0 <TIM_Base_SetConfig+0xf0>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d103      	bne.n	8004c9a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	691a      	ldr	r2, [r3, #16]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f043 0204 	orr.w	r2, r3, #4
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	601a      	str	r2, [r3, #0]
}
 8004cb2:	bf00      	nop
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	40010000 	.word	0x40010000
 8004cc4:	40000400 	.word	0x40000400
 8004cc8:	40000800 	.word	0x40000800
 8004ccc:	40000c00 	.word	0x40000c00
 8004cd0:	40014000 	.word	0x40014000
 8004cd4:	40014400 	.word	0x40014400
 8004cd8:	40014800 	.word	0x40014800

08004cdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	f023 0201 	bic.w	r2, r3, #1
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 0303 	bic.w	r3, r3, #3
 8004d12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f023 0302 	bic.w	r3, r3, #2
 8004d24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a1c      	ldr	r2, [pc, #112]	@ (8004da4 <TIM_OC1_SetConfig+0xc8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d10c      	bne.n	8004d52 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f023 0308 	bic.w	r3, r3, #8
 8004d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f023 0304 	bic.w	r3, r3, #4
 8004d50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a13      	ldr	r2, [pc, #76]	@ (8004da4 <TIM_OC1_SetConfig+0xc8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d111      	bne.n	8004d7e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	621a      	str	r2, [r3, #32]
}
 8004d98:	bf00      	nop
 8004d9a:	371c      	adds	r7, #28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	40010000 	.word	0x40010000

08004da8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	f023 0210 	bic.w	r2, r3, #16
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	021b      	lsls	r3, r3, #8
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f023 0320 	bic.w	r3, r3, #32
 8004df2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	011b      	lsls	r3, r3, #4
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a1e      	ldr	r2, [pc, #120]	@ (8004e7c <TIM_OC2_SetConfig+0xd4>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d10d      	bne.n	8004e24 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	011b      	lsls	r3, r3, #4
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a15      	ldr	r2, [pc, #84]	@ (8004e7c <TIM_OC2_SetConfig+0xd4>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d113      	bne.n	8004e54 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	621a      	str	r2, [r3, #32]
}
 8004e6e:	bf00      	nop
 8004e70:	371c      	adds	r7, #28
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40010000 	.word	0x40010000

08004e80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0303 	bic.w	r3, r3, #3
 8004eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ec8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	021b      	lsls	r3, r3, #8
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f50 <TIM_OC3_SetConfig+0xd0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d10d      	bne.n	8004efa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	021b      	lsls	r3, r3, #8
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a14      	ldr	r2, [pc, #80]	@ (8004f50 <TIM_OC3_SetConfig+0xd0>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d113      	bne.n	8004f2a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	621a      	str	r2, [r3, #32]
}
 8004f44:	bf00      	nop
 8004f46:	371c      	adds	r7, #28
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	40010000 	.word	0x40010000

08004f54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	021b      	lsls	r3, r3, #8
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	031b      	lsls	r3, r3, #12
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a10      	ldr	r2, [pc, #64]	@ (8004ff0 <TIM_OC4_SetConfig+0x9c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d109      	bne.n	8004fc8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	019b      	lsls	r3, r3, #6
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	621a      	str	r2, [r3, #32]
}
 8004fe2:	bf00      	nop
 8004fe4:	371c      	adds	r7, #28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40010000 	.word	0x40010000

08004ff4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005010:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	4313      	orrs	r3, r2
 800501a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	f023 0307 	bic.w	r3, r3, #7
 8005022:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	4313      	orrs	r3, r2
 800502c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2b70      	cmp	r3, #112	@ 0x70
 800503c:	d01a      	beq.n	8005074 <TIM_SlaveTimer_SetConfig+0x80>
 800503e:	2b70      	cmp	r3, #112	@ 0x70
 8005040:	d860      	bhi.n	8005104 <TIM_SlaveTimer_SetConfig+0x110>
 8005042:	2b60      	cmp	r3, #96	@ 0x60
 8005044:	d054      	beq.n	80050f0 <TIM_SlaveTimer_SetConfig+0xfc>
 8005046:	2b60      	cmp	r3, #96	@ 0x60
 8005048:	d85c      	bhi.n	8005104 <TIM_SlaveTimer_SetConfig+0x110>
 800504a:	2b50      	cmp	r3, #80	@ 0x50
 800504c:	d046      	beq.n	80050dc <TIM_SlaveTimer_SetConfig+0xe8>
 800504e:	2b50      	cmp	r3, #80	@ 0x50
 8005050:	d858      	bhi.n	8005104 <TIM_SlaveTimer_SetConfig+0x110>
 8005052:	2b40      	cmp	r3, #64	@ 0x40
 8005054:	d019      	beq.n	800508a <TIM_SlaveTimer_SetConfig+0x96>
 8005056:	2b40      	cmp	r3, #64	@ 0x40
 8005058:	d854      	bhi.n	8005104 <TIM_SlaveTimer_SetConfig+0x110>
 800505a:	2b30      	cmp	r3, #48	@ 0x30
 800505c:	d055      	beq.n	800510a <TIM_SlaveTimer_SetConfig+0x116>
 800505e:	2b30      	cmp	r3, #48	@ 0x30
 8005060:	d850      	bhi.n	8005104 <TIM_SlaveTimer_SetConfig+0x110>
 8005062:	2b20      	cmp	r3, #32
 8005064:	d051      	beq.n	800510a <TIM_SlaveTimer_SetConfig+0x116>
 8005066:	2b20      	cmp	r3, #32
 8005068:	d84c      	bhi.n	8005104 <TIM_SlaveTimer_SetConfig+0x110>
 800506a:	2b00      	cmp	r3, #0
 800506c:	d04d      	beq.n	800510a <TIM_SlaveTimer_SetConfig+0x116>
 800506e:	2b10      	cmp	r3, #16
 8005070:	d04b      	beq.n	800510a <TIM_SlaveTimer_SetConfig+0x116>
 8005072:	e047      	b.n	8005104 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005084:	f000 f8a6 	bl	80051d4 <TIM_ETR_SetConfig>
      break;
 8005088:	e040      	b.n	800510c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b05      	cmp	r3, #5
 8005090:	d101      	bne.n	8005096 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e03b      	b.n	800510e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6a1a      	ldr	r2, [r3, #32]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0201 	bic.w	r2, r2, #1
 80050ac:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050bc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	621a      	str	r2, [r3, #32]
      break;
 80050da:	e017      	b.n	800510c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050e8:	461a      	mov	r2, r3
 80050ea:	f000 f814 	bl	8005116 <TIM_TI1_ConfigInputStage>
      break;
 80050ee:	e00d      	b.n	800510c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050fc:	461a      	mov	r2, r3
 80050fe:	f000 f839 	bl	8005174 <TIM_TI2_ConfigInputStage>
      break;
 8005102:	e003      	b.n	800510c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	75fb      	strb	r3, [r7, #23]
      break;
 8005108:	e000      	b.n	800510c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800510a:	bf00      	nop
  }

  return status;
 800510c:	7dfb      	ldrb	r3, [r7, #23]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3718      	adds	r7, #24
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005116:	b480      	push	{r7}
 8005118:	b087      	sub	sp, #28
 800511a:	af00      	add	r7, sp, #0
 800511c:	60f8      	str	r0, [r7, #12]
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	f023 0201 	bic.w	r2, r3, #1
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005140:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	011b      	lsls	r3, r3, #4
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4313      	orrs	r3, r2
 800514a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f023 030a 	bic.w	r3, r3, #10
 8005152:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	4313      	orrs	r3, r2
 800515a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	621a      	str	r2, [r3, #32]
}
 8005168:	bf00      	nop
 800516a:	371c      	adds	r7, #28
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	f023 0210 	bic.w	r2, r3, #16
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800519e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	031b      	lsls	r3, r3, #12
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051b0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	621a      	str	r2, [r3, #32]
}
 80051c8:	bf00      	nop
 80051ca:	371c      	adds	r7, #28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	021a      	lsls	r2, r3, #8
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	431a      	orrs	r2, r3
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	4313      	orrs	r3, r2
 8005200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	609a      	str	r2, [r3, #8]
}
 8005208:	bf00      	nop
 800520a:	371c      	adds	r7, #28
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f003 031f 	and.w	r3, r3, #31
 8005226:	2201      	movs	r2, #1
 8005228:	fa02 f303 	lsl.w	r3, r2, r3
 800522c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6a1a      	ldr	r2, [r3, #32]
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	43db      	mvns	r3, r3
 8005236:	401a      	ands	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6a1a      	ldr	r2, [r3, #32]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f003 031f 	and.w	r3, r3, #31
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	fa01 f303 	lsl.w	r3, r1, r3
 800524c:	431a      	orrs	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	621a      	str	r2, [r3, #32]
}
 8005252:	bf00      	nop
 8005254:	371c      	adds	r7, #28
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
	...

08005260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005270:	2b01      	cmp	r3, #1
 8005272:	d101      	bne.n	8005278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005274:	2302      	movs	r3, #2
 8005276:	e050      	b.n	800531a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800529e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005328 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d018      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052c4:	d013      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a18      	ldr	r2, [pc, #96]	@ (800532c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d00e      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a16      	ldr	r2, [pc, #88]	@ (8005330 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d009      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a15      	ldr	r2, [pc, #84]	@ (8005334 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d004      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a13      	ldr	r2, [pc, #76]	@ (8005338 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d10c      	bne.n	8005308 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40010000 	.word	0x40010000
 800532c:	40000400 	.word	0x40000400
 8005330:	40000800 	.word	0x40000800
 8005334:	40000c00 	.word	0x40000c00
 8005338:	40014000 	.word	0x40014000

0800533c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005346:	2300      	movs	r3, #0
 8005348:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005350:	2b01      	cmp	r3, #1
 8005352:	d101      	bne.n	8005358 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005354:	2302      	movs	r3, #2
 8005356:	e03d      	b.n	80053d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	4313      	orrs	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	4313      	orrs	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4313      	orrs	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053e0:	b084      	sub	sp, #16
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b084      	sub	sp, #16
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
 80053ea:	f107 001c 	add.w	r0, r7, #28
 80053ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053f2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d123      	bne.n	8005442 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800540e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005422:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005426:	2b01      	cmp	r3, #1
 8005428:	d105      	bne.n	8005436 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f001 fae8 	bl	8006a0c <USB_CoreReset>
 800543c:	4603      	mov	r3, r0
 800543e:	73fb      	strb	r3, [r7, #15]
 8005440:	e01b      	b.n	800547a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f001 fadc 	bl	8006a0c <USB_CoreReset>
 8005454:	4603      	mov	r3, r0
 8005456:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005458:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800545c:	2b00      	cmp	r3, #0
 800545e:	d106      	bne.n	800546e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005464:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	639a      	str	r2, [r3, #56]	@ 0x38
 800546c:	e005      	b.n	800547a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005472:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800547a:	7fbb      	ldrb	r3, [r7, #30]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d10b      	bne.n	8005498 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f043 0206 	orr.w	r2, r3, #6
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f043 0220 	orr.w	r2, r3, #32
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005498:	7bfb      	ldrb	r3, [r7, #15]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054a4:	b004      	add	sp, #16
 80054a6:	4770      	bx	lr

080054a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	4613      	mov	r3, r2
 80054b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80054b6:	79fb      	ldrb	r3, [r7, #7]
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d165      	bne.n	8005588 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4a41      	ldr	r2, [pc, #260]	@ (80055c4 <USB_SetTurnaroundTime+0x11c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d906      	bls.n	80054d2 <USB_SetTurnaroundTime+0x2a>
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4a40      	ldr	r2, [pc, #256]	@ (80055c8 <USB_SetTurnaroundTime+0x120>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d202      	bcs.n	80054d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80054cc:	230f      	movs	r3, #15
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	e062      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	4a3c      	ldr	r2, [pc, #240]	@ (80055c8 <USB_SetTurnaroundTime+0x120>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d306      	bcc.n	80054e8 <USB_SetTurnaroundTime+0x40>
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	4a3b      	ldr	r2, [pc, #236]	@ (80055cc <USB_SetTurnaroundTime+0x124>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d202      	bcs.n	80054e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80054e2:	230e      	movs	r3, #14
 80054e4:	617b      	str	r3, [r7, #20]
 80054e6:	e057      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	4a38      	ldr	r2, [pc, #224]	@ (80055cc <USB_SetTurnaroundTime+0x124>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d306      	bcc.n	80054fe <USB_SetTurnaroundTime+0x56>
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4a37      	ldr	r2, [pc, #220]	@ (80055d0 <USB_SetTurnaroundTime+0x128>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d202      	bcs.n	80054fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80054f8:	230d      	movs	r3, #13
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	e04c      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	4a33      	ldr	r2, [pc, #204]	@ (80055d0 <USB_SetTurnaroundTime+0x128>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d306      	bcc.n	8005514 <USB_SetTurnaroundTime+0x6c>
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	4a32      	ldr	r2, [pc, #200]	@ (80055d4 <USB_SetTurnaroundTime+0x12c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d802      	bhi.n	8005514 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800550e:	230c      	movs	r3, #12
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	e041      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	4a2f      	ldr	r2, [pc, #188]	@ (80055d4 <USB_SetTurnaroundTime+0x12c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d906      	bls.n	800552a <USB_SetTurnaroundTime+0x82>
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4a2e      	ldr	r2, [pc, #184]	@ (80055d8 <USB_SetTurnaroundTime+0x130>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d802      	bhi.n	800552a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005524:	230b      	movs	r3, #11
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	e036      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	4a2a      	ldr	r2, [pc, #168]	@ (80055d8 <USB_SetTurnaroundTime+0x130>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d906      	bls.n	8005540 <USB_SetTurnaroundTime+0x98>
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	4a29      	ldr	r2, [pc, #164]	@ (80055dc <USB_SetTurnaroundTime+0x134>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d802      	bhi.n	8005540 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800553a:	230a      	movs	r3, #10
 800553c:	617b      	str	r3, [r7, #20]
 800553e:	e02b      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	4a26      	ldr	r2, [pc, #152]	@ (80055dc <USB_SetTurnaroundTime+0x134>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d906      	bls.n	8005556 <USB_SetTurnaroundTime+0xae>
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4a25      	ldr	r2, [pc, #148]	@ (80055e0 <USB_SetTurnaroundTime+0x138>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d202      	bcs.n	8005556 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005550:	2309      	movs	r3, #9
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	e020      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	4a21      	ldr	r2, [pc, #132]	@ (80055e0 <USB_SetTurnaroundTime+0x138>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d306      	bcc.n	800556c <USB_SetTurnaroundTime+0xc4>
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	4a20      	ldr	r2, [pc, #128]	@ (80055e4 <USB_SetTurnaroundTime+0x13c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d802      	bhi.n	800556c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005566:	2308      	movs	r3, #8
 8005568:	617b      	str	r3, [r7, #20]
 800556a:	e015      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4a1d      	ldr	r2, [pc, #116]	@ (80055e4 <USB_SetTurnaroundTime+0x13c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d906      	bls.n	8005582 <USB_SetTurnaroundTime+0xda>
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	4a1c      	ldr	r2, [pc, #112]	@ (80055e8 <USB_SetTurnaroundTime+0x140>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d202      	bcs.n	8005582 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800557c:	2307      	movs	r3, #7
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	e00a      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005582:	2306      	movs	r3, #6
 8005584:	617b      	str	r3, [r7, #20]
 8005586:	e007      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005588:	79fb      	ldrb	r3, [r7, #7]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d102      	bne.n	8005594 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800558e:	2309      	movs	r3, #9
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	e001      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005594:	2309      	movs	r3, #9
 8005596:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	029b      	lsls	r3, r3, #10
 80055ac:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80055b0:	431a      	orrs	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	371c      	adds	r7, #28
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	00d8acbf 	.word	0x00d8acbf
 80055c8:	00e4e1c0 	.word	0x00e4e1c0
 80055cc:	00f42400 	.word	0x00f42400
 80055d0:	01067380 	.word	0x01067380
 80055d4:	011a499f 	.word	0x011a499f
 80055d8:	01312cff 	.word	0x01312cff
 80055dc:	014ca43f 	.word	0x014ca43f
 80055e0:	016e3600 	.word	0x016e3600
 80055e4:	01a6ab1f 	.word	0x01a6ab1f
 80055e8:	01e84800 	.word	0x01e84800

080055ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f043 0201 	orr.w	r2, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800560e:	b480      	push	{r7}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f023 0201 	bic.w	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	460b      	mov	r3, r1
 800563a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800564c:	78fb      	ldrb	r3, [r7, #3]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d115      	bne.n	800567e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800565e:	200a      	movs	r0, #10
 8005660:	f7fb fe3e 	bl	80012e0 <HAL_Delay>
      ms += 10U;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	330a      	adds	r3, #10
 8005668:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f001 f93f 	bl	80068ee <USB_GetMode>
 8005670:	4603      	mov	r3, r0
 8005672:	2b01      	cmp	r3, #1
 8005674:	d01e      	beq.n	80056b4 <USB_SetCurrentMode+0x84>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2bc7      	cmp	r3, #199	@ 0xc7
 800567a:	d9f0      	bls.n	800565e <USB_SetCurrentMode+0x2e>
 800567c:	e01a      	b.n	80056b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800567e:	78fb      	ldrb	r3, [r7, #3]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d115      	bne.n	80056b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005690:	200a      	movs	r0, #10
 8005692:	f7fb fe25 	bl	80012e0 <HAL_Delay>
      ms += 10U;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	330a      	adds	r3, #10
 800569a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f001 f926 	bl	80068ee <USB_GetMode>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d005      	beq.n	80056b4 <USB_SetCurrentMode+0x84>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2bc7      	cmp	r3, #199	@ 0xc7
 80056ac:	d9f0      	bls.n	8005690 <USB_SetCurrentMode+0x60>
 80056ae:	e001      	b.n	80056b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e005      	b.n	80056c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2bc8      	cmp	r3, #200	@ 0xc8
 80056b8:	d101      	bne.n	80056be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e000      	b.n	80056c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056c8:	b084      	sub	sp, #16
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b086      	sub	sp, #24
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80056d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056da:	2300      	movs	r3, #0
 80056dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056e2:	2300      	movs	r3, #0
 80056e4:	613b      	str	r3, [r7, #16]
 80056e6:	e009      	b.n	80056fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	3340      	adds	r3, #64	@ 0x40
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	2200      	movs	r2, #0
 80056f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	3301      	adds	r3, #1
 80056fa:	613b      	str	r3, [r7, #16]
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	2b0e      	cmp	r3, #14
 8005700:	d9f2      	bls.n	80056e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005702:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005706:	2b00      	cmp	r3, #0
 8005708:	d11c      	bne.n	8005744 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005718:	f043 0302 	orr.w	r3, r3, #2
 800571c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005722:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800572e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800573a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	639a      	str	r2, [r3, #56]	@ 0x38
 8005742:	e00b      	b.n	800575c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005748:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005754:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005762:	461a      	mov	r2, r3
 8005764:	2300      	movs	r3, #0
 8005766:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005768:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800576c:	2b01      	cmp	r3, #1
 800576e:	d10d      	bne.n	800578c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005770:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005774:	2b00      	cmp	r3, #0
 8005776:	d104      	bne.n	8005782 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005778:	2100      	movs	r1, #0
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f968 	bl	8005a50 <USB_SetDevSpeed>
 8005780:	e008      	b.n	8005794 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005782:	2101      	movs	r1, #1
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f963 	bl	8005a50 <USB_SetDevSpeed>
 800578a:	e003      	b.n	8005794 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800578c:	2103      	movs	r1, #3
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f95e 	bl	8005a50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005794:	2110      	movs	r1, #16
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f8fa 	bl	8005990 <USB_FlushTxFifo>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f924 	bl	80059f4 <USB_FlushRxFifo>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057bc:	461a      	mov	r2, r3
 80057be:	2300      	movs	r3, #0
 80057c0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057c8:	461a      	mov	r2, r3
 80057ca:	2300      	movs	r3, #0
 80057cc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057d4:	461a      	mov	r2, r3
 80057d6:	2300      	movs	r3, #0
 80057d8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057da:	2300      	movs	r3, #0
 80057dc:	613b      	str	r3, [r7, #16]
 80057de:	e043      	b.n	8005868 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057f6:	d118      	bne.n	800582a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10a      	bne.n	8005814 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800580a:	461a      	mov	r2, r3
 800580c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	e013      	b.n	800583c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005820:	461a      	mov	r2, r3
 8005822:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005826:	6013      	str	r3, [r2, #0]
 8005828:	e008      	b.n	800583c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	015a      	lsls	r2, r3, #5
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4413      	add	r3, r2
 8005832:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005836:	461a      	mov	r2, r3
 8005838:	2300      	movs	r3, #0
 800583a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005848:	461a      	mov	r2, r3
 800584a:	2300      	movs	r3, #0
 800584c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	4413      	add	r3, r2
 8005856:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800585a:	461a      	mov	r2, r3
 800585c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005860:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	3301      	adds	r3, #1
 8005866:	613b      	str	r3, [r7, #16]
 8005868:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800586c:	461a      	mov	r2, r3
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	4293      	cmp	r3, r2
 8005872:	d3b5      	bcc.n	80057e0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005874:	2300      	movs	r3, #0
 8005876:	613b      	str	r3, [r7, #16]
 8005878:	e043      	b.n	8005902 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800588c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005890:	d118      	bne.n	80058c4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10a      	bne.n	80058ae <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058a4:	461a      	mov	r2, r3
 80058a6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80058aa:	6013      	str	r3, [r2, #0]
 80058ac:	e013      	b.n	80058d6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ba:	461a      	mov	r2, r3
 80058bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80058c0:	6013      	str	r3, [r2, #0]
 80058c2:	e008      	b.n	80058d6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058d0:	461a      	mov	r2, r3
 80058d2:	2300      	movs	r3, #0
 80058d4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058e2:	461a      	mov	r2, r3
 80058e4:	2300      	movs	r3, #0
 80058e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058f4:	461a      	mov	r2, r3
 80058f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80058fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	3301      	adds	r3, #1
 8005900:	613b      	str	r3, [r7, #16]
 8005902:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005906:	461a      	mov	r2, r3
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	4293      	cmp	r3, r2
 800590c:	d3b5      	bcc.n	800587a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800591c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005920:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800592e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005930:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005934:	2b00      	cmp	r3, #0
 8005936:	d105      	bne.n	8005944 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	f043 0210 	orr.w	r2, r3, #16
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	699a      	ldr	r2, [r3, #24]
 8005948:	4b10      	ldr	r3, [pc, #64]	@ (800598c <USB_DevInit+0x2c4>)
 800594a:	4313      	orrs	r3, r2
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005950:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005954:	2b00      	cmp	r3, #0
 8005956:	d005      	beq.n	8005964 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	f043 0208 	orr.w	r2, r3, #8
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005964:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005968:	2b01      	cmp	r3, #1
 800596a:	d107      	bne.n	800597c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005974:	f043 0304 	orr.w	r3, r3, #4
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800597c:	7dfb      	ldrb	r3, [r7, #23]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005988:	b004      	add	sp, #16
 800598a:	4770      	bx	lr
 800598c:	803c3800 	.word	0x803c3800

08005990 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3301      	adds	r3, #1
 80059a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059aa:	d901      	bls.n	80059b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e01b      	b.n	80059e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	daf2      	bge.n	800599e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	019b      	lsls	r3, r3, #6
 80059c0:	f043 0220 	orr.w	r2, r3, #32
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	3301      	adds	r3, #1
 80059cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059d4:	d901      	bls.n	80059da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e006      	b.n	80059e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b20      	cmp	r3, #32
 80059e4:	d0f0      	beq.n	80059c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	3301      	adds	r3, #1
 8005a04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a0c:	d901      	bls.n	8005a12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e018      	b.n	8005a44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	daf2      	bge.n	8005a00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2210      	movs	r2, #16
 8005a22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	3301      	adds	r3, #1
 8005a28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a30:	d901      	bls.n	8005a36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e006      	b.n	8005a44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f003 0310 	and.w	r3, r3, #16
 8005a3e:	2b10      	cmp	r3, #16
 8005a40:	d0f0      	beq.n	8005a24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	78fb      	ldrb	r3, [r7, #3]
 8005a6a:	68f9      	ldr	r1, [r7, #12]
 8005a6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a70:	4313      	orrs	r3, r2
 8005a72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b087      	sub	sp, #28
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f003 0306 	and.w	r3, r3, #6
 8005a9a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d102      	bne.n	8005aa8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	75fb      	strb	r3, [r7, #23]
 8005aa6:	e00a      	b.n	8005abe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d002      	beq.n	8005ab4 <USB_GetDevSpeed+0x32>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2b06      	cmp	r3, #6
 8005ab2:	d102      	bne.n	8005aba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	75fb      	strb	r3, [r7, #23]
 8005ab8:	e001      	b.n	8005abe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005aba:	230f      	movs	r3, #15
 8005abc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	371c      	adds	r7, #28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	785b      	ldrb	r3, [r3, #1]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d13a      	bne.n	8005b5e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aee:	69da      	ldr	r2, [r3, #28]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	f003 030f 	and.w	r3, r3, #15
 8005af8:	2101      	movs	r1, #1
 8005afa:	fa01 f303 	lsl.w	r3, r1, r3
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	68f9      	ldr	r1, [r7, #12]
 8005b02:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b06:	4313      	orrs	r3, r2
 8005b08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d155      	bne.n	8005bcc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	791b      	ldrb	r3, [r3, #4]
 8005b3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	059b      	lsls	r3, r3, #22
 8005b42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b44:	4313      	orrs	r3, r2
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	0151      	lsls	r1, r2, #5
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	440a      	add	r2, r1
 8005b4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b5a:	6013      	str	r3, [r2, #0]
 8005b5c:	e036      	b.n	8005bcc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b64:	69da      	ldr	r2, [r3, #28]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	2101      	movs	r1, #1
 8005b70:	fa01 f303 	lsl.w	r3, r1, r3
 8005b74:	041b      	lsls	r3, r3, #16
 8005b76:	68f9      	ldr	r1, [r7, #12]
 8005b78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d11a      	bne.n	8005bcc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	791b      	ldrb	r3, [r3, #4]
 8005bb0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005bb2:	430b      	orrs	r3, r1
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	0151      	lsls	r1, r2, #5
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	440a      	add	r2, r1
 8005bbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
	...

08005bdc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	785b      	ldrb	r3, [r3, #1]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d161      	bne.n	8005cbc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c0e:	d11f      	bne.n	8005c50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	0151      	lsls	r1, r2, #5
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	440a      	add	r2, r1
 8005c26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c2a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005c2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	0151      	lsls	r1, r2, #5
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	440a      	add	r2, r1
 8005c46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	f003 030f 	and.w	r3, r3, #15
 8005c60:	2101      	movs	r1, #1
 8005c62:	fa01 f303 	lsl.w	r3, r1, r3
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	43db      	mvns	r3, r3
 8005c6a:	68f9      	ldr	r1, [r7, #12]
 8005c6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c70:	4013      	ands	r3, r2
 8005c72:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c7a:	69da      	ldr	r2, [r3, #28]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	f003 030f 	and.w	r3, r3, #15
 8005c84:	2101      	movs	r1, #1
 8005c86:	fa01 f303 	lsl.w	r3, r1, r3
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	43db      	mvns	r3, r3
 8005c8e:	68f9      	ldr	r1, [r7, #12]
 8005c90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c94:	4013      	ands	r3, r2
 8005c96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	0159      	lsls	r1, r3, #5
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	440b      	add	r3, r1
 8005cae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	4b35      	ldr	r3, [pc, #212]	@ (8005d8c <USB_DeactivateEndpoint+0x1b0>)
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	600b      	str	r3, [r1, #0]
 8005cba:	e060      	b.n	8005d7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cd2:	d11f      	bne.n	8005d14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	0151      	lsls	r1, r2, #5
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	440a      	add	r2, r1
 8005cea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005cf2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	0151      	lsls	r1, r2, #5
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	440a      	add	r2, r1
 8005d0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d0e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	f003 030f 	and.w	r3, r3, #15
 8005d24:	2101      	movs	r1, #1
 8005d26:	fa01 f303 	lsl.w	r3, r1, r3
 8005d2a:	041b      	lsls	r3, r3, #16
 8005d2c:	43db      	mvns	r3, r3
 8005d2e:	68f9      	ldr	r1, [r7, #12]
 8005d30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d34:	4013      	ands	r3, r2
 8005d36:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d3e:	69da      	ldr	r2, [r3, #28]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	f003 030f 	and.w	r3, r3, #15
 8005d48:	2101      	movs	r1, #1
 8005d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d4e:	041b      	lsls	r3, r3, #16
 8005d50:	43db      	mvns	r3, r3
 8005d52:	68f9      	ldr	r1, [r7, #12]
 8005d54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d58:	4013      	ands	r3, r2
 8005d5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	0159      	lsls	r1, r3, #5
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	440b      	add	r3, r1
 8005d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d76:	4619      	mov	r1, r3
 8005d78:	4b05      	ldr	r3, [pc, #20]	@ (8005d90 <USB_DeactivateEndpoint+0x1b4>)
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	ec337800 	.word	0xec337800
 8005d90:	eff37800 	.word	0xeff37800

08005d94 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08a      	sub	sp, #40	@ 0x28
 8005d98:	af02      	add	r7, sp, #8
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	785b      	ldrb	r3, [r3, #1]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	f040 817f 	bne.w	80060b4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d132      	bne.n	8005e24 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	0151      	lsls	r1, r2, #5
 8005dd0:	69fa      	ldr	r2, [r7, #28]
 8005dd2:	440a      	add	r2, r1
 8005dd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dd8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005ddc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005de0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	0151      	lsls	r1, r2, #5
 8005df4:	69fa      	ldr	r2, [r7, #28]
 8005df6:	440a      	add	r2, r1
 8005df8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dfc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	0151      	lsls	r1, r2, #5
 8005e14:	69fa      	ldr	r2, [r7, #28]
 8005e16:	440a      	add	r2, r1
 8005e18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e1c:	0cdb      	lsrs	r3, r3, #19
 8005e1e:	04db      	lsls	r3, r3, #19
 8005e20:	6113      	str	r3, [r2, #16]
 8005e22:	e097      	b.n	8005f54 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	0151      	lsls	r1, r2, #5
 8005e36:	69fa      	ldr	r2, [r7, #28]
 8005e38:	440a      	add	r2, r1
 8005e3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e3e:	0cdb      	lsrs	r3, r3, #19
 8005e40:	04db      	lsls	r3, r3, #19
 8005e42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	0151      	lsls	r1, r2, #5
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	440a      	add	r2, r1
 8005e5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e5e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005e62:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005e66:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d11a      	bne.n	8005ea4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	691a      	ldr	r2, [r3, #16]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d903      	bls.n	8005e82 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	689a      	ldr	r2, [r3, #8]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	0151      	lsls	r1, r2, #5
 8005e94:	69fa      	ldr	r2, [r7, #28]
 8005e96:	440a      	add	r2, r1
 8005e98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ea0:	6113      	str	r3, [r2, #16]
 8005ea2:	e044      	b.n	8005f2e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	691a      	ldr	r2, [r3, #16]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	4413      	add	r3, r2
 8005eae:	1e5a      	subs	r2, r3, #1
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ec6:	691a      	ldr	r2, [r3, #16]
 8005ec8:	8afb      	ldrh	r3, [r7, #22]
 8005eca:	04d9      	lsls	r1, r3, #19
 8005ecc:	4ba4      	ldr	r3, [pc, #656]	@ (8006160 <USB_EPStartXfer+0x3cc>)
 8005ece:	400b      	ands	r3, r1
 8005ed0:	69b9      	ldr	r1, [r7, #24]
 8005ed2:	0148      	lsls	r0, r1, #5
 8005ed4:	69f9      	ldr	r1, [r7, #28]
 8005ed6:	4401      	add	r1, r0
 8005ed8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005edc:	4313      	orrs	r3, r2
 8005ede:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	791b      	ldrb	r3, [r3, #4]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d122      	bne.n	8005f2e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	0151      	lsls	r1, r2, #5
 8005efa:	69fa      	ldr	r2, [r7, #28]
 8005efc:	440a      	add	r2, r1
 8005efe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f02:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005f06:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f14:	691a      	ldr	r2, [r3, #16]
 8005f16:	8afb      	ldrh	r3, [r7, #22]
 8005f18:	075b      	lsls	r3, r3, #29
 8005f1a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005f1e:	69b9      	ldr	r1, [r7, #24]
 8005f20:	0148      	lsls	r0, r1, #5
 8005f22:	69f9      	ldr	r1, [r7, #28]
 8005f24:	4401      	add	r1, r0
 8005f26:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f3a:	691a      	ldr	r2, [r3, #16]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f44:	69b9      	ldr	r1, [r7, #24]
 8005f46:	0148      	lsls	r0, r1, #5
 8005f48:	69f9      	ldr	r1, [r7, #28]
 8005f4a:	4401      	add	r1, r0
 8005f4c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005f50:	4313      	orrs	r3, r2
 8005f52:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f54:	79fb      	ldrb	r3, [r7, #7]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d14b      	bne.n	8005ff2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d009      	beq.n	8005f76 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f6e:	461a      	mov	r2, r3
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	69db      	ldr	r3, [r3, #28]
 8005f74:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	791b      	ldrb	r3, [r3, #4]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d128      	bne.n	8005fd0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d110      	bne.n	8005fb0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	0151      	lsls	r1, r2, #5
 8005fa0:	69fa      	ldr	r2, [r7, #28]
 8005fa2:	440a      	add	r2, r1
 8005fa4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fa8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005fac:	6013      	str	r3, [r2, #0]
 8005fae:	e00f      	b.n	8005fd0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	0151      	lsls	r1, r2, #5
 8005fc2:	69fa      	ldr	r2, [r7, #28]
 8005fc4:	440a      	add	r2, r1
 8005fc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fce:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	0151      	lsls	r1, r2, #5
 8005fe2:	69fa      	ldr	r2, [r7, #28]
 8005fe4:	440a      	add	r2, r1
 8005fe6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	e166      	b.n	80062c0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	0151      	lsls	r1, r2, #5
 8006004:	69fa      	ldr	r2, [r7, #28]
 8006006:	440a      	add	r2, r1
 8006008:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800600c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006010:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	791b      	ldrb	r3, [r3, #4]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d015      	beq.n	8006046 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 814e 	beq.w	80062c0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800602a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	f003 030f 	and.w	r3, r3, #15
 8006034:	2101      	movs	r1, #1
 8006036:	fa01 f303 	lsl.w	r3, r1, r3
 800603a:	69f9      	ldr	r1, [r7, #28]
 800603c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006040:	4313      	orrs	r3, r2
 8006042:	634b      	str	r3, [r1, #52]	@ 0x34
 8006044:	e13c      	b.n	80062c0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006052:	2b00      	cmp	r3, #0
 8006054:	d110      	bne.n	8006078 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	4413      	add	r3, r2
 800605e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	0151      	lsls	r1, r2, #5
 8006068:	69fa      	ldr	r2, [r7, #28]
 800606a:	440a      	add	r2, r1
 800606c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006070:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006074:	6013      	str	r3, [r2, #0]
 8006076:	e00f      	b.n	8006098 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	015a      	lsls	r2, r3, #5
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	4413      	add	r3, r2
 8006080:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	0151      	lsls	r1, r2, #5
 800608a:	69fa      	ldr	r2, [r7, #28]
 800608c:	440a      	add	r2, r1
 800608e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006092:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006096:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	68d9      	ldr	r1, [r3, #12]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	781a      	ldrb	r2, [r3, #0]
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	b298      	uxth	r0, r3
 80060a6:	79fb      	ldrb	r3, [r7, #7]
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	4603      	mov	r3, r0
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 f9b9 	bl	8006424 <USB_WritePacket>
 80060b2:	e105      	b.n	80062c0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	69fa      	ldr	r2, [r7, #28]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060ce:	0cdb      	lsrs	r3, r3, #19
 80060d0:	04db      	lsls	r3, r3, #19
 80060d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	0151      	lsls	r1, r2, #5
 80060e6:	69fa      	ldr	r2, [r7, #28]
 80060e8:	440a      	add	r2, r1
 80060ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060ee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80060f2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80060f6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d132      	bne.n	8006164 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	689a      	ldr	r2, [r3, #8]
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	689a      	ldr	r2, [r3, #8]
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	4413      	add	r3, r2
 800611e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006122:	691a      	ldr	r2, [r3, #16]
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800612c:	69b9      	ldr	r1, [r7, #24]
 800612e:	0148      	lsls	r0, r1, #5
 8006130:	69f9      	ldr	r1, [r7, #28]
 8006132:	4401      	add	r1, r0
 8006134:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006138:	4313      	orrs	r3, r2
 800613a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	0151      	lsls	r1, r2, #5
 800614e:	69fa      	ldr	r2, [r7, #28]
 8006150:	440a      	add	r2, r1
 8006152:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006156:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800615a:	6113      	str	r3, [r2, #16]
 800615c:	e062      	b.n	8006224 <USB_EPStartXfer+0x490>
 800615e:	bf00      	nop
 8006160:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d123      	bne.n	80061b4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006178:	691a      	ldr	r2, [r3, #16]
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006182:	69b9      	ldr	r1, [r7, #24]
 8006184:	0148      	lsls	r0, r1, #5
 8006186:	69f9      	ldr	r1, [r7, #28]
 8006188:	4401      	add	r1, r0
 800618a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800618e:	4313      	orrs	r3, r2
 8006190:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	4413      	add	r3, r2
 800619a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	69ba      	ldr	r2, [r7, #24]
 80061a2:	0151      	lsls	r1, r2, #5
 80061a4:	69fa      	ldr	r2, [r7, #28]
 80061a6:	440a      	add	r2, r1
 80061a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80061b0:	6113      	str	r3, [r2, #16]
 80061b2:	e037      	b.n	8006224 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	691a      	ldr	r2, [r3, #16]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	4413      	add	r3, r2
 80061be:	1e5a      	subs	r2, r3, #1
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	8afa      	ldrh	r2, [r7, #22]
 80061d0:	fb03 f202 	mul.w	r2, r3, r2
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061e4:	691a      	ldr	r2, [r3, #16]
 80061e6:	8afb      	ldrh	r3, [r7, #22]
 80061e8:	04d9      	lsls	r1, r3, #19
 80061ea:	4b38      	ldr	r3, [pc, #224]	@ (80062cc <USB_EPStartXfer+0x538>)
 80061ec:	400b      	ands	r3, r1
 80061ee:	69b9      	ldr	r1, [r7, #24]
 80061f0:	0148      	lsls	r0, r1, #5
 80061f2:	69f9      	ldr	r1, [r7, #28]
 80061f4:	4401      	add	r1, r0
 80061f6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80061fa:	4313      	orrs	r3, r2
 80061fc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800620a:	691a      	ldr	r2, [r3, #16]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006214:	69b9      	ldr	r1, [r7, #24]
 8006216:	0148      	lsls	r0, r1, #5
 8006218:	69f9      	ldr	r1, [r7, #28]
 800621a:	4401      	add	r1, r0
 800621c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006220:	4313      	orrs	r3, r2
 8006222:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006224:	79fb      	ldrb	r3, [r7, #7]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d10d      	bne.n	8006246 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d009      	beq.n	8006246 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	68d9      	ldr	r1, [r3, #12]
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	015a      	lsls	r2, r3, #5
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	4413      	add	r3, r2
 800623e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006242:	460a      	mov	r2, r1
 8006244:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	791b      	ldrb	r3, [r3, #4]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d128      	bne.n	80062a0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800625a:	2b00      	cmp	r3, #0
 800625c:	d110      	bne.n	8006280 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	4413      	add	r3, r2
 8006266:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	69ba      	ldr	r2, [r7, #24]
 800626e:	0151      	lsls	r1, r2, #5
 8006270:	69fa      	ldr	r2, [r7, #28]
 8006272:	440a      	add	r2, r1
 8006274:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006278:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800627c:	6013      	str	r3, [r2, #0]
 800627e:	e00f      	b.n	80062a0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	0151      	lsls	r1, r2, #5
 8006292:	69fa      	ldr	r2, [r7, #28]
 8006294:	440a      	add	r2, r1
 8006296:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800629a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800629e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	0151      	lsls	r1, r2, #5
 80062b2:	69fa      	ldr	r2, [r7, #28]
 80062b4:	440a      	add	r2, r1
 80062b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062ba:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80062be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3720      	adds	r7, #32
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	1ff80000 	.word	0x1ff80000

080062d0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062da:	2300      	movs	r3, #0
 80062dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80062de:	2300      	movs	r3, #0
 80062e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	785b      	ldrb	r3, [r3, #1]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d14a      	bne.n	8006384 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006302:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006306:	f040 8086 	bne.w	8006416 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	4413      	add	r3, r2
 8006314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	7812      	ldrb	r2, [r2, #0]
 800631e:	0151      	lsls	r1, r2, #5
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	440a      	add	r2, r1
 8006324:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006328:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800632c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	7812      	ldrb	r2, [r2, #0]
 8006342:	0151      	lsls	r1, r2, #5
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	440a      	add	r2, r1
 8006348:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800634c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006350:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3301      	adds	r3, #1
 8006356:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800635e:	4293      	cmp	r3, r2
 8006360:	d902      	bls.n	8006368 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	75fb      	strb	r3, [r7, #23]
          break;
 8006366:	e056      	b.n	8006416 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	4413      	add	r3, r2
 8006372:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800637c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006380:	d0e7      	beq.n	8006352 <USB_EPStopXfer+0x82>
 8006382:	e048      	b.n	8006416 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	015a      	lsls	r2, r3, #5
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	4413      	add	r3, r2
 800638e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006398:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800639c:	d13b      	bne.n	8006416 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	7812      	ldrb	r2, [r2, #0]
 80063b2:	0151      	lsls	r1, r2, #5
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	440a      	add	r2, r1
 80063b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80063c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	7812      	ldrb	r2, [r2, #0]
 80063d6:	0151      	lsls	r1, r2, #5
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	440a      	add	r2, r1
 80063dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80063e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	3301      	adds	r3, #1
 80063ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d902      	bls.n	80063fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	75fb      	strb	r3, [r7, #23]
          break;
 80063fa:	e00c      	b.n	8006416 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	4413      	add	r3, r2
 8006406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006410:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006414:	d0e7      	beq.n	80063e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006416:	7dfb      	ldrb	r3, [r7, #23]
}
 8006418:	4618      	mov	r0, r3
 800641a:	371c      	adds	r7, #28
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006424:	b480      	push	{r7}
 8006426:	b089      	sub	sp, #36	@ 0x24
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	4611      	mov	r1, r2
 8006430:	461a      	mov	r2, r3
 8006432:	460b      	mov	r3, r1
 8006434:	71fb      	strb	r3, [r7, #7]
 8006436:	4613      	mov	r3, r2
 8006438:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006442:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006446:	2b00      	cmp	r3, #0
 8006448:	d123      	bne.n	8006492 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800644a:	88bb      	ldrh	r3, [r7, #4]
 800644c:	3303      	adds	r3, #3
 800644e:	089b      	lsrs	r3, r3, #2
 8006450:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006452:	2300      	movs	r3, #0
 8006454:	61bb      	str	r3, [r7, #24]
 8006456:	e018      	b.n	800648a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006458:	79fb      	ldrb	r3, [r7, #7]
 800645a:	031a      	lsls	r2, r3, #12
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	4413      	add	r3, r2
 8006460:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006464:	461a      	mov	r2, r3
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	3301      	adds	r3, #1
 8006470:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	3301      	adds	r3, #1
 8006476:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	3301      	adds	r3, #1
 800647c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	3301      	adds	r3, #1
 8006482:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	3301      	adds	r3, #1
 8006488:	61bb      	str	r3, [r7, #24]
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	429a      	cmp	r2, r3
 8006490:	d3e2      	bcc.n	8006458 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3724      	adds	r7, #36	@ 0x24
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b08b      	sub	sp, #44	@ 0x2c
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	4613      	mov	r3, r2
 80064ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80064b6:	88fb      	ldrh	r3, [r7, #6]
 80064b8:	089b      	lsrs	r3, r3, #2
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80064be:	88fb      	ldrh	r3, [r7, #6]
 80064c0:	f003 0303 	and.w	r3, r3, #3
 80064c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80064c6:	2300      	movs	r3, #0
 80064c8:	623b      	str	r3, [r7, #32]
 80064ca:	e014      	b.n	80064f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80064d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064da:	3301      	adds	r3, #1
 80064dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80064de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e0:	3301      	adds	r3, #1
 80064e2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80064e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e6:	3301      	adds	r3, #1
 80064e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80064ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ec:	3301      	adds	r3, #1
 80064ee:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	3301      	adds	r3, #1
 80064f4:	623b      	str	r3, [r7, #32]
 80064f6:	6a3a      	ldr	r2, [r7, #32]
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d3e6      	bcc.n	80064cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80064fe:	8bfb      	ldrh	r3, [r7, #30]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d01e      	beq.n	8006542 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800650e:	461a      	mov	r2, r3
 8006510:	f107 0310 	add.w	r3, r7, #16
 8006514:	6812      	ldr	r2, [r2, #0]
 8006516:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	b2db      	uxtb	r3, r3
 800651e:	00db      	lsls	r3, r3, #3
 8006520:	fa22 f303 	lsr.w	r3, r2, r3
 8006524:	b2da      	uxtb	r2, r3
 8006526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006528:	701a      	strb	r2, [r3, #0]
      i++;
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	3301      	adds	r3, #1
 800652e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006532:	3301      	adds	r3, #1
 8006534:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006536:	8bfb      	ldrh	r3, [r7, #30]
 8006538:	3b01      	subs	r3, #1
 800653a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800653c:	8bfb      	ldrh	r3, [r7, #30]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1ea      	bne.n	8006518 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006544:	4618      	mov	r0, r3
 8006546:	372c      	adds	r7, #44	@ 0x2c
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	785b      	ldrb	r3, [r3, #1]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d12c      	bne.n	80065c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4413      	add	r3, r2
 8006574:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	db12      	blt.n	80065a4 <USB_EPSetStall+0x54>
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00f      	beq.n	80065a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	0151      	lsls	r1, r2, #5
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	440a      	add	r2, r1
 800659a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800659e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80065a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	0151      	lsls	r1, r2, #5
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	440a      	add	r2, r1
 80065ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80065c2:	6013      	str	r3, [r2, #0]
 80065c4:	e02b      	b.n	800661e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	db12      	blt.n	80065fe <USB_EPSetStall+0xae>
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00f      	beq.n	80065fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	0151      	lsls	r1, r2, #5
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	440a      	add	r2, r1
 80065f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80065fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	4413      	add	r3, r2
 8006606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	0151      	lsls	r1, r2, #5
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	440a      	add	r2, r1
 8006614:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006618:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800661c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	785b      	ldrb	r3, [r3, #1]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d128      	bne.n	800669a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4413      	add	r3, r2
 8006650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	0151      	lsls	r1, r2, #5
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	440a      	add	r2, r1
 800665e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006662:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006666:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	791b      	ldrb	r3, [r3, #4]
 800666c:	2b03      	cmp	r3, #3
 800666e:	d003      	beq.n	8006678 <USB_EPClearStall+0x4c>
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	791b      	ldrb	r3, [r3, #4]
 8006674:	2b02      	cmp	r3, #2
 8006676:	d138      	bne.n	80066ea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	015a      	lsls	r2, r3, #5
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4413      	add	r3, r2
 8006680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	0151      	lsls	r1, r2, #5
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	440a      	add	r2, r1
 800668e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006692:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006696:	6013      	str	r3, [r2, #0]
 8006698:	e027      	b.n	80066ea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	0151      	lsls	r1, r2, #5
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	440a      	add	r2, r1
 80066b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066b4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80066b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	791b      	ldrb	r3, [r3, #4]
 80066be:	2b03      	cmp	r3, #3
 80066c0:	d003      	beq.n	80066ca <USB_EPClearStall+0x9e>
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	791b      	ldrb	r3, [r3, #4]
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d10f      	bne.n	80066ea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	0151      	lsls	r1, r2, #5
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	440a      	add	r2, r1
 80066e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066e8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	460b      	mov	r3, r1
 8006702:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006716:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800671a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	78fb      	ldrb	r3, [r7, #3]
 8006726:	011b      	lsls	r3, r3, #4
 8006728:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800672c:	68f9      	ldr	r1, [r7, #12]
 800672e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006732:	4313      	orrs	r3, r2
 8006734:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800675e:	f023 0303 	bic.w	r3, r3, #3
 8006762:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006772:	f023 0302 	bic.w	r3, r3, #2
 8006776:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3714      	adds	r7, #20
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006786:	b480      	push	{r7}
 8006788:	b085      	sub	sp, #20
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80067a0:	f023 0303 	bic.w	r3, r3, #3
 80067a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067b4:	f043 0302 	orr.w	r3, r3, #2
 80067b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	4013      	ands	r3, r2
 80067de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80067e0:	68fb      	ldr	r3, [r7, #12]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b085      	sub	sp, #20
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	4013      	ands	r3, r2
 8006810:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	0c1b      	lsrs	r3, r3, #16
}
 8006816:	4618      	mov	r0, r3
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006822:	b480      	push	{r7}
 8006824:	b085      	sub	sp, #20
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800683e:	69db      	ldr	r3, [r3, #28]
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	4013      	ands	r3, r2
 8006844:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	b29b      	uxth	r3, r3
}
 800684a:	4618      	mov	r0, r3
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006856:	b480      	push	{r7}
 8006858:	b085      	sub	sp, #20
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	460b      	mov	r3, r1
 8006860:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006866:	78fb      	ldrb	r3, [r7, #3]
 8006868:	015a      	lsls	r2, r3, #5
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	4413      	add	r3, r2
 800686e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	4013      	ands	r3, r2
 8006882:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006884:	68bb      	ldr	r3, [r7, #8]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006892:	b480      	push	{r7}
 8006894:	b087      	sub	sp, #28
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
 800689a:	460b      	mov	r3, r1
 800689c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80068b6:	78fb      	ldrb	r3, [r7, #3]
 80068b8:	f003 030f 	and.w	r3, r3, #15
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	fa22 f303 	lsr.w	r3, r2, r3
 80068c2:	01db      	lsls	r3, r3, #7
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80068cc:	78fb      	ldrb	r3, [r7, #3]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	4013      	ands	r3, r2
 80068de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068e0:	68bb      	ldr	r3, [r7, #8]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	371c      	adds	r7, #28
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b083      	sub	sp, #12
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	f003 0301 	and.w	r3, r3, #1
}
 80068fe:	4618      	mov	r0, r3
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800690a:	b480      	push	{r7}
 800690c:	b085      	sub	sp, #20
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006924:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006928:	f023 0307 	bic.w	r3, r3, #7
 800692c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800693c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006940:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006950:	b480      	push	{r7}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	460b      	mov	r3, r1
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	333c      	adds	r3, #60	@ 0x3c
 8006966:	3304      	adds	r3, #4
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	4a26      	ldr	r2, [pc, #152]	@ (8006a08 <USB_EP0_OutStart+0xb8>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d90a      	bls.n	800698a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006980:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006984:	d101      	bne.n	800698a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006986:	2300      	movs	r3, #0
 8006988:	e037      	b.n	80069fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006990:	461a      	mov	r2, r3
 8006992:	2300      	movs	r3, #0
 8006994:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80069a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069b8:	f043 0318 	orr.w	r3, r3, #24
 80069bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069cc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80069d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80069d2:	7afb      	ldrb	r3, [r7, #11]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d10f      	bne.n	80069f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069de:	461a      	mov	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069f2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80069f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	371c      	adds	r7, #28
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	4f54300a 	.word	0x4f54300a

08006a0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a24:	d901      	bls.n	8006a2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e022      	b.n	8006a70 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	daf2      	bge.n	8006a18 <USB_CoreReset+0xc>

  count = 10U;
 8006a32:	230a      	movs	r3, #10
 8006a34:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006a36:	e002      	b.n	8006a3e <USB_CoreReset+0x32>
  {
    count--;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1f9      	bne.n	8006a38 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	f043 0201 	orr.w	r2, r3, #1
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	3301      	adds	r3, #1
 8006a54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a5c:	d901      	bls.n	8006a62 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e006      	b.n	8006a70 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d0f0      	beq.n	8006a50 <USB_CoreReset+0x44>

  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	460b      	mov	r3, r1
 8006a86:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a88:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006a8c:	f002 fcb2 	bl	80093f4 <USBD_static_malloc>
 8006a90:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d109      	bne.n	8006aac <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	32b0      	adds	r2, #176	@ 0xb0
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	e0d4      	b.n	8006c56 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006aac:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f002 fce2 	bl	800947c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	32b0      	adds	r2, #176	@ 0xb0
 8006ac2:	68f9      	ldr	r1, [r7, #12]
 8006ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	32b0      	adds	r2, #176	@ 0xb0
 8006ad2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	7c1b      	ldrb	r3, [r3, #16]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d138      	bne.n	8006b56 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006ae4:	4b5e      	ldr	r3, [pc, #376]	@ (8006c60 <USBD_CDC_Init+0x1e4>)
 8006ae6:	7819      	ldrb	r1, [r3, #0]
 8006ae8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006aec:	2202      	movs	r2, #2
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f002 fb5d 	bl	80091ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006af4:	4b5a      	ldr	r3, [pc, #360]	@ (8006c60 <USBD_CDC_Init+0x1e4>)
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	f003 020f 	and.w	r2, r3, #15
 8006afc:	6879      	ldr	r1, [r7, #4]
 8006afe:	4613      	mov	r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	440b      	add	r3, r1
 8006b08:	3323      	adds	r3, #35	@ 0x23
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b0e:	4b55      	ldr	r3, [pc, #340]	@ (8006c64 <USBD_CDC_Init+0x1e8>)
 8006b10:	7819      	ldrb	r1, [r3, #0]
 8006b12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b16:	2202      	movs	r2, #2
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f002 fb48 	bl	80091ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006b1e:	4b51      	ldr	r3, [pc, #324]	@ (8006c64 <USBD_CDC_Init+0x1e8>)
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	f003 020f 	and.w	r2, r3, #15
 8006b26:	6879      	ldr	r1, [r7, #4]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	440b      	add	r3, r1
 8006b32:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006b36:	2201      	movs	r2, #1
 8006b38:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006b3a:	4b4b      	ldr	r3, [pc, #300]	@ (8006c68 <USBD_CDC_Init+0x1ec>)
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	f003 020f 	and.w	r2, r3, #15
 8006b42:	6879      	ldr	r1, [r7, #4]
 8006b44:	4613      	mov	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	440b      	add	r3, r1
 8006b4e:	331c      	adds	r3, #28
 8006b50:	2210      	movs	r2, #16
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	e035      	b.n	8006bc2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b56:	4b42      	ldr	r3, [pc, #264]	@ (8006c60 <USBD_CDC_Init+0x1e4>)
 8006b58:	7819      	ldrb	r1, [r3, #0]
 8006b5a:	2340      	movs	r3, #64	@ 0x40
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f002 fb25 	bl	80091ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b64:	4b3e      	ldr	r3, [pc, #248]	@ (8006c60 <USBD_CDC_Init+0x1e4>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	f003 020f 	and.w	r2, r3, #15
 8006b6c:	6879      	ldr	r1, [r7, #4]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4413      	add	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	440b      	add	r3, r1
 8006b78:	3323      	adds	r3, #35	@ 0x23
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b7e:	4b39      	ldr	r3, [pc, #228]	@ (8006c64 <USBD_CDC_Init+0x1e8>)
 8006b80:	7819      	ldrb	r1, [r3, #0]
 8006b82:	2340      	movs	r3, #64	@ 0x40
 8006b84:	2202      	movs	r2, #2
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f002 fb11 	bl	80091ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006b8c:	4b35      	ldr	r3, [pc, #212]	@ (8006c64 <USBD_CDC_Init+0x1e8>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	f003 020f 	and.w	r2, r3, #15
 8006b94:	6879      	ldr	r1, [r7, #4]
 8006b96:	4613      	mov	r3, r2
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	440b      	add	r3, r1
 8006ba0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006ba8:	4b2f      	ldr	r3, [pc, #188]	@ (8006c68 <USBD_CDC_Init+0x1ec>)
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	f003 020f 	and.w	r2, r3, #15
 8006bb0:	6879      	ldr	r1, [r7, #4]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	440b      	add	r3, r1
 8006bbc:	331c      	adds	r3, #28
 8006bbe:	2210      	movs	r2, #16
 8006bc0:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006bc2:	4b29      	ldr	r3, [pc, #164]	@ (8006c68 <USBD_CDC_Init+0x1ec>)
 8006bc4:	7819      	ldrb	r1, [r3, #0]
 8006bc6:	2308      	movs	r3, #8
 8006bc8:	2203      	movs	r2, #3
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f002 faef 	bl	80091ae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006bd0:	4b25      	ldr	r3, [pc, #148]	@ (8006c68 <USBD_CDC_Init+0x1ec>)
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	f003 020f 	and.w	r2, r3, #15
 8006bd8:	6879      	ldr	r1, [r7, #4]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	440b      	add	r3, r1
 8006be4:	3323      	adds	r3, #35	@ 0x23
 8006be6:	2201      	movs	r2, #1
 8006be8:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	33b0      	adds	r3, #176	@ 0xb0
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4413      	add	r3, r2
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006c20:	2302      	movs	r3, #2
 8006c22:	e018      	b.n	8006c56 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	7c1b      	ldrb	r3, [r3, #16]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10a      	bne.n	8006c42 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8006c64 <USBD_CDC_Init+0x1e8>)
 8006c2e:	7819      	ldrb	r1, [r3, #0]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006c36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f002 fba6 	bl	800938c <USBD_LL_PrepareReceive>
 8006c40:	e008      	b.n	8006c54 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c42:	4b08      	ldr	r3, [pc, #32]	@ (8006c64 <USBD_CDC_Init+0x1e8>)
 8006c44:	7819      	ldrb	r1, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006c4c:	2340      	movs	r3, #64	@ 0x40
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f002 fb9c 	bl	800938c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	20000093 	.word	0x20000093
 8006c64:	20000094 	.word	0x20000094
 8006c68:	20000095 	.word	0x20000095

08006c6c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	460b      	mov	r3, r1
 8006c76:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006c78:	4b3a      	ldr	r3, [pc, #232]	@ (8006d64 <USBD_CDC_DeInit+0xf8>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f002 fabb 	bl	80091fa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006c84:	4b37      	ldr	r3, [pc, #220]	@ (8006d64 <USBD_CDC_DeInit+0xf8>)
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	f003 020f 	and.w	r2, r3, #15
 8006c8c:	6879      	ldr	r1, [r7, #4]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	440b      	add	r3, r1
 8006c98:	3323      	adds	r3, #35	@ 0x23
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006c9e:	4b32      	ldr	r3, [pc, #200]	@ (8006d68 <USBD_CDC_DeInit+0xfc>)
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f002 faa8 	bl	80091fa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006caa:	4b2f      	ldr	r3, [pc, #188]	@ (8006d68 <USBD_CDC_DeInit+0xfc>)
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	f003 020f 	and.w	r2, r3, #15
 8006cb2:	6879      	ldr	r1, [r7, #4]
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4413      	add	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	440b      	add	r3, r1
 8006cbe:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006cc6:	4b29      	ldr	r3, [pc, #164]	@ (8006d6c <USBD_CDC_DeInit+0x100>)
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f002 fa94 	bl	80091fa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006cd2:	4b26      	ldr	r3, [pc, #152]	@ (8006d6c <USBD_CDC_DeInit+0x100>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	f003 020f 	and.w	r2, r3, #15
 8006cda:	6879      	ldr	r1, [r7, #4]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	440b      	add	r3, r1
 8006ce6:	3323      	adds	r3, #35	@ 0x23
 8006ce8:	2200      	movs	r2, #0
 8006cea:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006cec:	4b1f      	ldr	r3, [pc, #124]	@ (8006d6c <USBD_CDC_DeInit+0x100>)
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	f003 020f 	and.w	r2, r3, #15
 8006cf4:	6879      	ldr	r1, [r7, #4]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	440b      	add	r3, r1
 8006d00:	331c      	adds	r3, #28
 8006d02:	2200      	movs	r2, #0
 8006d04:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	32b0      	adds	r2, #176	@ 0xb0
 8006d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d01f      	beq.n	8006d58 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	33b0      	adds	r3, #176	@ 0xb0
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4413      	add	r3, r2
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	32b0      	adds	r2, #176	@ 0xb0
 8006d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f002 fb68 	bl	8009410 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	32b0      	adds	r2, #176	@ 0xb0
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	20000093 	.word	0x20000093
 8006d68:	20000094 	.word	0x20000094
 8006d6c:	20000095 	.word	0x20000095

08006d70 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	32b0      	adds	r2, #176	@ 0xb0
 8006d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d88:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d101      	bne.n	8006da0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e0bf      	b.n	8006f20 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d050      	beq.n	8006e4e <USBD_CDC_Setup+0xde>
 8006dac:	2b20      	cmp	r3, #32
 8006dae:	f040 80af 	bne.w	8006f10 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	88db      	ldrh	r3, [r3, #6]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d03a      	beq.n	8006e30 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	b25b      	sxtb	r3, r3
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	da1b      	bge.n	8006dfc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	33b0      	adds	r3, #176	@ 0xb0
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	683a      	ldr	r2, [r7, #0]
 8006dd8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006dda:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	88d2      	ldrh	r2, [r2, #6]
 8006de0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	88db      	ldrh	r3, [r3, #6]
 8006de6:	2b07      	cmp	r3, #7
 8006de8:	bf28      	it	cs
 8006dea:	2307      	movcs	r3, #7
 8006dec:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	89fa      	ldrh	r2, [r7, #14]
 8006df2:	4619      	mov	r1, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 fda9 	bl	800894c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006dfa:	e090      	b.n	8006f1e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	785a      	ldrb	r2, [r3, #1]
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	88db      	ldrh	r3, [r3, #6]
 8006e0a:	2b3f      	cmp	r3, #63	@ 0x3f
 8006e0c:	d803      	bhi.n	8006e16 <USBD_CDC_Setup+0xa6>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	88db      	ldrh	r3, [r3, #6]
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	e000      	b.n	8006e18 <USBD_CDC_Setup+0xa8>
 8006e16:	2240      	movs	r2, #64	@ 0x40
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006e1e:	6939      	ldr	r1, [r7, #16]
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006e26:	461a      	mov	r2, r3
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f001 fdbe 	bl	80089aa <USBD_CtlPrepareRx>
      break;
 8006e2e:	e076      	b.n	8006f1e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	33b0      	adds	r3, #176	@ 0xb0
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	7850      	ldrb	r0, [r2, #1]
 8006e46:	2200      	movs	r2, #0
 8006e48:	6839      	ldr	r1, [r7, #0]
 8006e4a:	4798      	blx	r3
      break;
 8006e4c:	e067      	b.n	8006f1e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	785b      	ldrb	r3, [r3, #1]
 8006e52:	2b0b      	cmp	r3, #11
 8006e54:	d851      	bhi.n	8006efa <USBD_CDC_Setup+0x18a>
 8006e56:	a201      	add	r2, pc, #4	@ (adr r2, 8006e5c <USBD_CDC_Setup+0xec>)
 8006e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5c:	08006e8d 	.word	0x08006e8d
 8006e60:	08006f09 	.word	0x08006f09
 8006e64:	08006efb 	.word	0x08006efb
 8006e68:	08006efb 	.word	0x08006efb
 8006e6c:	08006efb 	.word	0x08006efb
 8006e70:	08006efb 	.word	0x08006efb
 8006e74:	08006efb 	.word	0x08006efb
 8006e78:	08006efb 	.word	0x08006efb
 8006e7c:	08006efb 	.word	0x08006efb
 8006e80:	08006efb 	.word	0x08006efb
 8006e84:	08006eb7 	.word	0x08006eb7
 8006e88:	08006ee1 	.word	0x08006ee1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2b03      	cmp	r3, #3
 8006e96:	d107      	bne.n	8006ea8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e98:	f107 030a 	add.w	r3, r7, #10
 8006e9c:	2202      	movs	r2, #2
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f001 fd53 	bl	800894c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ea6:	e032      	b.n	8006f0e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f001 fcd1 	bl	8008852 <USBD_CtlError>
            ret = USBD_FAIL;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	75fb      	strb	r3, [r7, #23]
          break;
 8006eb4:	e02b      	b.n	8006f0e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	d107      	bne.n	8006ed2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ec2:	f107 030d 	add.w	r3, r7, #13
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f001 fd3e 	bl	800894c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ed0:	e01d      	b.n	8006f0e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f001 fcbc 	bl	8008852 <USBD_CtlError>
            ret = USBD_FAIL;
 8006eda:	2303      	movs	r3, #3
 8006edc:	75fb      	strb	r3, [r7, #23]
          break;
 8006ede:	e016      	b.n	8006f0e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b03      	cmp	r3, #3
 8006eea:	d00f      	beq.n	8006f0c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006eec:	6839      	ldr	r1, [r7, #0]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f001 fcaf 	bl	8008852 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ef8:	e008      	b.n	8006f0c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f001 fca8 	bl	8008852 <USBD_CtlError>
          ret = USBD_FAIL;
 8006f02:	2303      	movs	r3, #3
 8006f04:	75fb      	strb	r3, [r7, #23]
          break;
 8006f06:	e002      	b.n	8006f0e <USBD_CDC_Setup+0x19e>
          break;
 8006f08:	bf00      	nop
 8006f0a:	e008      	b.n	8006f1e <USBD_CDC_Setup+0x1ae>
          break;
 8006f0c:	bf00      	nop
      }
      break;
 8006f0e:	e006      	b.n	8006f1e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f001 fc9d 	bl	8008852 <USBD_CtlError>
      ret = USBD_FAIL;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f1c:	bf00      	nop
  }

  return (uint8_t)ret;
 8006f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3718      	adds	r7, #24
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	460b      	mov	r3, r1
 8006f32:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006f3a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	32b0      	adds	r2, #176	@ 0xb0
 8006f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d101      	bne.n	8006f52 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e065      	b.n	800701e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	32b0      	adds	r2, #176	@ 0xb0
 8006f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f60:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f62:	78fb      	ldrb	r3, [r7, #3]
 8006f64:	f003 020f 	and.w	r2, r3, #15
 8006f68:	6879      	ldr	r1, [r7, #4]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	440b      	add	r3, r1
 8006f74:	3314      	adds	r3, #20
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d02f      	beq.n	8006fdc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006f7c:	78fb      	ldrb	r3, [r7, #3]
 8006f7e:	f003 020f 	and.w	r2, r3, #15
 8006f82:	6879      	ldr	r1, [r7, #4]
 8006f84:	4613      	mov	r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	4413      	add	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	440b      	add	r3, r1
 8006f8e:	3314      	adds	r3, #20
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	78fb      	ldrb	r3, [r7, #3]
 8006f94:	f003 010f 	and.w	r1, r3, #15
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	00db      	lsls	r3, r3, #3
 8006f9e:	440b      	add	r3, r1
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4403      	add	r3, r0
 8006fa4:	331c      	adds	r3, #28
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	fbb2 f1f3 	udiv	r1, r2, r3
 8006fac:	fb01 f303 	mul.w	r3, r1, r3
 8006fb0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d112      	bne.n	8006fdc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006fb6:	78fb      	ldrb	r3, [r7, #3]
 8006fb8:	f003 020f 	and.w	r2, r3, #15
 8006fbc:	6879      	ldr	r1, [r7, #4]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	440b      	add	r3, r1
 8006fc8:	3314      	adds	r3, #20
 8006fca:	2200      	movs	r2, #0
 8006fcc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006fce:	78f9      	ldrb	r1, [r7, #3]
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f002 f9b8 	bl	800934a <USBD_LL_Transmit>
 8006fda:	e01f      	b.n	800701c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	33b0      	adds	r3, #176	@ 0xb0
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d010      	beq.n	800701c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	33b0      	adds	r3, #176	@ 0xb0
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007018:	78fa      	ldrb	r2, [r7, #3]
 800701a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b084      	sub	sp, #16
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
 800702e:	460b      	mov	r3, r1
 8007030:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	32b0      	adds	r2, #176	@ 0xb0
 800703c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007040:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	32b0      	adds	r2, #176	@ 0xb0
 800704c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007054:	2303      	movs	r3, #3
 8007056:	e01a      	b.n	800708e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007058:	78fb      	ldrb	r3, [r7, #3]
 800705a:	4619      	mov	r1, r3
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f002 f9b6 	bl	80093ce <USBD_LL_GetRxDataSize>
 8007062:	4602      	mov	r2, r0
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	33b0      	adds	r3, #176	@ 0xb0
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007088:	4611      	mov	r1, r2
 800708a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b084      	sub	sp, #16
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	32b0      	adds	r2, #176	@ 0xb0
 80070a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e024      	b.n	8007102 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	33b0      	adds	r3, #176	@ 0xb0
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d019      	beq.n	8007100 <USBD_CDC_EP0_RxReady+0x6a>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80070d2:	2bff      	cmp	r3, #255	@ 0xff
 80070d4:	d014      	beq.n	8007100 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	33b0      	adds	r3, #176	@ 0xb0
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80070ee:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80070f6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	22ff      	movs	r2, #255	@ 0xff
 80070fc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
	...

0800710c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007114:	2182      	movs	r1, #130	@ 0x82
 8007116:	4818      	ldr	r0, [pc, #96]	@ (8007178 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007118:	f000 fd62 	bl	8007be0 <USBD_GetEpDesc>
 800711c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800711e:	2101      	movs	r1, #1
 8007120:	4815      	ldr	r0, [pc, #84]	@ (8007178 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007122:	f000 fd5d 	bl	8007be0 <USBD_GetEpDesc>
 8007126:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007128:	2181      	movs	r1, #129	@ 0x81
 800712a:	4813      	ldr	r0, [pc, #76]	@ (8007178 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800712c:	f000 fd58 	bl	8007be0 <USBD_GetEpDesc>
 8007130:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	2210      	movs	r2, #16
 800713c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d006      	beq.n	8007152 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	2200      	movs	r2, #0
 8007148:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800714c:	711a      	strb	r2, [r3, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d006      	beq.n	8007166 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007160:	711a      	strb	r2, [r3, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2243      	movs	r2, #67	@ 0x43
 800716a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800716c:	4b02      	ldr	r3, [pc, #8]	@ (8007178 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800716e:	4618      	mov	r0, r3
 8007170:	3718      	adds	r7, #24
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20000050 	.word	0x20000050

0800717c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007184:	2182      	movs	r1, #130	@ 0x82
 8007186:	4818      	ldr	r0, [pc, #96]	@ (80071e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007188:	f000 fd2a 	bl	8007be0 <USBD_GetEpDesc>
 800718c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800718e:	2101      	movs	r1, #1
 8007190:	4815      	ldr	r0, [pc, #84]	@ (80071e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007192:	f000 fd25 	bl	8007be0 <USBD_GetEpDesc>
 8007196:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007198:	2181      	movs	r1, #129	@ 0x81
 800719a:	4813      	ldr	r0, [pc, #76]	@ (80071e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800719c:	f000 fd20 	bl	8007be0 <USBD_GetEpDesc>
 80071a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d002      	beq.n	80071ae <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	2210      	movs	r2, #16
 80071ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d006      	beq.n	80071c2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	2200      	movs	r2, #0
 80071b8:	711a      	strb	r2, [r3, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f042 0202 	orr.w	r2, r2, #2
 80071c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d006      	beq.n	80071d6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	711a      	strb	r2, [r3, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f042 0202 	orr.w	r2, r2, #2
 80071d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2243      	movs	r2, #67	@ 0x43
 80071da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80071dc:	4b02      	ldr	r3, [pc, #8]	@ (80071e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3718      	adds	r7, #24
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	20000050 	.word	0x20000050

080071ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80071f4:	2182      	movs	r1, #130	@ 0x82
 80071f6:	4818      	ldr	r0, [pc, #96]	@ (8007258 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071f8:	f000 fcf2 	bl	8007be0 <USBD_GetEpDesc>
 80071fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80071fe:	2101      	movs	r1, #1
 8007200:	4815      	ldr	r0, [pc, #84]	@ (8007258 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007202:	f000 fced 	bl	8007be0 <USBD_GetEpDesc>
 8007206:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007208:	2181      	movs	r1, #129	@ 0x81
 800720a:	4813      	ldr	r0, [pc, #76]	@ (8007258 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800720c:	f000 fce8 	bl	8007be0 <USBD_GetEpDesc>
 8007210:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d002      	beq.n	800721e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	2210      	movs	r2, #16
 800721c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d006      	beq.n	8007232 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	2200      	movs	r2, #0
 8007228:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800722c:	711a      	strb	r2, [r3, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d006      	beq.n	8007246 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007240:	711a      	strb	r2, [r3, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2243      	movs	r2, #67	@ 0x43
 800724a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800724c:	4b02      	ldr	r3, [pc, #8]	@ (8007258 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800724e:	4618      	mov	r0, r3
 8007250:	3718      	adds	r7, #24
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	20000050 	.word	0x20000050

0800725c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	220a      	movs	r2, #10
 8007268:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800726a:	4b03      	ldr	r3, [pc, #12]	@ (8007278 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800726c:	4618      	mov	r0, r3
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr
 8007278:	2000000c 	.word	0x2000000c

0800727c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d101      	bne.n	8007290 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800728c:	2303      	movs	r3, #3
 800728e:	e009      	b.n	80072a4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	33b0      	adds	r3, #176	@ 0xb0
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	32b0      	adds	r2, #176	@ 0xb0
 80072c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ca:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e008      	b.n	80072e8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	371c      	adds	r7, #28
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	32b0      	adds	r2, #176	@ 0xb0
 8007308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800730c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d101      	bne.n	8007318 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007314:	2303      	movs	r3, #3
 8007316:	e004      	b.n	8007322 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
	...

08007330 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	32b0      	adds	r2, #176	@ 0xb0
 8007342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007346:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007348:	2301      	movs	r3, #1
 800734a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007352:	2303      	movs	r3, #3
 8007354:	e025      	b.n	80073a2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800735c:	2b00      	cmp	r3, #0
 800735e:	d11f      	bne.n	80073a0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	2201      	movs	r2, #1
 8007364:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007368:	4b10      	ldr	r3, [pc, #64]	@ (80073ac <USBD_CDC_TransmitPacket+0x7c>)
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	f003 020f 	and.w	r2, r3, #15
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	4613      	mov	r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4413      	add	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4403      	add	r3, r0
 8007382:	3314      	adds	r3, #20
 8007384:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007386:	4b09      	ldr	r3, [pc, #36]	@ (80073ac <USBD_CDC_TransmitPacket+0x7c>)
 8007388:	7819      	ldrb	r1, [r3, #0]
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f001 ffd7 	bl	800934a <USBD_LL_Transmit>

    ret = USBD_OK;
 800739c:	2300      	movs	r3, #0
 800739e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80073a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	20000093 	.word	0x20000093

080073b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	32b0      	adds	r2, #176	@ 0xb0
 80073c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	32b0      	adds	r2, #176	@ 0xb0
 80073d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d101      	bne.n	80073de <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80073da:	2303      	movs	r3, #3
 80073dc:	e018      	b.n	8007410 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	7c1b      	ldrb	r3, [r3, #16]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d10a      	bne.n	80073fc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80073e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007418 <USBD_CDC_ReceivePacket+0x68>)
 80073e8:	7819      	ldrb	r1, [r3, #0]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80073f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f001 ffc9 	bl	800938c <USBD_LL_PrepareReceive>
 80073fa:	e008      	b.n	800740e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80073fc:	4b06      	ldr	r3, [pc, #24]	@ (8007418 <USBD_CDC_ReceivePacket+0x68>)
 80073fe:	7819      	ldrb	r1, [r3, #0]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007406:	2340      	movs	r3, #64	@ 0x40
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f001 ffbf 	bl	800938c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	20000094 	.word	0x20000094

0800741c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	4613      	mov	r3, r2
 8007428:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d101      	bne.n	8007434 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007430:	2303      	movs	r3, #3
 8007432:	e01f      	b.n	8007474 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d003      	beq.n	800745a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	79fa      	ldrb	r2, [r7, #7]
 8007466:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f001 fe39 	bl	80090e0 <USBD_LL_Init>
 800746e:	4603      	mov	r3, r0
 8007470:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007472:	7dfb      	ldrb	r3, [r7, #23]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3718      	adds	r7, #24
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007486:	2300      	movs	r3, #0
 8007488:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d101      	bne.n	8007494 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007490:	2303      	movs	r3, #3
 8007492:	e025      	b.n	80074e0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	683a      	ldr	r2, [r7, #0]
 8007498:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	32ae      	adds	r2, #174	@ 0xae
 80074a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00f      	beq.n	80074d0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	32ae      	adds	r2, #174	@ 0xae
 80074ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c0:	f107 020e 	add.w	r2, r7, #14
 80074c4:	4610      	mov	r0, r2
 80074c6:	4798      	blx	r3
 80074c8:	4602      	mov	r2, r0
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80074d6:	1c5a      	adds	r2, r3, #1
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f001 fe41 	bl	8009178 <USBD_LL_Start>
 80074f6:	4603      	mov	r3, r0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007508:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800750a:	4618      	mov	r0, r3
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b084      	sub	sp, #16
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	460b      	mov	r3, r1
 8007520:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007522:	2300      	movs	r3, #0
 8007524:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800752c:	2b00      	cmp	r3, #0
 800752e:	d009      	beq.n	8007544 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	78fa      	ldrb	r2, [r7, #3]
 800753a:	4611      	mov	r1, r2
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	4798      	blx	r3
 8007540:	4603      	mov	r3, r0
 8007542:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007544:	7bfb      	ldrb	r3, [r7, #15]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b084      	sub	sp, #16
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	460b      	mov	r3, r1
 8007558:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800755a:	2300      	movs	r3, #0
 800755c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	78fa      	ldrb	r2, [r7, #3]
 8007568:	4611      	mov	r1, r2
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	4798      	blx	r3
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d001      	beq.n	8007578 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007574:	2303      	movs	r3, #3
 8007576:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007578:	7bfb      	ldrb	r3, [r7, #15]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b084      	sub	sp, #16
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007592:	6839      	ldr	r1, [r7, #0]
 8007594:	4618      	mov	r0, r3
 8007596:	f001 f922 	bl	80087de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80075a8:	461a      	mov	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80075b6:	f003 031f 	and.w	r3, r3, #31
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d01a      	beq.n	80075f4 <USBD_LL_SetupStage+0x72>
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d822      	bhi.n	8007608 <USBD_LL_SetupStage+0x86>
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d002      	beq.n	80075cc <USBD_LL_SetupStage+0x4a>
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d00a      	beq.n	80075e0 <USBD_LL_SetupStage+0x5e>
 80075ca:	e01d      	b.n	8007608 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80075d2:	4619      	mov	r1, r3
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 fb77 	bl	8007cc8 <USBD_StdDevReq>
 80075da:	4603      	mov	r3, r0
 80075dc:	73fb      	strb	r3, [r7, #15]
      break;
 80075de:	e020      	b.n	8007622 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80075e6:	4619      	mov	r1, r3
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 fbdf 	bl	8007dac <USBD_StdItfReq>
 80075ee:	4603      	mov	r3, r0
 80075f0:	73fb      	strb	r3, [r7, #15]
      break;
 80075f2:	e016      	b.n	8007622 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 fc41 	bl	8007e84 <USBD_StdEPReq>
 8007602:	4603      	mov	r3, r0
 8007604:	73fb      	strb	r3, [r7, #15]
      break;
 8007606:	e00c      	b.n	8007622 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800760e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007612:	b2db      	uxtb	r3, r3
 8007614:	4619      	mov	r1, r3
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f001 fe0e 	bl	8009238 <USBD_LL_StallEP>
 800761c:	4603      	mov	r3, r0
 800761e:	73fb      	strb	r3, [r7, #15]
      break;
 8007620:	bf00      	nop
  }

  return ret;
 8007622:	7bfb      	ldrb	r3, [r7, #15]
}
 8007624:	4618      	mov	r0, r3
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b086      	sub	sp, #24
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	460b      	mov	r3, r1
 8007636:	607a      	str	r2, [r7, #4]
 8007638:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800763e:	7afb      	ldrb	r3, [r7, #11]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d177      	bne.n	8007734 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800764a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007652:	2b03      	cmp	r3, #3
 8007654:	f040 80a1 	bne.w	800779a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	8992      	ldrh	r2, [r2, #12]
 8007660:	4293      	cmp	r3, r2
 8007662:	d91c      	bls.n	800769e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	693a      	ldr	r2, [r7, #16]
 800766a:	8992      	ldrh	r2, [r2, #12]
 800766c:	1a9a      	subs	r2, r3, r2
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	8992      	ldrh	r2, [r2, #12]
 800767a:	441a      	add	r2, r3
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	6919      	ldr	r1, [r3, #16]
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	899b      	ldrh	r3, [r3, #12]
 8007688:	461a      	mov	r2, r3
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	4293      	cmp	r3, r2
 8007690:	bf38      	it	cc
 8007692:	4613      	movcc	r3, r2
 8007694:	461a      	mov	r2, r3
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f001 f9a8 	bl	80089ec <USBD_CtlContinueRx>
 800769c:	e07d      	b.n	800779a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80076a4:	f003 031f 	and.w	r3, r3, #31
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d014      	beq.n	80076d6 <USBD_LL_DataOutStage+0xaa>
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d81d      	bhi.n	80076ec <USBD_LL_DataOutStage+0xc0>
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d002      	beq.n	80076ba <USBD_LL_DataOutStage+0x8e>
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d003      	beq.n	80076c0 <USBD_LL_DataOutStage+0x94>
 80076b8:	e018      	b.n	80076ec <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80076ba:	2300      	movs	r3, #0
 80076bc:	75bb      	strb	r3, [r7, #22]
            break;
 80076be:	e018      	b.n	80076f2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	4619      	mov	r1, r3
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f000 fa6e 	bl	8007bac <USBD_CoreFindIF>
 80076d0:	4603      	mov	r3, r0
 80076d2:	75bb      	strb	r3, [r7, #22]
            break;
 80076d4:	e00d      	b.n	80076f2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	4619      	mov	r1, r3
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 fa70 	bl	8007bc6 <USBD_CoreFindEP>
 80076e6:	4603      	mov	r3, r0
 80076e8:	75bb      	strb	r3, [r7, #22]
            break;
 80076ea:	e002      	b.n	80076f2 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80076ec:	2300      	movs	r3, #0
 80076ee:	75bb      	strb	r3, [r7, #22]
            break;
 80076f0:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80076f2:	7dbb      	ldrb	r3, [r7, #22]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d119      	bne.n	800772c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	2b03      	cmp	r3, #3
 8007702:	d113      	bne.n	800772c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007704:	7dba      	ldrb	r2, [r7, #22]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	32ae      	adds	r2, #174	@ 0xae
 800770a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00b      	beq.n	800772c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8007714:	7dba      	ldrb	r2, [r7, #22]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800771c:	7dba      	ldrb	r2, [r7, #22]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	32ae      	adds	r2, #174	@ 0xae
 8007722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f001 f96e 	bl	8008a0e <USBD_CtlSendStatus>
 8007732:	e032      	b.n	800779a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007734:	7afb      	ldrb	r3, [r7, #11]
 8007736:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800773a:	b2db      	uxtb	r3, r3
 800773c:	4619      	mov	r1, r3
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f000 fa41 	bl	8007bc6 <USBD_CoreFindEP>
 8007744:	4603      	mov	r3, r0
 8007746:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007748:	7dbb      	ldrb	r3, [r7, #22]
 800774a:	2bff      	cmp	r3, #255	@ 0xff
 800774c:	d025      	beq.n	800779a <USBD_LL_DataOutStage+0x16e>
 800774e:	7dbb      	ldrb	r3, [r7, #22]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d122      	bne.n	800779a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800775a:	b2db      	uxtb	r3, r3
 800775c:	2b03      	cmp	r3, #3
 800775e:	d117      	bne.n	8007790 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007760:	7dba      	ldrb	r2, [r7, #22]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	32ae      	adds	r2, #174	@ 0xae
 8007766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00f      	beq.n	8007790 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007770:	7dba      	ldrb	r2, [r7, #22]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007778:	7dba      	ldrb	r2, [r7, #22]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	32ae      	adds	r2, #174	@ 0xae
 800777e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	7afa      	ldrb	r2, [r7, #11]
 8007786:	4611      	mov	r1, r2
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	4798      	blx	r3
 800778c:	4603      	mov	r3, r0
 800778e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007790:	7dfb      	ldrb	r3, [r7, #23]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8007796:	7dfb      	ldrb	r3, [r7, #23]
 8007798:	e000      	b.n	800779c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3718      	adds	r7, #24
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b086      	sub	sp, #24
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	460b      	mov	r3, r1
 80077ae:	607a      	str	r2, [r7, #4]
 80077b0:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80077b2:	7afb      	ldrb	r3, [r7, #11]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d178      	bne.n	80078aa <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	3314      	adds	r3, #20
 80077bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d163      	bne.n	8007890 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	8992      	ldrh	r2, [r2, #12]
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d91c      	bls.n	800780e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	8992      	ldrh	r2, [r2, #12]
 80077dc:	1a9a      	subs	r2, r3, r2
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	8992      	ldrh	r2, [r2, #12]
 80077ea:	441a      	add	r2, r3
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	6919      	ldr	r1, [r3, #16]
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	461a      	mov	r2, r3
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f001 f8c4 	bl	8008988 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007800:	2300      	movs	r3, #0
 8007802:	2200      	movs	r2, #0
 8007804:	2100      	movs	r1, #0
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f001 fdc0 	bl	800938c <USBD_LL_PrepareReceive>
 800780c:	e040      	b.n	8007890 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	899b      	ldrh	r3, [r3, #12]
 8007812:	461a      	mov	r2, r3
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	429a      	cmp	r2, r3
 800781a:	d11c      	bne.n	8007856 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007824:	4293      	cmp	r3, r2
 8007826:	d316      	bcc.n	8007856 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007832:	429a      	cmp	r2, r3
 8007834:	d20f      	bcs.n	8007856 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007836:	2200      	movs	r2, #0
 8007838:	2100      	movs	r1, #0
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f001 f8a4 	bl	8008988 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007848:	2300      	movs	r3, #0
 800784a:	2200      	movs	r2, #0
 800784c:	2100      	movs	r1, #0
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f001 fd9c 	bl	800938c <USBD_LL_PrepareReceive>
 8007854:	e01c      	b.n	8007890 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b03      	cmp	r3, #3
 8007860:	d10f      	bne.n	8007882 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d009      	beq.n	8007882 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007882:	2180      	movs	r1, #128	@ 0x80
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f001 fcd7 	bl	8009238 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f001 f8d2 	bl	8008a34 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d03a      	beq.n	8007910 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f7ff fe30 	bl	8007500 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80078a8:	e032      	b.n	8007910 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80078aa:	7afb      	ldrb	r3, [r7, #11]
 80078ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	4619      	mov	r1, r3
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f000 f986 	bl	8007bc6 <USBD_CoreFindEP>
 80078ba:	4603      	mov	r3, r0
 80078bc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078be:	7dfb      	ldrb	r3, [r7, #23]
 80078c0:	2bff      	cmp	r3, #255	@ 0xff
 80078c2:	d025      	beq.n	8007910 <USBD_LL_DataInStage+0x16c>
 80078c4:	7dfb      	ldrb	r3, [r7, #23]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d122      	bne.n	8007910 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d11c      	bne.n	8007910 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80078d6:	7dfa      	ldrb	r2, [r7, #23]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	32ae      	adds	r2, #174	@ 0xae
 80078dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d014      	beq.n	8007910 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 80078e6:	7dfa      	ldrb	r2, [r7, #23]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80078ee:	7dfa      	ldrb	r2, [r7, #23]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	32ae      	adds	r2, #174	@ 0xae
 80078f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	7afa      	ldrb	r2, [r7, #11]
 80078fc:	4611      	mov	r1, r2
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	4798      	blx	r3
 8007902:	4603      	mov	r3, r0
 8007904:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007906:	7dbb      	ldrb	r3, [r7, #22]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d001      	beq.n	8007910 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800790c:	7dbb      	ldrb	r3, [r7, #22]
 800790e:	e000      	b.n	8007912 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3718      	adds	r7, #24
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b084      	sub	sp, #16
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007952:	2b00      	cmp	r3, #0
 8007954:	d014      	beq.n	8007980 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00e      	beq.n	8007980 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	6852      	ldr	r2, [r2, #4]
 800796e:	b2d2      	uxtb	r2, r2
 8007970:	4611      	mov	r1, r2
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	4798      	blx	r3
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d001      	beq.n	8007980 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800797c:	2303      	movs	r3, #3
 800797e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007980:	2340      	movs	r3, #64	@ 0x40
 8007982:	2200      	movs	r2, #0
 8007984:	2100      	movs	r1, #0
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f001 fc11 	bl	80091ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2240      	movs	r2, #64	@ 0x40
 8007998:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800799c:	2340      	movs	r3, #64	@ 0x40
 800799e:	2200      	movs	r2, #0
 80079a0:	2180      	movs	r1, #128	@ 0x80
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f001 fc03 	bl	80091ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2240      	movs	r2, #64	@ 0x40
 80079b4:	841a      	strh	r2, [r3, #32]

  return ret;
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	460b      	mov	r3, r1
 80079ca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	78fa      	ldrb	r2, [r7, #3]
 80079d0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	d006      	beq.n	8007a02 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2204      	movs	r2, #4
 8007a06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b04      	cmp	r3, #4
 8007a2a:	d106      	bne.n	8007a3a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007a32:	b2da      	uxtb	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b03      	cmp	r3, #3
 8007a5a:	d110      	bne.n	8007a7e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00b      	beq.n	8007a7e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a6c:	69db      	ldr	r3, [r3, #28]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d005      	beq.n	8007a7e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a78:	69db      	ldr	r3, [r3, #28]
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	460b      	mov	r3, r1
 8007a92:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	32ae      	adds	r2, #174	@ 0xae
 8007a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e01c      	b.n	8007ae4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b03      	cmp	r3, #3
 8007ab4:	d115      	bne.n	8007ae2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	32ae      	adds	r2, #174	@ 0xae
 8007ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00b      	beq.n	8007ae2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	32ae      	adds	r2, #174	@ 0xae
 8007ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	78fa      	ldrb	r2, [r7, #3]
 8007adc:	4611      	mov	r1, r2
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	460b      	mov	r3, r1
 8007af6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	32ae      	adds	r2, #174	@ 0xae
 8007b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d101      	bne.n	8007b0e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e01c      	b.n	8007b48 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d115      	bne.n	8007b46 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	32ae      	adds	r2, #174	@ 0xae
 8007b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00b      	beq.n	8007b46 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	32ae      	adds	r2, #174	@ 0xae
 8007b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3e:	78fa      	ldrb	r2, [r7, #3]
 8007b40:	4611      	mov	r1, r2
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b084      	sub	sp, #16
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00e      	beq.n	8007ba2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	6852      	ldr	r2, [r2, #4]
 8007b90:	b2d2      	uxtb	r2, r2
 8007b92:	4611      	mov	r1, r2
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	4798      	blx	r3
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d001      	beq.n	8007ba2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007bb8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr

08007bc6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007bc6:	b480      	push	{r7}
 8007bc8:	b083      	sub	sp, #12
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	460b      	mov	r3, r1
 8007bd0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007bd2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	460b      	mov	r3, r1
 8007bea:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	885b      	ldrh	r3, [r3, #2]
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	7812      	ldrb	r2, [r2, #0]
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d91f      	bls.n	8007c46 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007c0c:	e013      	b.n	8007c36 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007c0e:	f107 030a 	add.w	r3, r7, #10
 8007c12:	4619      	mov	r1, r3
 8007c14:	6978      	ldr	r0, [r7, #20]
 8007c16:	f000 f81b 	bl	8007c50 <USBD_GetNextDesc>
 8007c1a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	785b      	ldrb	r3, [r3, #1]
 8007c20:	2b05      	cmp	r3, #5
 8007c22:	d108      	bne.n	8007c36 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	789b      	ldrb	r3, [r3, #2]
 8007c2c:	78fa      	ldrb	r2, [r7, #3]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d008      	beq.n	8007c44 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007c32:	2300      	movs	r3, #0
 8007c34:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	885b      	ldrh	r3, [r3, #2]
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	897b      	ldrh	r3, [r7, #10]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d8e5      	bhi.n	8007c0e <USBD_GetEpDesc+0x2e>
 8007c42:	e000      	b.n	8007c46 <USBD_GetEpDesc+0x66>
          break;
 8007c44:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007c46:	693b      	ldr	r3, [r7, #16]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3718      	adds	r7, #24
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	881b      	ldrh	r3, [r3, #0]
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	7812      	ldrb	r2, [r2, #0]
 8007c66:	4413      	add	r3, r2
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	461a      	mov	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4413      	add	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b087      	sub	sp, #28
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007ca6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007caa:	021b      	lsls	r3, r3, #8
 8007cac:	b21a      	sxth	r2, r3
 8007cae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	b21b      	sxth	r3, r3
 8007cb6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007cb8:	89fb      	ldrh	r3, [r7, #14]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	371c      	adds	r7, #28
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
	...

08007cc8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007cde:	2b40      	cmp	r3, #64	@ 0x40
 8007ce0:	d005      	beq.n	8007cee <USBD_StdDevReq+0x26>
 8007ce2:	2b40      	cmp	r3, #64	@ 0x40
 8007ce4:	d857      	bhi.n	8007d96 <USBD_StdDevReq+0xce>
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00f      	beq.n	8007d0a <USBD_StdDevReq+0x42>
 8007cea:	2b20      	cmp	r3, #32
 8007cec:	d153      	bne.n	8007d96 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	32ae      	adds	r2, #174	@ 0xae
 8007cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	4798      	blx	r3
 8007d04:	4603      	mov	r3, r0
 8007d06:	73fb      	strb	r3, [r7, #15]
      break;
 8007d08:	e04a      	b.n	8007da0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	785b      	ldrb	r3, [r3, #1]
 8007d0e:	2b09      	cmp	r3, #9
 8007d10:	d83b      	bhi.n	8007d8a <USBD_StdDevReq+0xc2>
 8007d12:	a201      	add	r2, pc, #4	@ (adr r2, 8007d18 <USBD_StdDevReq+0x50>)
 8007d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d18:	08007d6d 	.word	0x08007d6d
 8007d1c:	08007d81 	.word	0x08007d81
 8007d20:	08007d8b 	.word	0x08007d8b
 8007d24:	08007d77 	.word	0x08007d77
 8007d28:	08007d8b 	.word	0x08007d8b
 8007d2c:	08007d4b 	.word	0x08007d4b
 8007d30:	08007d41 	.word	0x08007d41
 8007d34:	08007d8b 	.word	0x08007d8b
 8007d38:	08007d63 	.word	0x08007d63
 8007d3c:	08007d55 	.word	0x08007d55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fa3e 	bl	80081c4 <USBD_GetDescriptor>
          break;
 8007d48:	e024      	b.n	8007d94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fba3 	bl	8008498 <USBD_SetAddress>
          break;
 8007d52:	e01f      	b.n	8007d94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fbe2 	bl	8008520 <USBD_SetConfig>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	73fb      	strb	r3, [r7, #15]
          break;
 8007d60:	e018      	b.n	8007d94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fc85 	bl	8008674 <USBD_GetConfig>
          break;
 8007d6a:	e013      	b.n	8007d94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fcb6 	bl	80086e0 <USBD_GetStatus>
          break;
 8007d74:	e00e      	b.n	8007d94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d76:	6839      	ldr	r1, [r7, #0]
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 fce5 	bl	8008748 <USBD_SetFeature>
          break;
 8007d7e:	e009      	b.n	8007d94 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fd09 	bl	800879a <USBD_ClrFeature>
          break;
 8007d88:	e004      	b.n	8007d94 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 fd60 	bl	8008852 <USBD_CtlError>
          break;
 8007d92:	bf00      	nop
      }
      break;
 8007d94:	e004      	b.n	8007da0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007d96:	6839      	ldr	r1, [r7, #0]
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fd5a 	bl	8008852 <USBD_CtlError>
      break;
 8007d9e:	bf00      	nop
  }

  return ret;
 8007da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop

08007dac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007db6:	2300      	movs	r3, #0
 8007db8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007dc2:	2b40      	cmp	r3, #64	@ 0x40
 8007dc4:	d005      	beq.n	8007dd2 <USBD_StdItfReq+0x26>
 8007dc6:	2b40      	cmp	r3, #64	@ 0x40
 8007dc8:	d852      	bhi.n	8007e70 <USBD_StdItfReq+0xc4>
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d001      	beq.n	8007dd2 <USBD_StdItfReq+0x26>
 8007dce:	2b20      	cmp	r3, #32
 8007dd0:	d14e      	bne.n	8007e70 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	d840      	bhi.n	8007e62 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	889b      	ldrh	r3, [r3, #4]
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d836      	bhi.n	8007e58 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	889b      	ldrh	r3, [r3, #4]
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	4619      	mov	r1, r3
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f7ff feda 	bl	8007bac <USBD_CoreFindIF>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007dfc:	7bbb      	ldrb	r3, [r7, #14]
 8007dfe:	2bff      	cmp	r3, #255	@ 0xff
 8007e00:	d01d      	beq.n	8007e3e <USBD_StdItfReq+0x92>
 8007e02:	7bbb      	ldrb	r3, [r7, #14]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d11a      	bne.n	8007e3e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007e08:	7bba      	ldrb	r2, [r7, #14]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	32ae      	adds	r2, #174	@ 0xae
 8007e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00f      	beq.n	8007e38 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007e18:	7bba      	ldrb	r2, [r7, #14]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e20:	7bba      	ldrb	r2, [r7, #14]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	32ae      	adds	r2, #174	@ 0xae
 8007e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	4798      	blx	r3
 8007e32:	4603      	mov	r3, r0
 8007e34:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e36:	e004      	b.n	8007e42 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007e38:	2303      	movs	r3, #3
 8007e3a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e3c:	e001      	b.n	8007e42 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	88db      	ldrh	r3, [r3, #6]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d110      	bne.n	8007e6c <USBD_StdItfReq+0xc0>
 8007e4a:	7bfb      	ldrb	r3, [r7, #15]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10d      	bne.n	8007e6c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fddc 	bl	8008a0e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007e56:	e009      	b.n	8007e6c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fcf9 	bl	8008852 <USBD_CtlError>
          break;
 8007e60:	e004      	b.n	8007e6c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007e62:	6839      	ldr	r1, [r7, #0]
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fcf4 	bl	8008852 <USBD_CtlError>
          break;
 8007e6a:	e000      	b.n	8007e6e <USBD_StdItfReq+0xc2>
          break;
 8007e6c:	bf00      	nop
      }
      break;
 8007e6e:	e004      	b.n	8007e7a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fced 	bl	8008852 <USBD_CtlError>
      break;
 8007e78:	bf00      	nop
  }

  return ret;
 8007e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	889b      	ldrh	r3, [r3, #4]
 8007e96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ea0:	2b40      	cmp	r3, #64	@ 0x40
 8007ea2:	d007      	beq.n	8007eb4 <USBD_StdEPReq+0x30>
 8007ea4:	2b40      	cmp	r3, #64	@ 0x40
 8007ea6:	f200 8181 	bhi.w	80081ac <USBD_StdEPReq+0x328>
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d02a      	beq.n	8007f04 <USBD_StdEPReq+0x80>
 8007eae:	2b20      	cmp	r3, #32
 8007eb0:	f040 817c 	bne.w	80081ac <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007eb4:	7bbb      	ldrb	r3, [r7, #14]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f7ff fe84 	bl	8007bc6 <USBD_CoreFindEP>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ec2:	7b7b      	ldrb	r3, [r7, #13]
 8007ec4:	2bff      	cmp	r3, #255	@ 0xff
 8007ec6:	f000 8176 	beq.w	80081b6 <USBD_StdEPReq+0x332>
 8007eca:	7b7b      	ldrb	r3, [r7, #13]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f040 8172 	bne.w	80081b6 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8007ed2:	7b7a      	ldrb	r2, [r7, #13]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007eda:	7b7a      	ldrb	r2, [r7, #13]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	32ae      	adds	r2, #174	@ 0xae
 8007ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f000 8165 	beq.w	80081b6 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007eec:	7b7a      	ldrb	r2, [r7, #13]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	32ae      	adds	r2, #174	@ 0xae
 8007ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	4798      	blx	r3
 8007efe:	4603      	mov	r3, r0
 8007f00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f02:	e158      	b.n	80081b6 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	785b      	ldrb	r3, [r3, #1]
 8007f08:	2b03      	cmp	r3, #3
 8007f0a:	d008      	beq.n	8007f1e <USBD_StdEPReq+0x9a>
 8007f0c:	2b03      	cmp	r3, #3
 8007f0e:	f300 8147 	bgt.w	80081a0 <USBD_StdEPReq+0x31c>
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 809b 	beq.w	800804e <USBD_StdEPReq+0x1ca>
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d03c      	beq.n	8007f96 <USBD_StdEPReq+0x112>
 8007f1c:	e140      	b.n	80081a0 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d002      	beq.n	8007f30 <USBD_StdEPReq+0xac>
 8007f2a:	2b03      	cmp	r3, #3
 8007f2c:	d016      	beq.n	8007f5c <USBD_StdEPReq+0xd8>
 8007f2e:	e02c      	b.n	8007f8a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f30:	7bbb      	ldrb	r3, [r7, #14]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00d      	beq.n	8007f52 <USBD_StdEPReq+0xce>
 8007f36:	7bbb      	ldrb	r3, [r7, #14]
 8007f38:	2b80      	cmp	r3, #128	@ 0x80
 8007f3a:	d00a      	beq.n	8007f52 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f3c:	7bbb      	ldrb	r3, [r7, #14]
 8007f3e:	4619      	mov	r1, r3
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f001 f979 	bl	8009238 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f46:	2180      	movs	r1, #128	@ 0x80
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f001 f975 	bl	8009238 <USBD_LL_StallEP>
 8007f4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f50:	e020      	b.n	8007f94 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007f52:	6839      	ldr	r1, [r7, #0]
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fc7c 	bl	8008852 <USBD_CtlError>
              break;
 8007f5a:	e01b      	b.n	8007f94 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	885b      	ldrh	r3, [r3, #2]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10e      	bne.n	8007f82 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f64:	7bbb      	ldrb	r3, [r7, #14]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00b      	beq.n	8007f82 <USBD_StdEPReq+0xfe>
 8007f6a:	7bbb      	ldrb	r3, [r7, #14]
 8007f6c:	2b80      	cmp	r3, #128	@ 0x80
 8007f6e:	d008      	beq.n	8007f82 <USBD_StdEPReq+0xfe>
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	88db      	ldrh	r3, [r3, #6]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d104      	bne.n	8007f82 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f78:	7bbb      	ldrb	r3, [r7, #14]
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f001 f95b 	bl	8009238 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fd43 	bl	8008a0e <USBD_CtlSendStatus>

              break;
 8007f88:	e004      	b.n	8007f94 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007f8a:	6839      	ldr	r1, [r7, #0]
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fc60 	bl	8008852 <USBD_CtlError>
              break;
 8007f92:	bf00      	nop
          }
          break;
 8007f94:	e109      	b.n	80081aa <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d002      	beq.n	8007fa8 <USBD_StdEPReq+0x124>
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	d016      	beq.n	8007fd4 <USBD_StdEPReq+0x150>
 8007fa6:	e04b      	b.n	8008040 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fa8:	7bbb      	ldrb	r3, [r7, #14]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00d      	beq.n	8007fca <USBD_StdEPReq+0x146>
 8007fae:	7bbb      	ldrb	r3, [r7, #14]
 8007fb0:	2b80      	cmp	r3, #128	@ 0x80
 8007fb2:	d00a      	beq.n	8007fca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fb4:	7bbb      	ldrb	r3, [r7, #14]
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f001 f93d 	bl	8009238 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fbe:	2180      	movs	r1, #128	@ 0x80
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f001 f939 	bl	8009238 <USBD_LL_StallEP>
 8007fc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fc8:	e040      	b.n	800804c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 fc40 	bl	8008852 <USBD_CtlError>
              break;
 8007fd2:	e03b      	b.n	800804c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	885b      	ldrh	r3, [r3, #2]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d136      	bne.n	800804a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007fdc:	7bbb      	ldrb	r3, [r7, #14]
 8007fde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d004      	beq.n	8007ff0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007fe6:	7bbb      	ldrb	r3, [r7, #14]
 8007fe8:	4619      	mov	r1, r3
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f001 f943 	bl	8009276 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fd0c 	bl	8008a0e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f7ff fde3 	bl	8007bc6 <USBD_CoreFindEP>
 8008000:	4603      	mov	r3, r0
 8008002:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008004:	7b7b      	ldrb	r3, [r7, #13]
 8008006:	2bff      	cmp	r3, #255	@ 0xff
 8008008:	d01f      	beq.n	800804a <USBD_StdEPReq+0x1c6>
 800800a:	7b7b      	ldrb	r3, [r7, #13]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d11c      	bne.n	800804a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008010:	7b7a      	ldrb	r2, [r7, #13]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008018:	7b7a      	ldrb	r2, [r7, #13]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	32ae      	adds	r2, #174	@ 0xae
 800801e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d010      	beq.n	800804a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008028:	7b7a      	ldrb	r2, [r7, #13]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	32ae      	adds	r2, #174	@ 0xae
 800802e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	6839      	ldr	r1, [r7, #0]
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	4798      	blx	r3
 800803a:	4603      	mov	r3, r0
 800803c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800803e:	e004      	b.n	800804a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008040:	6839      	ldr	r1, [r7, #0]
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 fc05 	bl	8008852 <USBD_CtlError>
              break;
 8008048:	e000      	b.n	800804c <USBD_StdEPReq+0x1c8>
              break;
 800804a:	bf00      	nop
          }
          break;
 800804c:	e0ad      	b.n	80081aa <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b02      	cmp	r3, #2
 8008058:	d002      	beq.n	8008060 <USBD_StdEPReq+0x1dc>
 800805a:	2b03      	cmp	r3, #3
 800805c:	d033      	beq.n	80080c6 <USBD_StdEPReq+0x242>
 800805e:	e099      	b.n	8008194 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008060:	7bbb      	ldrb	r3, [r7, #14]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d007      	beq.n	8008076 <USBD_StdEPReq+0x1f2>
 8008066:	7bbb      	ldrb	r3, [r7, #14]
 8008068:	2b80      	cmp	r3, #128	@ 0x80
 800806a:	d004      	beq.n	8008076 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 fbef 	bl	8008852 <USBD_CtlError>
                break;
 8008074:	e093      	b.n	800819e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008076:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800807a:	2b00      	cmp	r3, #0
 800807c:	da0b      	bge.n	8008096 <USBD_StdEPReq+0x212>
 800807e:	7bbb      	ldrb	r3, [r7, #14]
 8008080:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008084:	4613      	mov	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	3310      	adds	r3, #16
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	4413      	add	r3, r2
 8008092:	3304      	adds	r3, #4
 8008094:	e00b      	b.n	80080ae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008096:	7bbb      	ldrb	r3, [r7, #14]
 8008098:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800809c:	4613      	mov	r3, r2
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	4413      	add	r3, r2
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	4413      	add	r3, r2
 80080ac:	3304      	adds	r3, #4
 80080ae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	2200      	movs	r2, #0
 80080b4:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	330e      	adds	r3, #14
 80080ba:	2202      	movs	r2, #2
 80080bc:	4619      	mov	r1, r3
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 fc44 	bl	800894c <USBD_CtlSendData>
              break;
 80080c4:	e06b      	b.n	800819e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80080c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	da11      	bge.n	80080f2 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80080ce:	7bbb      	ldrb	r3, [r7, #14]
 80080d0:	f003 020f 	and.w	r2, r3, #15
 80080d4:	6879      	ldr	r1, [r7, #4]
 80080d6:	4613      	mov	r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4413      	add	r3, r2
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	440b      	add	r3, r1
 80080e0:	3323      	adds	r3, #35	@ 0x23
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d117      	bne.n	8008118 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80080e8:	6839      	ldr	r1, [r7, #0]
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fbb1 	bl	8008852 <USBD_CtlError>
                  break;
 80080f0:	e055      	b.n	800819e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80080f2:	7bbb      	ldrb	r3, [r7, #14]
 80080f4:	f003 020f 	and.w	r2, r3, #15
 80080f8:	6879      	ldr	r1, [r7, #4]
 80080fa:	4613      	mov	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4413      	add	r3, r2
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	440b      	add	r3, r1
 8008104:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d104      	bne.n	8008118 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800810e:	6839      	ldr	r1, [r7, #0]
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 fb9e 	bl	8008852 <USBD_CtlError>
                  break;
 8008116:	e042      	b.n	800819e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008118:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800811c:	2b00      	cmp	r3, #0
 800811e:	da0b      	bge.n	8008138 <USBD_StdEPReq+0x2b4>
 8008120:	7bbb      	ldrb	r3, [r7, #14]
 8008122:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008126:	4613      	mov	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4413      	add	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	3310      	adds	r3, #16
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	4413      	add	r3, r2
 8008134:	3304      	adds	r3, #4
 8008136:	e00b      	b.n	8008150 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008138:	7bbb      	ldrb	r3, [r7, #14]
 800813a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800813e:	4613      	mov	r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	4413      	add	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	4413      	add	r3, r2
 800814e:	3304      	adds	r3, #4
 8008150:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008152:	7bbb      	ldrb	r3, [r7, #14]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d002      	beq.n	800815e <USBD_StdEPReq+0x2da>
 8008158:	7bbb      	ldrb	r3, [r7, #14]
 800815a:	2b80      	cmp	r3, #128	@ 0x80
 800815c:	d103      	bne.n	8008166 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	2200      	movs	r2, #0
 8008162:	739a      	strb	r2, [r3, #14]
 8008164:	e00e      	b.n	8008184 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008166:	7bbb      	ldrb	r3, [r7, #14]
 8008168:	4619      	mov	r1, r3
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f001 f8a2 	bl	80092b4 <USBD_LL_IsStallEP>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	2201      	movs	r2, #1
 800817a:	739a      	strb	r2, [r3, #14]
 800817c:	e002      	b.n	8008184 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	2200      	movs	r2, #0
 8008182:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	330e      	adds	r3, #14
 8008188:	2202      	movs	r2, #2
 800818a:	4619      	mov	r1, r3
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fbdd 	bl	800894c <USBD_CtlSendData>
              break;
 8008192:	e004      	b.n	800819e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8008194:	6839      	ldr	r1, [r7, #0]
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fb5b 	bl	8008852 <USBD_CtlError>
              break;
 800819c:	bf00      	nop
          }
          break;
 800819e:	e004      	b.n	80081aa <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fb55 	bl	8008852 <USBD_CtlError>
          break;
 80081a8:	bf00      	nop
      }
      break;
 80081aa:	e005      	b.n	80081b8 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80081ac:	6839      	ldr	r1, [r7, #0]
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fb4f 	bl	8008852 <USBD_CtlError>
      break;
 80081b4:	e000      	b.n	80081b8 <USBD_StdEPReq+0x334>
      break;
 80081b6:	bf00      	nop
  }

  return ret;
 80081b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
	...

080081c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081ce:	2300      	movs	r3, #0
 80081d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80081d2:	2300      	movs	r3, #0
 80081d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80081d6:	2300      	movs	r3, #0
 80081d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	885b      	ldrh	r3, [r3, #2]
 80081de:	0a1b      	lsrs	r3, r3, #8
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	3b01      	subs	r3, #1
 80081e4:	2b06      	cmp	r3, #6
 80081e6:	f200 8128 	bhi.w	800843a <USBD_GetDescriptor+0x276>
 80081ea:	a201      	add	r2, pc, #4	@ (adr r2, 80081f0 <USBD_GetDescriptor+0x2c>)
 80081ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f0:	0800820d 	.word	0x0800820d
 80081f4:	08008225 	.word	0x08008225
 80081f8:	08008265 	.word	0x08008265
 80081fc:	0800843b 	.word	0x0800843b
 8008200:	0800843b 	.word	0x0800843b
 8008204:	080083db 	.word	0x080083db
 8008208:	08008407 	.word	0x08008407
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	7c12      	ldrb	r2, [r2, #16]
 8008218:	f107 0108 	add.w	r1, r7, #8
 800821c:	4610      	mov	r0, r2
 800821e:	4798      	blx	r3
 8008220:	60f8      	str	r0, [r7, #12]
      break;
 8008222:	e112      	b.n	800844a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	7c1b      	ldrb	r3, [r3, #16]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10d      	bne.n	8008248 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008234:	f107 0208 	add.w	r2, r7, #8
 8008238:	4610      	mov	r0, r2
 800823a:	4798      	blx	r3
 800823c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	3301      	adds	r3, #1
 8008242:	2202      	movs	r2, #2
 8008244:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008246:	e100      	b.n	800844a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800824e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008250:	f107 0208 	add.w	r2, r7, #8
 8008254:	4610      	mov	r0, r2
 8008256:	4798      	blx	r3
 8008258:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	3301      	adds	r3, #1
 800825e:	2202      	movs	r2, #2
 8008260:	701a      	strb	r2, [r3, #0]
      break;
 8008262:	e0f2      	b.n	800844a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	885b      	ldrh	r3, [r3, #2]
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b05      	cmp	r3, #5
 800826c:	f200 80ac 	bhi.w	80083c8 <USBD_GetDescriptor+0x204>
 8008270:	a201      	add	r2, pc, #4	@ (adr r2, 8008278 <USBD_GetDescriptor+0xb4>)
 8008272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008276:	bf00      	nop
 8008278:	08008291 	.word	0x08008291
 800827c:	080082c5 	.word	0x080082c5
 8008280:	080082f9 	.word	0x080082f9
 8008284:	0800832d 	.word	0x0800832d
 8008288:	08008361 	.word	0x08008361
 800828c:	08008395 	.word	0x08008395
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00b      	beq.n	80082b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	7c12      	ldrb	r2, [r2, #16]
 80082a8:	f107 0108 	add.w	r1, r7, #8
 80082ac:	4610      	mov	r0, r2
 80082ae:	4798      	blx	r3
 80082b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082b2:	e091      	b.n	80083d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 facb 	bl	8008852 <USBD_CtlError>
            err++;
 80082bc:	7afb      	ldrb	r3, [r7, #11]
 80082be:	3301      	adds	r3, #1
 80082c0:	72fb      	strb	r3, [r7, #11]
          break;
 80082c2:	e089      	b.n	80083d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00b      	beq.n	80082e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	7c12      	ldrb	r2, [r2, #16]
 80082dc:	f107 0108 	add.w	r1, r7, #8
 80082e0:	4610      	mov	r0, r2
 80082e2:	4798      	blx	r3
 80082e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082e6:	e077      	b.n	80083d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082e8:	6839      	ldr	r1, [r7, #0]
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fab1 	bl	8008852 <USBD_CtlError>
            err++;
 80082f0:	7afb      	ldrb	r3, [r7, #11]
 80082f2:	3301      	adds	r3, #1
 80082f4:	72fb      	strb	r3, [r7, #11]
          break;
 80082f6:	e06f      	b.n	80083d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00b      	beq.n	800831c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	7c12      	ldrb	r2, [r2, #16]
 8008310:	f107 0108 	add.w	r1, r7, #8
 8008314:	4610      	mov	r0, r2
 8008316:	4798      	blx	r3
 8008318:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800831a:	e05d      	b.n	80083d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800831c:	6839      	ldr	r1, [r7, #0]
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fa97 	bl	8008852 <USBD_CtlError>
            err++;
 8008324:	7afb      	ldrb	r3, [r7, #11]
 8008326:	3301      	adds	r3, #1
 8008328:	72fb      	strb	r3, [r7, #11]
          break;
 800832a:	e055      	b.n	80083d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00b      	beq.n	8008350 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	7c12      	ldrb	r2, [r2, #16]
 8008344:	f107 0108 	add.w	r1, r7, #8
 8008348:	4610      	mov	r0, r2
 800834a:	4798      	blx	r3
 800834c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800834e:	e043      	b.n	80083d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fa7d 	bl	8008852 <USBD_CtlError>
            err++;
 8008358:	7afb      	ldrb	r3, [r7, #11]
 800835a:	3301      	adds	r3, #1
 800835c:	72fb      	strb	r3, [r7, #11]
          break;
 800835e:	e03b      	b.n	80083d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008366:	695b      	ldr	r3, [r3, #20]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00b      	beq.n	8008384 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008372:	695b      	ldr	r3, [r3, #20]
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	7c12      	ldrb	r2, [r2, #16]
 8008378:	f107 0108 	add.w	r1, r7, #8
 800837c:	4610      	mov	r0, r2
 800837e:	4798      	blx	r3
 8008380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008382:	e029      	b.n	80083d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008384:	6839      	ldr	r1, [r7, #0]
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 fa63 	bl	8008852 <USBD_CtlError>
            err++;
 800838c:	7afb      	ldrb	r3, [r7, #11]
 800838e:	3301      	adds	r3, #1
 8008390:	72fb      	strb	r3, [r7, #11]
          break;
 8008392:	e021      	b.n	80083d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800839a:	699b      	ldr	r3, [r3, #24]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00b      	beq.n	80083b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	7c12      	ldrb	r2, [r2, #16]
 80083ac:	f107 0108 	add.w	r1, r7, #8
 80083b0:	4610      	mov	r0, r2
 80083b2:	4798      	blx	r3
 80083b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083b6:	e00f      	b.n	80083d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083b8:	6839      	ldr	r1, [r7, #0]
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fa49 	bl	8008852 <USBD_CtlError>
            err++;
 80083c0:	7afb      	ldrb	r3, [r7, #11]
 80083c2:	3301      	adds	r3, #1
 80083c4:	72fb      	strb	r3, [r7, #11]
          break;
 80083c6:	e007      	b.n	80083d8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80083c8:	6839      	ldr	r1, [r7, #0]
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 fa41 	bl	8008852 <USBD_CtlError>
          err++;
 80083d0:	7afb      	ldrb	r3, [r7, #11]
 80083d2:	3301      	adds	r3, #1
 80083d4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80083d6:	bf00      	nop
      }
      break;
 80083d8:	e037      	b.n	800844a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	7c1b      	ldrb	r3, [r3, #16]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d109      	bne.n	80083f6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083ea:	f107 0208 	add.w	r2, r7, #8
 80083ee:	4610      	mov	r0, r2
 80083f0:	4798      	blx	r3
 80083f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083f4:	e029      	b.n	800844a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80083f6:	6839      	ldr	r1, [r7, #0]
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 fa2a 	bl	8008852 <USBD_CtlError>
        err++;
 80083fe:	7afb      	ldrb	r3, [r7, #11]
 8008400:	3301      	adds	r3, #1
 8008402:	72fb      	strb	r3, [r7, #11]
      break;
 8008404:	e021      	b.n	800844a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	7c1b      	ldrb	r3, [r3, #16]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d10d      	bne.n	800842a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008416:	f107 0208 	add.w	r2, r7, #8
 800841a:	4610      	mov	r0, r2
 800841c:	4798      	blx	r3
 800841e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	3301      	adds	r3, #1
 8008424:	2207      	movs	r2, #7
 8008426:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008428:	e00f      	b.n	800844a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800842a:	6839      	ldr	r1, [r7, #0]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fa10 	bl	8008852 <USBD_CtlError>
        err++;
 8008432:	7afb      	ldrb	r3, [r7, #11]
 8008434:	3301      	adds	r3, #1
 8008436:	72fb      	strb	r3, [r7, #11]
      break;
 8008438:	e007      	b.n	800844a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800843a:	6839      	ldr	r1, [r7, #0]
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fa08 	bl	8008852 <USBD_CtlError>
      err++;
 8008442:	7afb      	ldrb	r3, [r7, #11]
 8008444:	3301      	adds	r3, #1
 8008446:	72fb      	strb	r3, [r7, #11]
      break;
 8008448:	bf00      	nop
  }

  if (err != 0U)
 800844a:	7afb      	ldrb	r3, [r7, #11]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d11e      	bne.n	800848e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	88db      	ldrh	r3, [r3, #6]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d016      	beq.n	8008486 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008458:	893b      	ldrh	r3, [r7, #8]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00e      	beq.n	800847c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	88da      	ldrh	r2, [r3, #6]
 8008462:	893b      	ldrh	r3, [r7, #8]
 8008464:	4293      	cmp	r3, r2
 8008466:	bf28      	it	cs
 8008468:	4613      	movcs	r3, r2
 800846a:	b29b      	uxth	r3, r3
 800846c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800846e:	893b      	ldrh	r3, [r7, #8]
 8008470:	461a      	mov	r2, r3
 8008472:	68f9      	ldr	r1, [r7, #12]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fa69 	bl	800894c <USBD_CtlSendData>
 800847a:	e009      	b.n	8008490 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800847c:	6839      	ldr	r1, [r7, #0]
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f9e7 	bl	8008852 <USBD_CtlError>
 8008484:	e004      	b.n	8008490 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fac1 	bl	8008a0e <USBD_CtlSendStatus>
 800848c:	e000      	b.n	8008490 <USBD_GetDescriptor+0x2cc>
    return;
 800848e:	bf00      	nop
  }
}
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop

08008498 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	889b      	ldrh	r3, [r3, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d131      	bne.n	800850e <USBD_SetAddress+0x76>
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	88db      	ldrh	r3, [r3, #6]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d12d      	bne.n	800850e <USBD_SetAddress+0x76>
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	885b      	ldrh	r3, [r3, #2]
 80084b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80084b8:	d829      	bhi.n	800850e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	885b      	ldrh	r3, [r3, #2]
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	2b03      	cmp	r3, #3
 80084d0:	d104      	bne.n	80084dc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80084d2:	6839      	ldr	r1, [r7, #0]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f9bc 	bl	8008852 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084da:	e01d      	b.n	8008518 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	7bfa      	ldrb	r2, [r7, #15]
 80084e0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
 80084e6:	4619      	mov	r1, r3
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 ff0f 	bl	800930c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fa8d 	bl	8008a0e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80084f4:	7bfb      	ldrb	r3, [r7, #15]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d004      	beq.n	8008504 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2202      	movs	r2, #2
 80084fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008502:	e009      	b.n	8008518 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800850c:	e004      	b.n	8008518 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f99e 	bl	8008852 <USBD_CtlError>
  }
}
 8008516:	bf00      	nop
 8008518:	bf00      	nop
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800852a:	2300      	movs	r3, #0
 800852c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	885b      	ldrh	r3, [r3, #2]
 8008532:	b2da      	uxtb	r2, r3
 8008534:	4b4e      	ldr	r3, [pc, #312]	@ (8008670 <USBD_SetConfig+0x150>)
 8008536:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008538:	4b4d      	ldr	r3, [pc, #308]	@ (8008670 <USBD_SetConfig+0x150>)
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d905      	bls.n	800854c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008540:	6839      	ldr	r1, [r7, #0]
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f985 	bl	8008852 <USBD_CtlError>
    return USBD_FAIL;
 8008548:	2303      	movs	r3, #3
 800854a:	e08c      	b.n	8008666 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008552:	b2db      	uxtb	r3, r3
 8008554:	2b02      	cmp	r3, #2
 8008556:	d002      	beq.n	800855e <USBD_SetConfig+0x3e>
 8008558:	2b03      	cmp	r3, #3
 800855a:	d029      	beq.n	80085b0 <USBD_SetConfig+0x90>
 800855c:	e075      	b.n	800864a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800855e:	4b44      	ldr	r3, [pc, #272]	@ (8008670 <USBD_SetConfig+0x150>)
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d020      	beq.n	80085a8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008566:	4b42      	ldr	r3, [pc, #264]	@ (8008670 <USBD_SetConfig+0x150>)
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008570:	4b3f      	ldr	r3, [pc, #252]	@ (8008670 <USBD_SetConfig+0x150>)
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	4619      	mov	r1, r3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7fe ffcd 	bl	8007516 <USBD_SetClassConfig>
 800857c:	4603      	mov	r3, r0
 800857e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008580:	7bfb      	ldrb	r3, [r7, #15]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d008      	beq.n	8008598 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008586:	6839      	ldr	r1, [r7, #0]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 f962 	bl	8008852 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2202      	movs	r2, #2
 8008592:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008596:	e065      	b.n	8008664 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fa38 	bl	8008a0e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2203      	movs	r2, #3
 80085a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80085a6:	e05d      	b.n	8008664 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 fa30 	bl	8008a0e <USBD_CtlSendStatus>
      break;
 80085ae:	e059      	b.n	8008664 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80085b0:	4b2f      	ldr	r3, [pc, #188]	@ (8008670 <USBD_SetConfig+0x150>)
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d112      	bne.n	80085de <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2202      	movs	r2, #2
 80085bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80085c0:	4b2b      	ldr	r3, [pc, #172]	@ (8008670 <USBD_SetConfig+0x150>)
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	461a      	mov	r2, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80085ca:	4b29      	ldr	r3, [pc, #164]	@ (8008670 <USBD_SetConfig+0x150>)
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	4619      	mov	r1, r3
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f7fe ffbc 	bl	800754e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fa19 	bl	8008a0e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085dc:	e042      	b.n	8008664 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80085de:	4b24      	ldr	r3, [pc, #144]	@ (8008670 <USBD_SetConfig+0x150>)
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	461a      	mov	r2, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d02a      	beq.n	8008642 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	4619      	mov	r1, r3
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f7fe ffaa 	bl	800754e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80085fa:	4b1d      	ldr	r3, [pc, #116]	@ (8008670 <USBD_SetConfig+0x150>)
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	461a      	mov	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008604:	4b1a      	ldr	r3, [pc, #104]	@ (8008670 <USBD_SetConfig+0x150>)
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	4619      	mov	r1, r3
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f7fe ff83 	bl	8007516 <USBD_SetClassConfig>
 8008610:	4603      	mov	r3, r0
 8008612:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008614:	7bfb      	ldrb	r3, [r7, #15]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00f      	beq.n	800863a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800861a:	6839      	ldr	r1, [r7, #0]
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f918 	bl	8008852 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	b2db      	uxtb	r3, r3
 8008628:	4619      	mov	r1, r3
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f7fe ff8f 	bl	800754e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2202      	movs	r2, #2
 8008634:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008638:	e014      	b.n	8008664 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 f9e7 	bl	8008a0e <USBD_CtlSendStatus>
      break;
 8008640:	e010      	b.n	8008664 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 f9e3 	bl	8008a0e <USBD_CtlSendStatus>
      break;
 8008648:	e00c      	b.n	8008664 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800864a:	6839      	ldr	r1, [r7, #0]
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f900 	bl	8008852 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008652:	4b07      	ldr	r3, [pc, #28]	@ (8008670 <USBD_SetConfig+0x150>)
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	4619      	mov	r1, r3
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f7fe ff78 	bl	800754e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800865e:	2303      	movs	r3, #3
 8008660:	73fb      	strb	r3, [r7, #15]
      break;
 8008662:	bf00      	nop
  }

  return ret;
 8008664:	7bfb      	ldrb	r3, [r7, #15]
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	20002270 	.word	0x20002270

08008674 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	88db      	ldrh	r3, [r3, #6]
 8008682:	2b01      	cmp	r3, #1
 8008684:	d004      	beq.n	8008690 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008686:	6839      	ldr	r1, [r7, #0]
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 f8e2 	bl	8008852 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800868e:	e023      	b.n	80086d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b02      	cmp	r3, #2
 800869a:	dc02      	bgt.n	80086a2 <USBD_GetConfig+0x2e>
 800869c:	2b00      	cmp	r3, #0
 800869e:	dc03      	bgt.n	80086a8 <USBD_GetConfig+0x34>
 80086a0:	e015      	b.n	80086ce <USBD_GetConfig+0x5a>
 80086a2:	2b03      	cmp	r3, #3
 80086a4:	d00b      	beq.n	80086be <USBD_GetConfig+0x4a>
 80086a6:	e012      	b.n	80086ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	3308      	adds	r3, #8
 80086b2:	2201      	movs	r2, #1
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f948 	bl	800894c <USBD_CtlSendData>
        break;
 80086bc:	e00c      	b.n	80086d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	3304      	adds	r3, #4
 80086c2:	2201      	movs	r2, #1
 80086c4:	4619      	mov	r1, r3
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 f940 	bl	800894c <USBD_CtlSendData>
        break;
 80086cc:	e004      	b.n	80086d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80086ce:	6839      	ldr	r1, [r7, #0]
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 f8be 	bl	8008852 <USBD_CtlError>
        break;
 80086d6:	bf00      	nop
}
 80086d8:	bf00      	nop
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	3b01      	subs	r3, #1
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d81e      	bhi.n	8008736 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	88db      	ldrh	r3, [r3, #6]
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	d004      	beq.n	800870a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008700:	6839      	ldr	r1, [r7, #0]
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f8a5 	bl	8008852 <USBD_CtlError>
        break;
 8008708:	e01a      	b.n	8008740 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008716:	2b00      	cmp	r3, #0
 8008718:	d005      	beq.n	8008726 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	f043 0202 	orr.w	r2, r3, #2
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	330c      	adds	r3, #12
 800872a:	2202      	movs	r2, #2
 800872c:	4619      	mov	r1, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 f90c 	bl	800894c <USBD_CtlSendData>
      break;
 8008734:	e004      	b.n	8008740 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008736:	6839      	ldr	r1, [r7, #0]
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 f88a 	bl	8008852 <USBD_CtlError>
      break;
 800873e:	bf00      	nop
  }
}
 8008740:	bf00      	nop
 8008742:	3708      	adds	r7, #8
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	885b      	ldrh	r3, [r3, #2]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d107      	bne.n	800876a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2201      	movs	r2, #1
 800875e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f953 	bl	8008a0e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008768:	e013      	b.n	8008792 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	885b      	ldrh	r3, [r3, #2]
 800876e:	2b02      	cmp	r3, #2
 8008770:	d10b      	bne.n	800878a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	889b      	ldrh	r3, [r3, #4]
 8008776:	0a1b      	lsrs	r3, r3, #8
 8008778:	b29b      	uxth	r3, r3
 800877a:	b2da      	uxtb	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 f943 	bl	8008a0e <USBD_CtlSendStatus>
}
 8008788:	e003      	b.n	8008792 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 f860 	bl	8008852 <USBD_CtlError>
}
 8008792:	bf00      	nop
 8008794:	3708      	adds	r7, #8
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b082      	sub	sp, #8
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	3b01      	subs	r3, #1
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d80b      	bhi.n	80087ca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	885b      	ldrh	r3, [r3, #2]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d10c      	bne.n	80087d4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f923 	bl	8008a0e <USBD_CtlSendStatus>
      }
      break;
 80087c8:	e004      	b.n	80087d4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80087ca:	6839      	ldr	r1, [r7, #0]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 f840 	bl	8008852 <USBD_CtlError>
      break;
 80087d2:	e000      	b.n	80087d6 <USBD_ClrFeature+0x3c>
      break;
 80087d4:	bf00      	nop
  }
}
 80087d6:	bf00      	nop
 80087d8:	3708      	adds	r7, #8
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b084      	sub	sp, #16
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
 80087e6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	781a      	ldrb	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	3301      	adds	r3, #1
 80087f8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	781a      	ldrb	r2, [r3, #0]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	3301      	adds	r3, #1
 8008806:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	f7ff fa3d 	bl	8007c88 <SWAPBYTE>
 800880e:	4603      	mov	r3, r0
 8008810:	461a      	mov	r2, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	3301      	adds	r3, #1
 800881a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	3301      	adds	r3, #1
 8008820:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f7ff fa30 	bl	8007c88 <SWAPBYTE>
 8008828:	4603      	mov	r3, r0
 800882a:	461a      	mov	r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	3301      	adds	r3, #1
 8008834:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	3301      	adds	r3, #1
 800883a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f7ff fa23 	bl	8007c88 <SWAPBYTE>
 8008842:	4603      	mov	r3, r0
 8008844:	461a      	mov	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	80da      	strh	r2, [r3, #6]
}
 800884a:	bf00      	nop
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b082      	sub	sp, #8
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800885c:	2180      	movs	r1, #128	@ 0x80
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 fcea 	bl	8009238 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008864:	2100      	movs	r1, #0
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 fce6 	bl	8009238 <USBD_LL_StallEP>
}
 800886c:	bf00      	nop
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008880:	2300      	movs	r3, #0
 8008882:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d042      	beq.n	8008910 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800888e:	6938      	ldr	r0, [r7, #16]
 8008890:	f000 f842 	bl	8008918 <USBD_GetLen>
 8008894:	4603      	mov	r3, r0
 8008896:	3301      	adds	r3, #1
 8008898:	005b      	lsls	r3, r3, #1
 800889a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800889e:	d808      	bhi.n	80088b2 <USBD_GetString+0x3e>
 80088a0:	6938      	ldr	r0, [r7, #16]
 80088a2:	f000 f839 	bl	8008918 <USBD_GetLen>
 80088a6:	4603      	mov	r3, r0
 80088a8:	3301      	adds	r3, #1
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	005b      	lsls	r3, r3, #1
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	e001      	b.n	80088b6 <USBD_GetString+0x42>
 80088b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80088ba:	7dfb      	ldrb	r3, [r7, #23]
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	4413      	add	r3, r2
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	7812      	ldrb	r2, [r2, #0]
 80088c4:	701a      	strb	r2, [r3, #0]
  idx++;
 80088c6:	7dfb      	ldrb	r3, [r7, #23]
 80088c8:	3301      	adds	r3, #1
 80088ca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80088cc:	7dfb      	ldrb	r3, [r7, #23]
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	4413      	add	r3, r2
 80088d2:	2203      	movs	r2, #3
 80088d4:	701a      	strb	r2, [r3, #0]
  idx++;
 80088d6:	7dfb      	ldrb	r3, [r7, #23]
 80088d8:	3301      	adds	r3, #1
 80088da:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80088dc:	e013      	b.n	8008906 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80088de:	7dfb      	ldrb	r3, [r7, #23]
 80088e0:	68ba      	ldr	r2, [r7, #8]
 80088e2:	4413      	add	r3, r2
 80088e4:	693a      	ldr	r2, [r7, #16]
 80088e6:	7812      	ldrb	r2, [r2, #0]
 80088e8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	3301      	adds	r3, #1
 80088ee:	613b      	str	r3, [r7, #16]
    idx++;
 80088f0:	7dfb      	ldrb	r3, [r7, #23]
 80088f2:	3301      	adds	r3, #1
 80088f4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80088f6:	7dfb      	ldrb	r3, [r7, #23]
 80088f8:	68ba      	ldr	r2, [r7, #8]
 80088fa:	4413      	add	r3, r2
 80088fc:	2200      	movs	r2, #0
 80088fe:	701a      	strb	r2, [r3, #0]
    idx++;
 8008900:	7dfb      	ldrb	r3, [r7, #23]
 8008902:	3301      	adds	r3, #1
 8008904:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1e7      	bne.n	80088de <USBD_GetString+0x6a>
 800890e:	e000      	b.n	8008912 <USBD_GetString+0x9e>
    return;
 8008910:	bf00      	nop
  }
}
 8008912:	3718      	adds	r7, #24
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008920:	2300      	movs	r3, #0
 8008922:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008928:	e005      	b.n	8008936 <USBD_GetLen+0x1e>
  {
    len++;
 800892a:	7bfb      	ldrb	r3, [r7, #15]
 800892c:	3301      	adds	r3, #1
 800892e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	3301      	adds	r3, #1
 8008934:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1f5      	bne.n	800892a <USBD_GetLen+0x12>
  }

  return len;
 800893e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3714      	adds	r7, #20
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2202      	movs	r2, #2
 800895c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	68ba      	ldr	r2, [r7, #8]
 800896a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	68ba      	ldr	r2, [r7, #8]
 8008976:	2100      	movs	r1, #0
 8008978:	68f8      	ldr	r0, [r7, #12]
 800897a:	f000 fce6 	bl	800934a <USBD_LL_Transmit>

  return USBD_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	3710      	adds	r7, #16
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	2100      	movs	r1, #0
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f000 fcd5 	bl	800934a <USBD_LL_Transmit>

  return USBD_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b084      	sub	sp, #16
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	60f8      	str	r0, [r7, #12]
 80089b2:	60b9      	str	r1, [r7, #8]
 80089b4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2203      	movs	r2, #3
 80089ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	68ba      	ldr	r2, [r7, #8]
 80089ca:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	68ba      	ldr	r2, [r7, #8]
 80089da:	2100      	movs	r1, #0
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f000 fcd5 	bl	800938c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	68ba      	ldr	r2, [r7, #8]
 80089fc:	2100      	movs	r1, #0
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f000 fcc4 	bl	800938c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b082      	sub	sp, #8
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2204      	movs	r2, #4
 8008a1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a1e:	2300      	movs	r3, #0
 8008a20:	2200      	movs	r2, #0
 8008a22:	2100      	movs	r1, #0
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 fc90 	bl	800934a <USBD_LL_Transmit>

  return USBD_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2205      	movs	r2, #5
 8008a40:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a44:	2300      	movs	r3, #0
 8008a46:	2200      	movs	r2, #0
 8008a48:	2100      	movs	r1, #0
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 fc9e 	bl	800938c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
	...

08008a5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008a60:	2200      	movs	r2, #0
 8008a62:	4912      	ldr	r1, [pc, #72]	@ (8008aac <MX_USB_DEVICE_Init+0x50>)
 8008a64:	4812      	ldr	r0, [pc, #72]	@ (8008ab0 <MX_USB_DEVICE_Init+0x54>)
 8008a66:	f7fe fcd9 	bl	800741c <USBD_Init>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008a70:	f7f8 f936 	bl	8000ce0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008a74:	490f      	ldr	r1, [pc, #60]	@ (8008ab4 <MX_USB_DEVICE_Init+0x58>)
 8008a76:	480e      	ldr	r0, [pc, #56]	@ (8008ab0 <MX_USB_DEVICE_Init+0x54>)
 8008a78:	f7fe fd00 	bl	800747c <USBD_RegisterClass>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d001      	beq.n	8008a86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008a82:	f7f8 f92d 	bl	8000ce0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008a86:	490c      	ldr	r1, [pc, #48]	@ (8008ab8 <MX_USB_DEVICE_Init+0x5c>)
 8008a88:	4809      	ldr	r0, [pc, #36]	@ (8008ab0 <MX_USB_DEVICE_Init+0x54>)
 8008a8a:	f7fe fbf7 	bl	800727c <USBD_CDC_RegisterInterface>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d001      	beq.n	8008a98 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008a94:	f7f8 f924 	bl	8000ce0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008a98:	4805      	ldr	r0, [pc, #20]	@ (8008ab0 <MX_USB_DEVICE_Init+0x54>)
 8008a9a:	f7fe fd25 	bl	80074e8 <USBD_Start>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d001      	beq.n	8008aa8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008aa4:	f7f8 f91c 	bl	8000ce0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008aa8:	bf00      	nop
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	200000ac 	.word	0x200000ac
 8008ab0:	20002274 	.word	0x20002274
 8008ab4:	20000018 	.word	0x20000018
 8008ab8:	20000098 	.word	0x20000098

08008abc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	4905      	ldr	r1, [pc, #20]	@ (8008ad8 <CDC_Init_FS+0x1c>)
 8008ac4:	4805      	ldr	r0, [pc, #20]	@ (8008adc <CDC_Init_FS+0x20>)
 8008ac6:	f7fe fbf3 	bl	80072b0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008aca:	4905      	ldr	r1, [pc, #20]	@ (8008ae0 <CDC_Init_FS+0x24>)
 8008acc:	4803      	ldr	r0, [pc, #12]	@ (8008adc <CDC_Init_FS+0x20>)
 8008ace:	f7fe fc11 	bl	80072f4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008ad2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	20002d50 	.word	0x20002d50
 8008adc:	20002274 	.word	0x20002274
 8008ae0:	20002550 	.word	0x20002550

08008ae4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008ae8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	4603      	mov	r3, r0
 8008afc:	6039      	str	r1, [r7, #0]
 8008afe:	71fb      	strb	r3, [r7, #7]
 8008b00:	4613      	mov	r3, r2
 8008b02:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b04:	79fb      	ldrb	r3, [r7, #7]
 8008b06:	2b23      	cmp	r3, #35	@ 0x23
 8008b08:	d84a      	bhi.n	8008ba0 <CDC_Control_FS+0xac>
 8008b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8008b10 <CDC_Control_FS+0x1c>)
 8008b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b10:	08008ba1 	.word	0x08008ba1
 8008b14:	08008ba1 	.word	0x08008ba1
 8008b18:	08008ba1 	.word	0x08008ba1
 8008b1c:	08008ba1 	.word	0x08008ba1
 8008b20:	08008ba1 	.word	0x08008ba1
 8008b24:	08008ba1 	.word	0x08008ba1
 8008b28:	08008ba1 	.word	0x08008ba1
 8008b2c:	08008ba1 	.word	0x08008ba1
 8008b30:	08008ba1 	.word	0x08008ba1
 8008b34:	08008ba1 	.word	0x08008ba1
 8008b38:	08008ba1 	.word	0x08008ba1
 8008b3c:	08008ba1 	.word	0x08008ba1
 8008b40:	08008ba1 	.word	0x08008ba1
 8008b44:	08008ba1 	.word	0x08008ba1
 8008b48:	08008ba1 	.word	0x08008ba1
 8008b4c:	08008ba1 	.word	0x08008ba1
 8008b50:	08008ba1 	.word	0x08008ba1
 8008b54:	08008ba1 	.word	0x08008ba1
 8008b58:	08008ba1 	.word	0x08008ba1
 8008b5c:	08008ba1 	.word	0x08008ba1
 8008b60:	08008ba1 	.word	0x08008ba1
 8008b64:	08008ba1 	.word	0x08008ba1
 8008b68:	08008ba1 	.word	0x08008ba1
 8008b6c:	08008ba1 	.word	0x08008ba1
 8008b70:	08008ba1 	.word	0x08008ba1
 8008b74:	08008ba1 	.word	0x08008ba1
 8008b78:	08008ba1 	.word	0x08008ba1
 8008b7c:	08008ba1 	.word	0x08008ba1
 8008b80:	08008ba1 	.word	0x08008ba1
 8008b84:	08008ba1 	.word	0x08008ba1
 8008b88:	08008ba1 	.word	0x08008ba1
 8008b8c:	08008ba1 	.word	0x08008ba1
 8008b90:	08008ba1 	.word	0x08008ba1
 8008b94:	08008ba1 	.word	0x08008ba1
 8008b98:	08008ba1 	.word	0x08008ba1
 8008b9c:	08008ba1 	.word	0x08008ba1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008ba0:	bf00      	nop
  }

  return (USBD_OK);
 8008ba2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008bba:	6879      	ldr	r1, [r7, #4]
 8008bbc:	4805      	ldr	r0, [pc, #20]	@ (8008bd4 <CDC_Receive_FS+0x24>)
 8008bbe:	f7fe fb99 	bl	80072f4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008bc2:	4804      	ldr	r0, [pc, #16]	@ (8008bd4 <CDC_Receive_FS+0x24>)
 8008bc4:	f7fe fbf4 	bl	80073b0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008bc8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3708      	adds	r7, #8
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	20002274 	.word	0x20002274

08008bd8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	460b      	mov	r3, r1
 8008be2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008be4:	2300      	movs	r3, #0
 8008be6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008be8:	4b0d      	ldr	r3, [pc, #52]	@ (8008c20 <CDC_Transmit_FS+0x48>)
 8008bea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008bee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d001      	beq.n	8008bfe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e00b      	b.n	8008c16 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008bfe:	887b      	ldrh	r3, [r7, #2]
 8008c00:	461a      	mov	r2, r3
 8008c02:	6879      	ldr	r1, [r7, #4]
 8008c04:	4806      	ldr	r0, [pc, #24]	@ (8008c20 <CDC_Transmit_FS+0x48>)
 8008c06:	f7fe fb53 	bl	80072b0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008c0a:	4805      	ldr	r0, [pc, #20]	@ (8008c20 <CDC_Transmit_FS+0x48>)
 8008c0c:	f7fe fb90 	bl	8007330 <USBD_CDC_TransmitPacket>
 8008c10:	4603      	mov	r3, r0
 8008c12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	20002274 	.word	0x20002274

08008c24 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b087      	sub	sp, #28
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	4613      	mov	r3, r2
 8008c30:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008c36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	371c      	adds	r7, #28
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
	...

08008c48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	4603      	mov	r3, r0
 8008c50:	6039      	str	r1, [r7, #0]
 8008c52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	2212      	movs	r2, #18
 8008c58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008c5a:	4b03      	ldr	r3, [pc, #12]	@ (8008c68 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr
 8008c68:	200000c8 	.word	0x200000c8

08008c6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	4603      	mov	r3, r0
 8008c74:	6039      	str	r1, [r7, #0]
 8008c76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	2204      	movs	r2, #4
 8008c7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008c7e:	4b03      	ldr	r3, [pc, #12]	@ (8008c8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr
 8008c8c:	200000dc 	.word	0x200000dc

08008c90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	4603      	mov	r3, r0
 8008c98:	6039      	str	r1, [r7, #0]
 8008c9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c9c:	79fb      	ldrb	r3, [r7, #7]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d105      	bne.n	8008cae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ca2:	683a      	ldr	r2, [r7, #0]
 8008ca4:	4907      	ldr	r1, [pc, #28]	@ (8008cc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ca6:	4808      	ldr	r0, [pc, #32]	@ (8008cc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ca8:	f7ff fde4 	bl	8008874 <USBD_GetString>
 8008cac:	e004      	b.n	8008cb8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cae:	683a      	ldr	r2, [r7, #0]
 8008cb0:	4904      	ldr	r1, [pc, #16]	@ (8008cc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008cb2:	4805      	ldr	r0, [pc, #20]	@ (8008cc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008cb4:	f7ff fdde 	bl	8008874 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cb8:	4b02      	ldr	r3, [pc, #8]	@ (8008cc4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3708      	adds	r7, #8
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	20003550 	.word	0x20003550
 8008cc8:	080094ec 	.word	0x080094ec

08008ccc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	6039      	str	r1, [r7, #0]
 8008cd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008cd8:	683a      	ldr	r2, [r7, #0]
 8008cda:	4904      	ldr	r1, [pc, #16]	@ (8008cec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008cdc:	4804      	ldr	r0, [pc, #16]	@ (8008cf0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008cde:	f7ff fdc9 	bl	8008874 <USBD_GetString>
  return USBD_StrDesc;
 8008ce2:	4b02      	ldr	r3, [pc, #8]	@ (8008cec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3708      	adds	r7, #8
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	20003550 	.word	0x20003550
 8008cf0:	08009504 	.word	0x08009504

08008cf4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	6039      	str	r1, [r7, #0]
 8008cfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	221a      	movs	r2, #26
 8008d04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d06:	f000 f843 	bl	8008d90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d0a:	4b02      	ldr	r3, [pc, #8]	@ (8008d14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	200000e0 	.word	0x200000e0

08008d18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	4603      	mov	r3, r0
 8008d20:	6039      	str	r1, [r7, #0]
 8008d22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d24:	79fb      	ldrb	r3, [r7, #7]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d105      	bne.n	8008d36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d2a:	683a      	ldr	r2, [r7, #0]
 8008d2c:	4907      	ldr	r1, [pc, #28]	@ (8008d4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d2e:	4808      	ldr	r0, [pc, #32]	@ (8008d50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d30:	f7ff fda0 	bl	8008874 <USBD_GetString>
 8008d34:	e004      	b.n	8008d40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d36:	683a      	ldr	r2, [r7, #0]
 8008d38:	4904      	ldr	r1, [pc, #16]	@ (8008d4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d3a:	4805      	ldr	r0, [pc, #20]	@ (8008d50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d3c:	f7ff fd9a 	bl	8008874 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d40:	4b02      	ldr	r3, [pc, #8]	@ (8008d4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	20003550 	.word	0x20003550
 8008d50:	08009518 	.word	0x08009518

08008d54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	6039      	str	r1, [r7, #0]
 8008d5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d60:	79fb      	ldrb	r3, [r7, #7]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d105      	bne.n	8008d72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d66:	683a      	ldr	r2, [r7, #0]
 8008d68:	4907      	ldr	r1, [pc, #28]	@ (8008d88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d6a:	4808      	ldr	r0, [pc, #32]	@ (8008d8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d6c:	f7ff fd82 	bl	8008874 <USBD_GetString>
 8008d70:	e004      	b.n	8008d7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	4904      	ldr	r1, [pc, #16]	@ (8008d88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d76:	4805      	ldr	r0, [pc, #20]	@ (8008d8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d78:	f7ff fd7c 	bl	8008874 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d7c:	4b02      	ldr	r3, [pc, #8]	@ (8008d88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3708      	adds	r7, #8
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	20003550 	.word	0x20003550
 8008d8c:	08009524 	.word	0x08009524

08008d90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d96:	4b0f      	ldr	r3, [pc, #60]	@ (8008dd4 <Get_SerialNum+0x44>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8008dd8 <Get_SerialNum+0x48>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008da2:	4b0e      	ldr	r3, [pc, #56]	@ (8008ddc <Get_SerialNum+0x4c>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4413      	add	r3, r2
 8008dae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d009      	beq.n	8008dca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008db6:	2208      	movs	r2, #8
 8008db8:	4909      	ldr	r1, [pc, #36]	@ (8008de0 <Get_SerialNum+0x50>)
 8008dba:	68f8      	ldr	r0, [r7, #12]
 8008dbc:	f000 f814 	bl	8008de8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008dc0:	2204      	movs	r2, #4
 8008dc2:	4908      	ldr	r1, [pc, #32]	@ (8008de4 <Get_SerialNum+0x54>)
 8008dc4:	68b8      	ldr	r0, [r7, #8]
 8008dc6:	f000 f80f 	bl	8008de8 <IntToUnicode>
  }
}
 8008dca:	bf00      	nop
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	1fff7a10 	.word	0x1fff7a10
 8008dd8:	1fff7a14 	.word	0x1fff7a14
 8008ddc:	1fff7a18 	.word	0x1fff7a18
 8008de0:	200000e2 	.word	0x200000e2
 8008de4:	200000f2 	.word	0x200000f2

08008de8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b087      	sub	sp, #28
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	4613      	mov	r3, r2
 8008df4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008df6:	2300      	movs	r3, #0
 8008df8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	75fb      	strb	r3, [r7, #23]
 8008dfe:	e027      	b.n	8008e50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	0f1b      	lsrs	r3, r3, #28
 8008e04:	2b09      	cmp	r3, #9
 8008e06:	d80b      	bhi.n	8008e20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	0f1b      	lsrs	r3, r3, #28
 8008e0c:	b2da      	uxtb	r2, r3
 8008e0e:	7dfb      	ldrb	r3, [r7, #23]
 8008e10:	005b      	lsls	r3, r3, #1
 8008e12:	4619      	mov	r1, r3
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	440b      	add	r3, r1
 8008e18:	3230      	adds	r2, #48	@ 0x30
 8008e1a:	b2d2      	uxtb	r2, r2
 8008e1c:	701a      	strb	r2, [r3, #0]
 8008e1e:	e00a      	b.n	8008e36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	0f1b      	lsrs	r3, r3, #28
 8008e24:	b2da      	uxtb	r2, r3
 8008e26:	7dfb      	ldrb	r3, [r7, #23]
 8008e28:	005b      	lsls	r3, r3, #1
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	440b      	add	r3, r1
 8008e30:	3237      	adds	r2, #55	@ 0x37
 8008e32:	b2d2      	uxtb	r2, r2
 8008e34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	011b      	lsls	r3, r3, #4
 8008e3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e3c:	7dfb      	ldrb	r3, [r7, #23]
 8008e3e:	005b      	lsls	r3, r3, #1
 8008e40:	3301      	adds	r3, #1
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	4413      	add	r3, r2
 8008e46:	2200      	movs	r2, #0
 8008e48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e4a:	7dfb      	ldrb	r3, [r7, #23]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	75fb      	strb	r3, [r7, #23]
 8008e50:	7dfa      	ldrb	r2, [r7, #23]
 8008e52:	79fb      	ldrb	r3, [r7, #7]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d3d3      	bcc.n	8008e00 <IntToUnicode+0x18>
  }
}
 8008e58:	bf00      	nop
 8008e5a:	bf00      	nop
 8008e5c:	371c      	adds	r7, #28
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr
	...

08008e68 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b08a      	sub	sp, #40	@ 0x28
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e70:	f107 0314 	add.w	r3, r7, #20
 8008e74:	2200      	movs	r2, #0
 8008e76:	601a      	str	r2, [r3, #0]
 8008e78:	605a      	str	r2, [r3, #4]
 8008e7a:	609a      	str	r2, [r3, #8]
 8008e7c:	60da      	str	r2, [r3, #12]
 8008e7e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e88:	d13a      	bne.n	8008f00 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	613b      	str	r3, [r7, #16]
 8008e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8008f08 <HAL_PCD_MspInit+0xa0>)
 8008e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e92:	4a1d      	ldr	r2, [pc, #116]	@ (8008f08 <HAL_PCD_MspInit+0xa0>)
 8008e94:	f043 0301 	orr.w	r3, r3, #1
 8008e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8008e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8008f08 <HAL_PCD_MspInit+0xa0>)
 8008e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e9e:	f003 0301 	and.w	r3, r3, #1
 8008ea2:	613b      	str	r3, [r7, #16]
 8008ea4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008ea6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008eac:	2302      	movs	r3, #2
 8008eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008eb8:	230a      	movs	r3, #10
 8008eba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ebc:	f107 0314 	add.w	r3, r7, #20
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	4812      	ldr	r0, [pc, #72]	@ (8008f0c <HAL_PCD_MspInit+0xa4>)
 8008ec4:	f7f9 fbd2 	bl	800266c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8008f08 <HAL_PCD_MspInit+0xa0>)
 8008eca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ecc:	4a0e      	ldr	r2, [pc, #56]	@ (8008f08 <HAL_PCD_MspInit+0xa0>)
 8008ece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ed2:	6353      	str	r3, [r2, #52]	@ 0x34
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	60fb      	str	r3, [r7, #12]
 8008ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8008f08 <HAL_PCD_MspInit+0xa0>)
 8008eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008edc:	4a0a      	ldr	r2, [pc, #40]	@ (8008f08 <HAL_PCD_MspInit+0xa0>)
 8008ede:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008ee2:	6453      	str	r3, [r2, #68]	@ 0x44
 8008ee4:	4b08      	ldr	r3, [pc, #32]	@ (8008f08 <HAL_PCD_MspInit+0xa0>)
 8008ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ee8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008eec:	60fb      	str	r3, [r7, #12]
 8008eee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	2043      	movs	r0, #67	@ 0x43
 8008ef6:	f7f9 f812 	bl	8001f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008efa:	2043      	movs	r0, #67	@ 0x43
 8008efc:	f7f9 f82b 	bl	8001f56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f00:	bf00      	nop
 8008f02:	3728      	adds	r7, #40	@ 0x28
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	40023800 	.word	0x40023800
 8008f0c:	40020000 	.word	0x40020000

08008f10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008f24:	4619      	mov	r1, r3
 8008f26:	4610      	mov	r0, r2
 8008f28:	f7fe fb2b 	bl	8007582 <USBD_LL_SetupStage>
}
 8008f2c:	bf00      	nop
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008f46:	78fa      	ldrb	r2, [r7, #3]
 8008f48:	6879      	ldr	r1, [r7, #4]
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	00db      	lsls	r3, r3, #3
 8008f4e:	4413      	add	r3, r2
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	440b      	add	r3, r1
 8008f54:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	78fb      	ldrb	r3, [r7, #3]
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	f7fe fb65 	bl	800762c <USBD_LL_DataOutStage>
}
 8008f62:	bf00      	nop
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b082      	sub	sp, #8
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
 8008f72:	460b      	mov	r3, r1
 8008f74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008f7c:	78fa      	ldrb	r2, [r7, #3]
 8008f7e:	6879      	ldr	r1, [r7, #4]
 8008f80:	4613      	mov	r3, r2
 8008f82:	00db      	lsls	r3, r3, #3
 8008f84:	4413      	add	r3, r2
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	440b      	add	r3, r1
 8008f8a:	3320      	adds	r3, #32
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	78fb      	ldrb	r3, [r7, #3]
 8008f90:	4619      	mov	r1, r3
 8008f92:	f7fe fc07 	bl	80077a4 <USBD_LL_DataInStage>
}
 8008f96:	bf00      	nop
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b082      	sub	sp, #8
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7fe fd4b 	bl	8007a48 <USBD_LL_SOF>
}
 8008fb2:	bf00      	nop
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b084      	sub	sp, #16
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	79db      	ldrb	r3, [r3, #7]
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d001      	beq.n	8008fd2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008fce:	f7f7 fe87 	bl	8000ce0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008fd8:	7bfa      	ldrb	r2, [r7, #15]
 8008fda:	4611      	mov	r1, r2
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7fe fcef 	bl	80079c0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7fe fc96 	bl	800791a <USBD_LL_Reset>
}
 8008fee:	bf00      	nop
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
	...

08008ff8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009006:	4618      	mov	r0, r3
 8009008:	f7fe fcea 	bl	80079e0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	6812      	ldr	r2, [r2, #0]
 800901a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800901e:	f043 0301 	orr.w	r3, r3, #1
 8009022:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	7adb      	ldrb	r3, [r3, #11]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d005      	beq.n	8009038 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800902c:	4b04      	ldr	r3, [pc, #16]	@ (8009040 <HAL_PCD_SuspendCallback+0x48>)
 800902e:	691b      	ldr	r3, [r3, #16]
 8009030:	4a03      	ldr	r2, [pc, #12]	@ (8009040 <HAL_PCD_SuspendCallback+0x48>)
 8009032:	f043 0306 	orr.w	r3, r3, #6
 8009036:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009038:	bf00      	nop
 800903a:	3708      	adds	r7, #8
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	e000ed00 	.word	0xe000ed00

08009044 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009052:	4618      	mov	r0, r3
 8009054:	f7fe fce0 	bl	8007a18 <USBD_LL_Resume>
}
 8009058:	bf00      	nop
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	460b      	mov	r3, r1
 800906a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009072:	78fa      	ldrb	r2, [r7, #3]
 8009074:	4611      	mov	r1, r2
 8009076:	4618      	mov	r0, r3
 8009078:	f7fe fd38 	bl	8007aec <USBD_LL_IsoOUTIncomplete>
}
 800907c:	bf00      	nop
 800907e:	3708      	adds	r7, #8
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	460b      	mov	r3, r1
 800908e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009096:	78fa      	ldrb	r2, [r7, #3]
 8009098:	4611      	mov	r1, r2
 800909a:	4618      	mov	r0, r3
 800909c:	f7fe fcf4 	bl	8007a88 <USBD_LL_IsoINIncomplete>
}
 80090a0:	bf00      	nop
 80090a2:	3708      	adds	r7, #8
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7fe fd4a 	bl	8007b50 <USBD_LL_DevConnected>
}
 80090bc:	bf00      	nop
 80090be:	3708      	adds	r7, #8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fe fd47 	bl	8007b66 <USBD_LL_DevDisconnected>
}
 80090d8:	bf00      	nop
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d13c      	bne.n	800916a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80090f0:	4a20      	ldr	r2, [pc, #128]	@ (8009174 <USBD_LL_Init+0x94>)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4a1e      	ldr	r2, [pc, #120]	@ (8009174 <USBD_LL_Init+0x94>)
 80090fc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009100:	4b1c      	ldr	r3, [pc, #112]	@ (8009174 <USBD_LL_Init+0x94>)
 8009102:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009106:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009108:	4b1a      	ldr	r3, [pc, #104]	@ (8009174 <USBD_LL_Init+0x94>)
 800910a:	2204      	movs	r2, #4
 800910c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800910e:	4b19      	ldr	r3, [pc, #100]	@ (8009174 <USBD_LL_Init+0x94>)
 8009110:	2202      	movs	r2, #2
 8009112:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009114:	4b17      	ldr	r3, [pc, #92]	@ (8009174 <USBD_LL_Init+0x94>)
 8009116:	2200      	movs	r2, #0
 8009118:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800911a:	4b16      	ldr	r3, [pc, #88]	@ (8009174 <USBD_LL_Init+0x94>)
 800911c:	2202      	movs	r2, #2
 800911e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009120:	4b14      	ldr	r3, [pc, #80]	@ (8009174 <USBD_LL_Init+0x94>)
 8009122:	2200      	movs	r2, #0
 8009124:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009126:	4b13      	ldr	r3, [pc, #76]	@ (8009174 <USBD_LL_Init+0x94>)
 8009128:	2200      	movs	r2, #0
 800912a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800912c:	4b11      	ldr	r3, [pc, #68]	@ (8009174 <USBD_LL_Init+0x94>)
 800912e:	2200      	movs	r2, #0
 8009130:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009132:	4b10      	ldr	r3, [pc, #64]	@ (8009174 <USBD_LL_Init+0x94>)
 8009134:	2200      	movs	r2, #0
 8009136:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009138:	4b0e      	ldr	r3, [pc, #56]	@ (8009174 <USBD_LL_Init+0x94>)
 800913a:	2200      	movs	r2, #0
 800913c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800913e:	480d      	ldr	r0, [pc, #52]	@ (8009174 <USBD_LL_Init+0x94>)
 8009140:	f7f9 fc18 	bl	8002974 <HAL_PCD_Init>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800914a:	f7f7 fdc9 	bl	8000ce0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800914e:	2180      	movs	r1, #128	@ 0x80
 8009150:	4808      	ldr	r0, [pc, #32]	@ (8009174 <USBD_LL_Init+0x94>)
 8009152:	f7fa fe44 	bl	8003dde <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009156:	2240      	movs	r2, #64	@ 0x40
 8009158:	2100      	movs	r1, #0
 800915a:	4806      	ldr	r0, [pc, #24]	@ (8009174 <USBD_LL_Init+0x94>)
 800915c:	f7fa fdf8 	bl	8003d50 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009160:	2280      	movs	r2, #128	@ 0x80
 8009162:	2101      	movs	r1, #1
 8009164:	4803      	ldr	r0, [pc, #12]	@ (8009174 <USBD_LL_Init+0x94>)
 8009166:	f7fa fdf3 	bl	8003d50 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	20003750 	.word	0x20003750

08009178 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009180:	2300      	movs	r3, #0
 8009182:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009184:	2300      	movs	r3, #0
 8009186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800918e:	4618      	mov	r0, r3
 8009190:	f7f9 fcff 	bl	8002b92 <HAL_PCD_Start>
 8009194:	4603      	mov	r3, r0
 8009196:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009198:	7bfb      	ldrb	r3, [r7, #15]
 800919a:	4618      	mov	r0, r3
 800919c:	f000 f942 	bl	8009424 <USBD_Get_USB_Status>
 80091a0:	4603      	mov	r3, r0
 80091a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b084      	sub	sp, #16
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	4608      	mov	r0, r1
 80091b8:	4611      	mov	r1, r2
 80091ba:	461a      	mov	r2, r3
 80091bc:	4603      	mov	r3, r0
 80091be:	70fb      	strb	r3, [r7, #3]
 80091c0:	460b      	mov	r3, r1
 80091c2:	70bb      	strb	r3, [r7, #2]
 80091c4:	4613      	mov	r3, r2
 80091c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091c8:	2300      	movs	r3, #0
 80091ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091cc:	2300      	movs	r3, #0
 80091ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80091d6:	78bb      	ldrb	r3, [r7, #2]
 80091d8:	883a      	ldrh	r2, [r7, #0]
 80091da:	78f9      	ldrb	r1, [r7, #3]
 80091dc:	f7fa f9d3 	bl	8003586 <HAL_PCD_EP_Open>
 80091e0:	4603      	mov	r3, r0
 80091e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091e4:	7bfb      	ldrb	r3, [r7, #15]
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 f91c 	bl	8009424 <USBD_Get_USB_Status>
 80091ec:	4603      	mov	r3, r0
 80091ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b084      	sub	sp, #16
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
 8009202:	460b      	mov	r3, r1
 8009204:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009206:	2300      	movs	r3, #0
 8009208:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009214:	78fa      	ldrb	r2, [r7, #3]
 8009216:	4611      	mov	r1, r2
 8009218:	4618      	mov	r0, r3
 800921a:	f7fa fa1e 	bl	800365a <HAL_PCD_EP_Close>
 800921e:	4603      	mov	r3, r0
 8009220:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009222:	7bfb      	ldrb	r3, [r7, #15]
 8009224:	4618      	mov	r0, r3
 8009226:	f000 f8fd 	bl	8009424 <USBD_Get_USB_Status>
 800922a:	4603      	mov	r3, r0
 800922c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800922e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009230:	4618      	mov	r0, r3
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	460b      	mov	r3, r1
 8009242:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009244:	2300      	movs	r3, #0
 8009246:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009248:	2300      	movs	r3, #0
 800924a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009252:	78fa      	ldrb	r2, [r7, #3]
 8009254:	4611      	mov	r1, r2
 8009256:	4618      	mov	r0, r3
 8009258:	f7fa fad6 	bl	8003808 <HAL_PCD_EP_SetStall>
 800925c:	4603      	mov	r3, r0
 800925e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009260:	7bfb      	ldrb	r3, [r7, #15]
 8009262:	4618      	mov	r0, r3
 8009264:	f000 f8de 	bl	8009424 <USBD_Get_USB_Status>
 8009268:	4603      	mov	r3, r0
 800926a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800926c:	7bbb      	ldrb	r3, [r7, #14]
}
 800926e:	4618      	mov	r0, r3
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b084      	sub	sp, #16
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
 800927e:	460b      	mov	r3, r1
 8009280:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009282:	2300      	movs	r3, #0
 8009284:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009286:	2300      	movs	r3, #0
 8009288:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009290:	78fa      	ldrb	r2, [r7, #3]
 8009292:	4611      	mov	r1, r2
 8009294:	4618      	mov	r0, r3
 8009296:	f7fa fb1a 	bl	80038ce <HAL_PCD_EP_ClrStall>
 800929a:	4603      	mov	r3, r0
 800929c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800929e:	7bfb      	ldrb	r3, [r7, #15]
 80092a0:	4618      	mov	r0, r3
 80092a2:	f000 f8bf 	bl	8009424 <USBD_Get_USB_Status>
 80092a6:	4603      	mov	r3, r0
 80092a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b085      	sub	sp, #20
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	460b      	mov	r3, r1
 80092be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80092c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80092c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	da0b      	bge.n	80092e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80092d0:	78fb      	ldrb	r3, [r7, #3]
 80092d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80092d6:	68f9      	ldr	r1, [r7, #12]
 80092d8:	4613      	mov	r3, r2
 80092da:	00db      	lsls	r3, r3, #3
 80092dc:	4413      	add	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	440b      	add	r3, r1
 80092e2:	3316      	adds	r3, #22
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	e00b      	b.n	8009300 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80092e8:	78fb      	ldrb	r3, [r7, #3]
 80092ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80092ee:	68f9      	ldr	r1, [r7, #12]
 80092f0:	4613      	mov	r3, r2
 80092f2:	00db      	lsls	r3, r3, #3
 80092f4:	4413      	add	r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	440b      	add	r3, r1
 80092fa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80092fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009300:	4618      	mov	r0, r3
 8009302:	3714      	adds	r7, #20
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	460b      	mov	r3, r1
 8009316:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009318:	2300      	movs	r3, #0
 800931a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800931c:	2300      	movs	r3, #0
 800931e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009326:	78fa      	ldrb	r2, [r7, #3]
 8009328:	4611      	mov	r1, r2
 800932a:	4618      	mov	r0, r3
 800932c:	f7fa f907 	bl	800353e <HAL_PCD_SetAddress>
 8009330:	4603      	mov	r3, r0
 8009332:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009334:	7bfb      	ldrb	r3, [r7, #15]
 8009336:	4618      	mov	r0, r3
 8009338:	f000 f874 	bl	8009424 <USBD_Get_USB_Status>
 800933c:	4603      	mov	r3, r0
 800933e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009340:	7bbb      	ldrb	r3, [r7, #14]
}
 8009342:	4618      	mov	r0, r3
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800934a:	b580      	push	{r7, lr}
 800934c:	b086      	sub	sp, #24
 800934e:	af00      	add	r7, sp, #0
 8009350:	60f8      	str	r0, [r7, #12]
 8009352:	607a      	str	r2, [r7, #4]
 8009354:	603b      	str	r3, [r7, #0]
 8009356:	460b      	mov	r3, r1
 8009358:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800935a:	2300      	movs	r3, #0
 800935c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800935e:	2300      	movs	r3, #0
 8009360:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009368:	7af9      	ldrb	r1, [r7, #11]
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	f7fa fa11 	bl	8003794 <HAL_PCD_EP_Transmit>
 8009372:	4603      	mov	r3, r0
 8009374:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009376:	7dfb      	ldrb	r3, [r7, #23]
 8009378:	4618      	mov	r0, r3
 800937a:	f000 f853 	bl	8009424 <USBD_Get_USB_Status>
 800937e:	4603      	mov	r3, r0
 8009380:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009382:	7dbb      	ldrb	r3, [r7, #22]
}
 8009384:	4618      	mov	r0, r3
 8009386:	3718      	adds	r7, #24
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b086      	sub	sp, #24
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	607a      	str	r2, [r7, #4]
 8009396:	603b      	str	r3, [r7, #0]
 8009398:	460b      	mov	r3, r1
 800939a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800939c:	2300      	movs	r3, #0
 800939e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093a0:	2300      	movs	r3, #0
 80093a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80093aa:	7af9      	ldrb	r1, [r7, #11]
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	f7fa f99d 	bl	80036ee <HAL_PCD_EP_Receive>
 80093b4:	4603      	mov	r3, r0
 80093b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093b8:	7dfb      	ldrb	r3, [r7, #23]
 80093ba:	4618      	mov	r0, r3
 80093bc:	f000 f832 	bl	8009424 <USBD_Get_USB_Status>
 80093c0:	4603      	mov	r3, r0
 80093c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3718      	adds	r7, #24
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b082      	sub	sp, #8
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
 80093d6:	460b      	mov	r3, r1
 80093d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80093e0:	78fa      	ldrb	r2, [r7, #3]
 80093e2:	4611      	mov	r1, r2
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7fa f9bd 	bl	8003764 <HAL_PCD_EP_GetRxCount>
 80093ea:	4603      	mov	r3, r0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80093fc:	4b03      	ldr	r3, [pc, #12]	@ (800940c <USBD_static_malloc+0x18>)
}
 80093fe:	4618      	mov	r0, r3
 8009400:	370c      	adds	r7, #12
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	20003c34 	.word	0x20003c34

08009410 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]

}
 8009418:	bf00      	nop
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	4603      	mov	r3, r0
 800942c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800942e:	2300      	movs	r3, #0
 8009430:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009432:	79fb      	ldrb	r3, [r7, #7]
 8009434:	2b03      	cmp	r3, #3
 8009436:	d817      	bhi.n	8009468 <USBD_Get_USB_Status+0x44>
 8009438:	a201      	add	r2, pc, #4	@ (adr r2, 8009440 <USBD_Get_USB_Status+0x1c>)
 800943a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800943e:	bf00      	nop
 8009440:	08009451 	.word	0x08009451
 8009444:	08009457 	.word	0x08009457
 8009448:	0800945d 	.word	0x0800945d
 800944c:	08009463 	.word	0x08009463
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009450:	2300      	movs	r3, #0
 8009452:	73fb      	strb	r3, [r7, #15]
    break;
 8009454:	e00b      	b.n	800946e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009456:	2303      	movs	r3, #3
 8009458:	73fb      	strb	r3, [r7, #15]
    break;
 800945a:	e008      	b.n	800946e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800945c:	2301      	movs	r3, #1
 800945e:	73fb      	strb	r3, [r7, #15]
    break;
 8009460:	e005      	b.n	800946e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009462:	2303      	movs	r3, #3
 8009464:	73fb      	strb	r3, [r7, #15]
    break;
 8009466:	e002      	b.n	800946e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009468:	2303      	movs	r3, #3
 800946a:	73fb      	strb	r3, [r7, #15]
    break;
 800946c:	bf00      	nop
  }
  return usb_status;
 800946e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009470:	4618      	mov	r0, r3
 8009472:	3714      	adds	r7, #20
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <memset>:
 800947c:	4402      	add	r2, r0
 800947e:	4603      	mov	r3, r0
 8009480:	4293      	cmp	r3, r2
 8009482:	d100      	bne.n	8009486 <memset+0xa>
 8009484:	4770      	bx	lr
 8009486:	f803 1b01 	strb.w	r1, [r3], #1
 800948a:	e7f9      	b.n	8009480 <memset+0x4>

0800948c <__libc_init_array>:
 800948c:	b570      	push	{r4, r5, r6, lr}
 800948e:	4d0d      	ldr	r5, [pc, #52]	@ (80094c4 <__libc_init_array+0x38>)
 8009490:	4c0d      	ldr	r4, [pc, #52]	@ (80094c8 <__libc_init_array+0x3c>)
 8009492:	1b64      	subs	r4, r4, r5
 8009494:	10a4      	asrs	r4, r4, #2
 8009496:	2600      	movs	r6, #0
 8009498:	42a6      	cmp	r6, r4
 800949a:	d109      	bne.n	80094b0 <__libc_init_array+0x24>
 800949c:	4d0b      	ldr	r5, [pc, #44]	@ (80094cc <__libc_init_array+0x40>)
 800949e:	4c0c      	ldr	r4, [pc, #48]	@ (80094d0 <__libc_init_array+0x44>)
 80094a0:	f000 f818 	bl	80094d4 <_init>
 80094a4:	1b64      	subs	r4, r4, r5
 80094a6:	10a4      	asrs	r4, r4, #2
 80094a8:	2600      	movs	r6, #0
 80094aa:	42a6      	cmp	r6, r4
 80094ac:	d105      	bne.n	80094ba <__libc_init_array+0x2e>
 80094ae:	bd70      	pop	{r4, r5, r6, pc}
 80094b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80094b4:	4798      	blx	r3
 80094b6:	3601      	adds	r6, #1
 80094b8:	e7ee      	b.n	8009498 <__libc_init_array+0xc>
 80094ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80094be:	4798      	blx	r3
 80094c0:	3601      	adds	r6, #1
 80094c2:	e7f2      	b.n	80094aa <__libc_init_array+0x1e>
 80094c4:	08009554 	.word	0x08009554
 80094c8:	08009554 	.word	0x08009554
 80094cc:	08009554 	.word	0x08009554
 80094d0:	08009558 	.word	0x08009558

080094d4 <_init>:
 80094d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094d6:	bf00      	nop
 80094d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094da:	bc08      	pop	{r3}
 80094dc:	469e      	mov	lr, r3
 80094de:	4770      	bx	lr

080094e0 <_fini>:
 80094e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e2:	bf00      	nop
 80094e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094e6:	bc08      	pop	{r3}
 80094e8:	469e      	mov	lr, r3
 80094ea:	4770      	bx	lr
