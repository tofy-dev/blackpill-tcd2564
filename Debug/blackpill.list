
blackpill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009470  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08009608  08009608  0000a608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009668  08009668  0000b104  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009668  08009668  0000a668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009670  08009670  0000b104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009670  08009670  0000a670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009674  08009674  0000a674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  08009678  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ca0  20000104  0800977c  0000b104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005da4  0800977c  0000bda4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b104  2**0
                  CONTENTS, READONLY
 12 .debug_info   000155d3  00000000  00000000  0000b134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037df  00000000  00000000  00020707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  00023ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e99  00000000  00000000  00025200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a460  00000000  00000000  00026099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017319  00000000  00000000  000404f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bd55  00000000  00000000  00057812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3567  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fe8  00000000  00000000  000f35ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000f8594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000104 	.word	0x20000104
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080095f0 	.word	0x080095f0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000108 	.word	0x20000108
 80001d4:	080095f0 	.word	0x080095f0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 fea8 	bl	800125c <HAL_Init>

  /* USER CODE BEGIN Init */
  marked_buffer[0] = 0xDE;
 800050c:	4b29      	ldr	r3, [pc, #164]	@ (80005b4 <main+0xb0>)
 800050e:	22de      	movs	r2, #222	@ 0xde
 8000510:	701a      	strb	r2, [r3, #0]
  marked_buffer[1] = 0xAD;
 8000512:	4b28      	ldr	r3, [pc, #160]	@ (80005b4 <main+0xb0>)
 8000514:	22ad      	movs	r2, #173	@ 0xad
 8000516:	705a      	strb	r2, [r3, #1]
  marked_buffer[2] = 0xBE;
 8000518:	4b26      	ldr	r3, [pc, #152]	@ (80005b4 <main+0xb0>)
 800051a:	22be      	movs	r2, #190	@ 0xbe
 800051c:	709a      	strb	r2, [r3, #2]
  marked_buffer[3] = 0xEF;
 800051e:	4b25      	ldr	r3, [pc, #148]	@ (80005b4 <main+0xb0>)
 8000520:	22ef      	movs	r2, #239	@ 0xef
 8000522:	70da      	strb	r2, [r3, #3]

  marked_buffer[DMA_SIZE*2 + 4] = 0xFE;
 8000524:	4b23      	ldr	r3, [pc, #140]	@ (80005b4 <main+0xb0>)
 8000526:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800052a:	22fe      	movs	r2, #254	@ 0xfe
 800052c:	f883 2f44 	strb.w	r2, [r3, #3908]	@ 0xf44
  marked_buffer[DMA_SIZE*2 + 5] = 0xEB;
 8000530:	4b20      	ldr	r3, [pc, #128]	@ (80005b4 <main+0xb0>)
 8000532:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000536:	22eb      	movs	r2, #235	@ 0xeb
 8000538:	f883 2f45 	strb.w	r2, [r3, #3909]	@ 0xf45
  marked_buffer[DMA_SIZE*2 + 6] = 0xDA;
 800053c:	4b1d      	ldr	r3, [pc, #116]	@ (80005b4 <main+0xb0>)
 800053e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000542:	22da      	movs	r2, #218	@ 0xda
 8000544:	f883 2f46 	strb.w	r2, [r3, #3910]	@ 0xf46
  marked_buffer[DMA_SIZE*2 + 7] = 0xED;
 8000548:	4b1a      	ldr	r3, [pc, #104]	@ (80005b4 <main+0xb0>)
 800054a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800054e:	22ed      	movs	r2, #237	@ 0xed
 8000550:	f883 2f47 	strb.w	r2, [r3, #3911]	@ 0xf47
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000554:	f000 f83e 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000558:	f000 fb82 	bl	8000c60 <MX_GPIO_Init>
  MX_DMA_Init();
 800055c:	f000 fb60 	bl	8000c20 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000560:	f008 faac 	bl	8008abc <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000564:	f000 f8f0 	bl	8000748 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000568:	f000 f970 	bl	800084c <MX_TIM2_Init>
  MX_TIM3_Init();
 800056c:	f000 f9e8 	bl	8000940 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000570:	f000 fa5e 	bl	8000a30 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000574:	f000 f896 	bl	80006a4 <MX_ADC1_Init>
  MX_TIM5_Init();
 8000578:	f000 fad2 	bl	8000b20 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800057c:	2100      	movs	r1, #0
 800057e:	480e      	ldr	r0, [pc, #56]	@ (80005b8 <main+0xb4>)
 8000580:	f004 f948 	bl	8004814 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000584:	2100      	movs	r1, #0
 8000586:	480d      	ldr	r0, [pc, #52]	@ (80005bc <main+0xb8>)
 8000588:	f004 f944 	bl	8004814 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800058c:	2100      	movs	r1, #0
 800058e:	480c      	ldr	r0, [pc, #48]	@ (80005c0 <main+0xbc>)
 8000590:	f004 f940 	bl	8004814 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000594:	2100      	movs	r1, #0
 8000596:	480b      	ldr	r0, [pc, #44]	@ (80005c4 <main+0xc0>)
 8000598:	f004 f93c 	bl	8004814 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 800059c:	2104      	movs	r1, #4
 800059e:	480a      	ldr	r0, [pc, #40]	@ (80005c8 <main+0xc4>)
 80005a0:	f004 f938 	bl	8004814 <HAL_TIM_PWM_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) DMA_buffer, DMA_SIZE);
 80005a4:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80005a8:	4908      	ldr	r1, [pc, #32]	@ (80005cc <main+0xc8>)
 80005aa:	4809      	ldr	r0, [pc, #36]	@ (80005d0 <main+0xcc>)
 80005ac:	f001 f840 	bl	8001630 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <main+0xac>
 80005b4:	20002270 	.word	0x20002270
 80005b8:	200001c8 	.word	0x200001c8
 80005bc:	20000210 	.word	0x20000210
 80005c0:	20000258 	.word	0x20000258
 80005c4:	200002a0 	.word	0x200002a0
 80005c8:	200002e8 	.word	0x200002e8
 80005cc:	20000330 	.word	0x20000330
 80005d0:	20000120 	.word	0x20000120

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	@ 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	@ 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f008 ffca 	bl	800957c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b27      	ldr	r3, [pc, #156]	@ (800069c <SystemClock_Config+0xc8>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000600:	4a26      	ldr	r2, [pc, #152]	@ (800069c <SystemClock_Config+0xc8>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	@ 0x40
 8000608:	4b24      	ldr	r3, [pc, #144]	@ (800069c <SystemClock_Config+0xc8>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b21      	ldr	r3, [pc, #132]	@ (80006a0 <SystemClock_Config+0xcc>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a20      	ldr	r2, [pc, #128]	@ (80006a0 <SystemClock_Config+0xcc>)
 800061e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b1e      	ldr	r3, [pc, #120]	@ (80006a0 <SystemClock_Config+0xcc>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000630:	2301      	movs	r3, #1
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000634:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000638:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000644:	230f      	movs	r3, #15
 8000646:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000648:	2390      	movs	r3, #144	@ 0x90
 800064a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800064c:	2304      	movs	r3, #4
 800064e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000650:	2305      	movs	r3, #5
 8000652:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	4618      	mov	r0, r3
 800065a:	f003 fc0d 	bl	8003e78 <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000664:	f000 fb6c 	bl	8000d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066c:	2302      	movs	r3, #2
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000674:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000678:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2101      	movs	r1, #1
 8000684:	4618      	mov	r0, r3
 8000686:	f003 fe6f 	bl	8004368 <HAL_RCC_ClockConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000690:	f000 fb56 	bl	8000d40 <Error_Handler>
  }
}
 8000694:	bf00      	nop
 8000696:	3750      	adds	r7, #80	@ 0x50
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006aa:	463b      	mov	r3, r7
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006b6:	4b22      	ldr	r3, [pc, #136]	@ (8000740 <MX_ADC1_Init+0x9c>)
 80006b8:	4a22      	ldr	r2, [pc, #136]	@ (8000744 <MX_ADC1_Init+0xa0>)
 80006ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006bc:	4b20      	ldr	r3, [pc, #128]	@ (8000740 <MX_ADC1_Init+0x9c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000740 <MX_ADC1_Init+0x9c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000740 <MX_ADC1_Init+0x9c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000740 <MX_ADC1_Init+0x9c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000740 <MX_ADC1_Init+0x9c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006dc:	4b18      	ldr	r3, [pc, #96]	@ (8000740 <MX_ADC1_Init+0x9c>)
 80006de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80006e4:	4b16      	ldr	r3, [pc, #88]	@ (8000740 <MX_ADC1_Init+0x9c>)
 80006e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80006ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ec:	4b14      	ldr	r3, [pc, #80]	@ (8000740 <MX_ADC1_Init+0x9c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006f2:	4b13      	ldr	r3, [pc, #76]	@ (8000740 <MX_ADC1_Init+0x9c>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006f8:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <MX_ADC1_Init+0x9c>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000700:	4b0f      	ldr	r3, [pc, #60]	@ (8000740 <MX_ADC1_Init+0x9c>)
 8000702:	2201      	movs	r2, #1
 8000704:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000706:	480e      	ldr	r0, [pc, #56]	@ (8000740 <MX_ADC1_Init+0x9c>)
 8000708:	f000 fe3e 	bl	8001388 <HAL_ADC_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000712:	f000 fb15 	bl	8000d40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800071a:	2301      	movs	r3, #1
 800071c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4806      	ldr	r0, [pc, #24]	@ (8000740 <MX_ADC1_Init+0x9c>)
 8000728:	f001 f894 	bl	8001854 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000732:	f000 fb05 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000120 	.word	0x20000120
 8000744:	40012000 	.word	0x40012000

08000748 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b092      	sub	sp, #72	@ 0x48
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000758:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
 8000768:	615a      	str	r2, [r3, #20]
 800076a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2220      	movs	r2, #32
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f008 ff02 	bl	800957c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000778:	4b32      	ldr	r3, [pc, #200]	@ (8000844 <MX_TIM1_Init+0xfc>)
 800077a:	4a33      	ldr	r2, [pc, #204]	@ (8000848 <MX_TIM1_Init+0x100>)
 800077c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800077e:	4b31      	ldr	r3, [pc, #196]	@ (8000844 <MX_TIM1_Init+0xfc>)
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000784:	4b2f      	ldr	r3, [pc, #188]	@ (8000844 <MX_TIM1_Init+0xfc>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30-1;
 800078a:	4b2e      	ldr	r3, [pc, #184]	@ (8000844 <MX_TIM1_Init+0xfc>)
 800078c:	221d      	movs	r2, #29
 800078e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000790:	4b2c      	ldr	r3, [pc, #176]	@ (8000844 <MX_TIM1_Init+0xfc>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000796:	4b2b      	ldr	r3, [pc, #172]	@ (8000844 <MX_TIM1_Init+0xfc>)
 8000798:	2200      	movs	r2, #0
 800079a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079c:	4b29      	ldr	r3, [pc, #164]	@ (8000844 <MX_TIM1_Init+0xfc>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007a2:	4828      	ldr	r0, [pc, #160]	@ (8000844 <MX_TIM1_Init+0xfc>)
 80007a4:	f003 ffe7 	bl	8004776 <HAL_TIM_PWM_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80007ae:	f000 fac7 	bl	8000d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80007b2:	2320      	movs	r3, #32
 80007b4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007ba:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007be:	4619      	mov	r1, r3
 80007c0:	4820      	ldr	r0, [pc, #128]	@ (8000844 <MX_TIM1_Init+0xfc>)
 80007c2:	f004 fd7d 	bl	80052c0 <HAL_TIMEx_MasterConfigSynchronization>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80007cc:	f000 fab8 	bl	8000d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d0:	2360      	movs	r3, #96	@ 0x60
 80007d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 15;
 80007d4:	230f      	movs	r3, #15
 80007d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d8:	2300      	movs	r3, #0
 80007da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007dc:	2300      	movs	r3, #0
 80007de:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007e4:	2300      	movs	r3, #0
 80007e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007e8:	2300      	movs	r3, #0
 80007ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007f0:	2200      	movs	r2, #0
 80007f2:	4619      	mov	r1, r3
 80007f4:	4813      	ldr	r0, [pc, #76]	@ (8000844 <MX_TIM1_Init+0xfc>)
 80007f6:	f004 f917 	bl	8004a28 <HAL_TIM_PWM_ConfigChannel>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000800:	f000 fa9e 	bl	8000d40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000804:	2300      	movs	r3, #0
 8000806:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000818:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800081c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	4619      	mov	r1, r3
 8000826:	4807      	ldr	r0, [pc, #28]	@ (8000844 <MX_TIM1_Init+0xfc>)
 8000828:	f004 fdb8 	bl	800539c <HAL_TIMEx_ConfigBreakDeadTime>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000832:	f000 fa85 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000836:	4803      	ldr	r0, [pc, #12]	@ (8000844 <MX_TIM1_Init+0xfc>)
 8000838:	f000 fbb4 	bl	8000fa4 <HAL_TIM_MspPostInit>

}
 800083c:	bf00      	nop
 800083e:	3748      	adds	r7, #72	@ 0x48
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200001c8 	.word	0x200001c8
 8000848:	40010000 	.word	0x40010000

0800084c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08e      	sub	sp, #56	@ 0x38
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000852:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800086c:	463b      	mov	r3, r7
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]
 800087a:	615a      	str	r2, [r3, #20]
 800087c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800087e:	4b2e      	ldr	r3, [pc, #184]	@ (8000938 <MX_TIM2_Init+0xec>)
 8000880:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000884:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000886:	4b2c      	ldr	r3, [pc, #176]	@ (8000938 <MX_TIM2_Init+0xec>)
 8000888:	2200      	movs	r2, #0
 800088a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088c:	4b2a      	ldr	r3, [pc, #168]	@ (8000938 <MX_TIM2_Init+0xec>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 480000-1;
 8000892:	4b29      	ldr	r3, [pc, #164]	@ (8000938 <MX_TIM2_Init+0xec>)
 8000894:	4a29      	ldr	r2, [pc, #164]	@ (800093c <MX_TIM2_Init+0xf0>)
 8000896:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000898:	4b27      	ldr	r3, [pc, #156]	@ (8000938 <MX_TIM2_Init+0xec>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089e:	4b26      	ldr	r3, [pc, #152]	@ (8000938 <MX_TIM2_Init+0xec>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008a4:	4824      	ldr	r0, [pc, #144]	@ (8000938 <MX_TIM2_Init+0xec>)
 80008a6:	f003 ff17 	bl	80046d8 <HAL_TIM_Base_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80008b0:	f000 fa46 	bl	8000d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008b4:	4820      	ldr	r0, [pc, #128]	@ (8000938 <MX_TIM2_Init+0xec>)
 80008b6:	f003 ff5e 	bl	8004776 <HAL_TIM_PWM_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80008c0:	f000 fa3e 	bl	8000d40 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80008c4:	2306      	movs	r3, #6
 80008c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80008cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d0:	4619      	mov	r1, r3
 80008d2:	4819      	ldr	r0, [pc, #100]	@ (8000938 <MX_TIM2_Init+0xec>)
 80008d4:	f004 f96a 	bl	8004bac <HAL_TIM_SlaveConfigSynchro>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80008de:	f000 fa2f 	bl	8000d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4811      	ldr	r0, [pc, #68]	@ (8000938 <MX_TIM2_Init+0xec>)
 80008f2:	f004 fce5 	bl	80052c0 <HAL_TIMEx_MasterConfigSynchronization>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80008fc:	f000 fa20 	bl	8000d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000900:	2370      	movs	r3, #112	@ 0x70
 8000902:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 390;
 8000904:	f44f 73c3 	mov.w	r3, #390	@ 0x186
 8000908:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800090a:	2300      	movs	r3, #0
 800090c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000912:	463b      	mov	r3, r7
 8000914:	2200      	movs	r2, #0
 8000916:	4619      	mov	r1, r3
 8000918:	4807      	ldr	r0, [pc, #28]	@ (8000938 <MX_TIM2_Init+0xec>)
 800091a:	f004 f885 	bl	8004a28 <HAL_TIM_PWM_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000924:	f000 fa0c 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000928:	4803      	ldr	r0, [pc, #12]	@ (8000938 <MX_TIM2_Init+0xec>)
 800092a:	f000 fb3b 	bl	8000fa4 <HAL_TIM_MspPostInit>

}
 800092e:	bf00      	nop
 8000930:	3738      	adds	r7, #56	@ 0x38
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000210 	.word	0x20000210
 800093c:	000752ff 	.word	0x000752ff

08000940 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08e      	sub	sp, #56	@ 0x38
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000946:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000960:	463b      	mov	r3, r7
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]
 800096e:	615a      	str	r2, [r3, #20]
 8000970:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000972:	4b2d      	ldr	r3, [pc, #180]	@ (8000a28 <MX_TIM3_Init+0xe8>)
 8000974:	4a2d      	ldr	r2, [pc, #180]	@ (8000a2c <MX_TIM3_Init+0xec>)
 8000976:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 8000978:	4b2b      	ldr	r3, [pc, #172]	@ (8000a28 <MX_TIM3_Init+0xe8>)
 800097a:	2203      	movs	r2, #3
 800097c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097e:	4b2a      	ldr	r3, [pc, #168]	@ (8000a28 <MX_TIM3_Init+0xe8>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 30-1;
 8000984:	4b28      	ldr	r3, [pc, #160]	@ (8000a28 <MX_TIM3_Init+0xe8>)
 8000986:	221d      	movs	r2, #29
 8000988:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098a:	4b27      	ldr	r3, [pc, #156]	@ (8000a28 <MX_TIM3_Init+0xe8>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000990:	4b25      	ldr	r3, [pc, #148]	@ (8000a28 <MX_TIM3_Init+0xe8>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000996:	4824      	ldr	r0, [pc, #144]	@ (8000a28 <MX_TIM3_Init+0xe8>)
 8000998:	f003 fe9e 	bl	80046d8 <HAL_TIM_Base_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80009a2:	f000 f9cd 	bl	8000d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009a6:	4820      	ldr	r0, [pc, #128]	@ (8000a28 <MX_TIM3_Init+0xe8>)
 80009a8:	f003 fee5 	bl	8004776 <HAL_TIM_PWM_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80009b2:	f000 f9c5 	bl	8000d40 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80009b6:	2306      	movs	r3, #6
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80009be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c2:	4619      	mov	r1, r3
 80009c4:	4818      	ldr	r0, [pc, #96]	@ (8000a28 <MX_TIM3_Init+0xe8>)
 80009c6:	f004 f8f1 	bl	8004bac <HAL_TIM_SlaveConfigSynchro>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80009d0:	f000 f9b6 	bl	8000d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009d4:	2320      	movs	r3, #32
 80009d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4811      	ldr	r0, [pc, #68]	@ (8000a28 <MX_TIM3_Init+0xe8>)
 80009e4:	f004 fc6c 	bl	80052c0 <HAL_TIMEx_MasterConfigSynchronization>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80009ee:	f000 f9a7 	bl	8000d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f2:	2360      	movs	r3, #96	@ 0x60
 80009f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 15;
 80009f6:	230f      	movs	r3, #15
 80009f8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a02:	463b      	mov	r3, r7
 8000a04:	2200      	movs	r2, #0
 8000a06:	4619      	mov	r1, r3
 8000a08:	4807      	ldr	r0, [pc, #28]	@ (8000a28 <MX_TIM3_Init+0xe8>)
 8000a0a:	f004 f80d 	bl	8004a28 <HAL_TIM_PWM_ConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000a14:	f000 f994 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a18:	4803      	ldr	r0, [pc, #12]	@ (8000a28 <MX_TIM3_Init+0xe8>)
 8000a1a:	f000 fac3 	bl	8000fa4 <HAL_TIM_MspPostInit>

}
 8000a1e:	bf00      	nop
 8000a20:	3738      	adds	r7, #56	@ 0x38
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000258 	.word	0x20000258
 8000a2c:	40000400 	.word	0x40000400

08000a30 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08e      	sub	sp, #56	@ 0x38
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a50:	463b      	mov	r3, r7
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]
 8000a5e:	615a      	str	r2, [r3, #20]
 8000a60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a62:	4b2d      	ldr	r3, [pc, #180]	@ (8000b18 <MX_TIM4_Init+0xe8>)
 8000a64:	4a2d      	ldr	r2, [pc, #180]	@ (8000b1c <MX_TIM4_Init+0xec>)
 8000a66:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000-1;
 8000a68:	4b2b      	ldr	r3, [pc, #172]	@ (8000b18 <MX_TIM4_Init+0xe8>)
 8000a6a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a6e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a70:	4b29      	ldr	r3, [pc, #164]	@ (8000b18 <MX_TIM4_Init+0xe8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 30-1;
 8000a76:	4b28      	ldr	r3, [pc, #160]	@ (8000b18 <MX_TIM4_Init+0xe8>)
 8000a78:	221d      	movs	r2, #29
 8000a7a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7c:	4b26      	ldr	r3, [pc, #152]	@ (8000b18 <MX_TIM4_Init+0xe8>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a82:	4b25      	ldr	r3, [pc, #148]	@ (8000b18 <MX_TIM4_Init+0xe8>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a88:	4823      	ldr	r0, [pc, #140]	@ (8000b18 <MX_TIM4_Init+0xe8>)
 8000a8a:	f003 fe25 	bl	80046d8 <HAL_TIM_Base_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000a94:	f000 f954 	bl	8000d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a98:	481f      	ldr	r0, [pc, #124]	@ (8000b18 <MX_TIM4_Init+0xe8>)
 8000a9a:	f003 fe6c 	bl	8004776 <HAL_TIM_PWM_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000aa4:	f000 f94c 	bl	8000d40 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000aa8:	2306      	movs	r3, #6
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000ab0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4818      	ldr	r0, [pc, #96]	@ (8000b18 <MX_TIM4_Init+0xe8>)
 8000ab8:	f004 f878 	bl	8004bac <HAL_TIM_SlaveConfigSynchro>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000ac2:	f000 f93d 	bl	8000d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ac6:	2320      	movs	r3, #32
 8000ac8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4810      	ldr	r0, [pc, #64]	@ (8000b18 <MX_TIM4_Init+0xe8>)
 8000ad6:	f004 fbf3 	bl	80052c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000ae0:	f000 f92e 	bl	8000d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae4:	2360      	movs	r3, #96	@ 0x60
 8000ae6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 15;
 8000ae8:	230f      	movs	r3, #15
 8000aea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000af4:	463b      	mov	r3, r7
 8000af6:	2200      	movs	r2, #0
 8000af8:	4619      	mov	r1, r3
 8000afa:	4807      	ldr	r0, [pc, #28]	@ (8000b18 <MX_TIM4_Init+0xe8>)
 8000afc:	f003 ff94 	bl	8004a28 <HAL_TIM_PWM_ConfigChannel>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000b06:	f000 f91b 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b0a:	4803      	ldr	r0, [pc, #12]	@ (8000b18 <MX_TIM4_Init+0xe8>)
 8000b0c:	f000 fa4a 	bl	8000fa4 <HAL_TIM_MspPostInit>

}
 8000b10:	bf00      	nop
 8000b12:	3738      	adds	r7, #56	@ 0x38
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200002a0 	.word	0x200002a0
 8000b1c:	40000800 	.word	0x40000800

08000b20 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08e      	sub	sp, #56	@ 0x38
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b40:	463b      	mov	r3, r7
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]
 8000b4e:	615a      	str	r2, [r3, #20]
 8000b50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b52:	4b31      	ldr	r3, [pc, #196]	@ (8000c18 <MX_TIM5_Init+0xf8>)
 8000b54:	4a31      	ldr	r2, [pc, #196]	@ (8000c1c <MX_TIM5_Init+0xfc>)
 8000b56:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000b58:	4b2f      	ldr	r3, [pc, #188]	@ (8000c18 <MX_TIM5_Init+0xf8>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5e:	4b2e      	ldr	r3, [pc, #184]	@ (8000c18 <MX_TIM5_Init+0xf8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90-1;
 8000b64:	4b2c      	ldr	r3, [pc, #176]	@ (8000c18 <MX_TIM5_Init+0xf8>)
 8000b66:	2259      	movs	r2, #89	@ 0x59
 8000b68:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6a:	4b2b      	ldr	r3, [pc, #172]	@ (8000c18 <MX_TIM5_Init+0xf8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b70:	4b29      	ldr	r3, [pc, #164]	@ (8000c18 <MX_TIM5_Init+0xf8>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000b76:	4828      	ldr	r0, [pc, #160]	@ (8000c18 <MX_TIM5_Init+0xf8>)
 8000b78:	f003 fdae 	bl	80046d8 <HAL_TIM_Base_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000b82:	f000 f8dd 	bl	8000d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000b86:	4824      	ldr	r0, [pc, #144]	@ (8000c18 <MX_TIM5_Init+0xf8>)
 8000b88:	f003 fdf5 	bl	8004776 <HAL_TIM_PWM_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000b92:	f000 f8d5 	bl	8000d40 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 8000b96:	2108      	movs	r1, #8
 8000b98:	481f      	ldr	r0, [pc, #124]	@ (8000c18 <MX_TIM5_Init+0xf8>)
 8000b9a:	f003 feeb 	bl	8004974 <HAL_TIM_OnePulse_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8000ba4:	f000 f8cc 	bl	8000d40 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000ba8:	2306      	movs	r3, #6
 8000baa:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8000bac:	2320      	movs	r3, #32
 8000bae:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000bb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4818      	ldr	r0, [pc, #96]	@ (8000c18 <MX_TIM5_Init+0xf8>)
 8000bb8:	f003 fff8 	bl	8004bac <HAL_TIM_SlaveConfigSynchro>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM5_Init+0xa6>
  {
    Error_Handler();
 8000bc2:	f000 f8bd 	bl	8000d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4810      	ldr	r0, [pc, #64]	@ (8000c18 <MX_TIM5_Init+0xf8>)
 8000bd6:	f004 fb73 	bl	80052c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM5_Init+0xc4>
  {
    Error_Handler();
 8000be0:	f000 f8ae 	bl	8000d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000be4:	2370      	movs	r3, #112	@ 0x70
 8000be6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 30-1;
 8000be8:	231d      	movs	r3, #29
 8000bea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	2204      	movs	r2, #4
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4807      	ldr	r0, [pc, #28]	@ (8000c18 <MX_TIM5_Init+0xf8>)
 8000bfc:	f003 ff14 	bl	8004a28 <HAL_TIM_PWM_ConfigChannel>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 8000c06:	f000 f89b 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000c0a:	4803      	ldr	r0, [pc, #12]	@ (8000c18 <MX_TIM5_Init+0xf8>)
 8000c0c:	f000 f9ca 	bl	8000fa4 <HAL_TIM_MspPostInit>

}
 8000c10:	bf00      	nop
 8000c12:	3738      	adds	r7, #56	@ 0x38
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200002e8 	.word	0x200002e8
 8000c1c:	40000c00 	.word	0x40000c00

08000c20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <MX_DMA_Init+0x3c>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c5c <MX_DMA_Init+0x3c>)
 8000c30:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c36:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <MX_DMA_Init+0x3c>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	2038      	movs	r0, #56	@ 0x38
 8000c48:	f001 f999 	bl	8001f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c4c:	2038      	movs	r0, #56	@ 0x38
 8000c4e:	f001 f9b2 	bl	8001fb6 <HAL_NVIC_EnableIRQ>

}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800

08000c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b17      	ldr	r3, [pc, #92]	@ (8000cc8 <MX_GPIO_Init+0x68>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	4a16      	ldr	r2, [pc, #88]	@ (8000cc8 <MX_GPIO_Init+0x68>)
 8000c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c76:	4b14      	ldr	r3, [pc, #80]	@ (8000cc8 <MX_GPIO_Init+0x68>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	4b10      	ldr	r3, [pc, #64]	@ (8000cc8 <MX_GPIO_Init+0x68>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc8 <MX_GPIO_Init+0x68>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc8 <MX_GPIO_Init+0x68>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <MX_GPIO_Init+0x68>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	4a08      	ldr	r2, [pc, #32]	@ (8000cc8 <MX_GPIO_Init+0x68>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cae:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <MX_GPIO_Init+0x68>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000cba:	bf00      	nop
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40023800 	.word	0x40023800

08000ccc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
//	char* data = "Callback Complete!";
//	CDC_Transmit_FS((uint8_t*)data, strlen(data));

    if (hadc->Instance == ADC1) {
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a14      	ldr	r2, [pc, #80]	@ (8000d2c <HAL_ADC_ConvCpltCallback+0x60>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d122      	bne.n	8000d24 <HAL_ADC_ConvCpltCallback+0x58>
		counter = counter % 100;
 8000cde:	4b14      	ldr	r3, [pc, #80]	@ (8000d30 <HAL_ADC_ConvCpltCallback+0x64>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	4b14      	ldr	r3, [pc, #80]	@ (8000d34 <HAL_ADC_ConvCpltCallback+0x68>)
 8000ce4:	fb83 1302 	smull	r1, r3, r3, r2
 8000ce8:	1159      	asrs	r1, r3, #5
 8000cea:	17d3      	asrs	r3, r2, #31
 8000cec:	1acb      	subs	r3, r1, r3
 8000cee:	2164      	movs	r1, #100	@ 0x64
 8000cf0:	fb01 f303 	mul.w	r3, r1, r3
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	4a0e      	ldr	r2, [pc, #56]	@ (8000d30 <HAL_ADC_ConvCpltCallback+0x64>)
 8000cf8:	6013      	str	r3, [r2, #0]
		if (counter++ == 0) {
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000d30 <HAL_ADC_ConvCpltCallback+0x64>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	490b      	ldr	r1, [pc, #44]	@ (8000d30 <HAL_ADC_ConvCpltCallback+0x64>)
 8000d02:	600a      	str	r2, [r1, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d10d      	bne.n	8000d24 <HAL_ADC_ConvCpltCallback+0x58>
			memcpy(&marked_buffer[4], DMA_buffer, DMA_SIZE*2);
 8000d08:	4b0b      	ldr	r3, [pc, #44]	@ (8000d38 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000d0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000d3c <HAL_ADC_ConvCpltCallback+0x70>)
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	4611      	mov	r1, r2
 8000d10:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000d14:	4618      	mov	r0, r3
 8000d16:	f008 fc5d 	bl	80095d4 <memcpy>
			CDC_Transmit_FS((uint8_t*)marked_buffer, sizeof(marked_buffer));
 8000d1a:	f641 7148 	movw	r1, #8008	@ 0x1f48
 8000d1e:	4806      	ldr	r0, [pc, #24]	@ (8000d38 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000d20:	f007 ffda 	bl	8008cd8 <CDC_Transmit_FS>
		}
    }
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40012000 	.word	0x40012000
 8000d30:	200041b8 	.word	0x200041b8
 8000d34:	51eb851f 	.word	0x51eb851f
 8000d38:	20002270 	.word	0x20002270
 8000d3c:	20000330 	.word	0x20000330

08000d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <Error_Handler+0x8>

08000d4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d62:	4b0d      	ldr	r3, [pc, #52]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d76:	4a08      	ldr	r2, [pc, #32]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d7e:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <HAL_MspInit+0x4c>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800

08000d9c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	@ 0x28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a33      	ldr	r2, [pc, #204]	@ (8000e88 <HAL_ADC_MspInit+0xec>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d15f      	bne.n	8000e7e <HAL_ADC_MspInit+0xe2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	4b32      	ldr	r3, [pc, #200]	@ (8000e8c <HAL_ADC_MspInit+0xf0>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc6:	4a31      	ldr	r2, [pc, #196]	@ (8000e8c <HAL_ADC_MspInit+0xf0>)
 8000dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dce:	4b2f      	ldr	r3, [pc, #188]	@ (8000e8c <HAL_ADC_MspInit+0xf0>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b2b      	ldr	r3, [pc, #172]	@ (8000e8c <HAL_ADC_MspInit+0xf0>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	4a2a      	ldr	r2, [pc, #168]	@ (8000e8c <HAL_ADC_MspInit+0xf0>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dea:	4b28      	ldr	r3, [pc, #160]	@ (8000e8c <HAL_ADC_MspInit+0xf0>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000df6:	2301      	movs	r3, #1
 8000df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	4821      	ldr	r0, [pc, #132]	@ (8000e90 <HAL_ADC_MspInit+0xf4>)
 8000e0a:	f001 fc5f 	bl	80026cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e0e:	4b21      	ldr	r3, [pc, #132]	@ (8000e94 <HAL_ADC_MspInit+0xf8>)
 8000e10:	4a21      	ldr	r2, [pc, #132]	@ (8000e98 <HAL_ADC_MspInit+0xfc>)
 8000e12:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e14:	4b1f      	ldr	r3, [pc, #124]	@ (8000e94 <HAL_ADC_MspInit+0xf8>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e94 <HAL_ADC_MspInit+0xf8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e20:	4b1c      	ldr	r3, [pc, #112]	@ (8000e94 <HAL_ADC_MspInit+0xf8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e26:	4b1b      	ldr	r3, [pc, #108]	@ (8000e94 <HAL_ADC_MspInit+0xf8>)
 8000e28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e2c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e2e:	4b19      	ldr	r3, [pc, #100]	@ (8000e94 <HAL_ADC_MspInit+0xf8>)
 8000e30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e34:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e36:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <HAL_ADC_MspInit+0xf8>)
 8000e38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e3c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e3e:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <HAL_ADC_MspInit+0xf8>)
 8000e40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e44:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e46:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <HAL_ADC_MspInit+0xf8>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <HAL_ADC_MspInit+0xf8>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e52:	4810      	ldr	r0, [pc, #64]	@ (8000e94 <HAL_ADC_MspInit+0xf8>)
 8000e54:	f001 f8ca 	bl	8001fec <HAL_DMA_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000e5e:	f7ff ff6f 	bl	8000d40 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a0b      	ldr	r2, [pc, #44]	@ (8000e94 <HAL_ADC_MspInit+0xf8>)
 8000e66:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e68:	4a0a      	ldr	r2, [pc, #40]	@ (8000e94 <HAL_ADC_MspInit+0xf8>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	2012      	movs	r0, #18
 8000e74:	f001 f883 	bl	8001f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e78:	2012      	movs	r0, #18
 8000e7a:	f001 f89c 	bl	8001fb6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e7e:	bf00      	nop
 8000e80:	3728      	adds	r7, #40	@ 0x28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40012000 	.word	0x40012000
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020000 	.word	0x40020000
 8000e94:	20000168 	.word	0x20000168
 8000e98:	40026410 	.word	0x40026410

08000e9c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d10d      	bne.n	8000eca <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <HAL_TIM_PWM_MspInit+0x40>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	4a09      	ldr	r2, [pc, #36]	@ (8000edc <HAL_TIM_PWM_MspInit+0x40>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ebe:	4b07      	ldr	r3, [pc, #28]	@ (8000edc <HAL_TIM_PWM_MspInit+0x40>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40010000 	.word	0x40010000
 8000edc:	40023800 	.word	0x40023800

08000ee0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ef0:	d10e      	bne.n	8000f10 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	4b27      	ldr	r3, [pc, #156]	@ (8000f94 <HAL_TIM_Base_MspInit+0xb4>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efa:	4a26      	ldr	r2, [pc, #152]	@ (8000f94 <HAL_TIM_Base_MspInit+0xb4>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f02:	4b24      	ldr	r3, [pc, #144]	@ (8000f94 <HAL_TIM_Base_MspInit+0xb4>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000f0e:	e03a      	b.n	8000f86 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a20      	ldr	r2, [pc, #128]	@ (8000f98 <HAL_TIM_Base_MspInit+0xb8>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d10e      	bne.n	8000f38 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f94 <HAL_TIM_Base_MspInit+0xb4>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f22:	4a1c      	ldr	r2, [pc, #112]	@ (8000f94 <HAL_TIM_Base_MspInit+0xb4>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f94 <HAL_TIM_Base_MspInit+0xb4>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
}
 8000f36:	e026      	b.n	8000f86 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a17      	ldr	r2, [pc, #92]	@ (8000f9c <HAL_TIM_Base_MspInit+0xbc>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d10e      	bne.n	8000f60 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b13      	ldr	r3, [pc, #76]	@ (8000f94 <HAL_TIM_Base_MspInit+0xb4>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4a:	4a12      	ldr	r2, [pc, #72]	@ (8000f94 <HAL_TIM_Base_MspInit+0xb4>)
 8000f4c:	f043 0304 	orr.w	r3, r3, #4
 8000f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f52:	4b10      	ldr	r3, [pc, #64]	@ (8000f94 <HAL_TIM_Base_MspInit+0xb4>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f56:	f003 0304 	and.w	r3, r3, #4
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
}
 8000f5e:	e012      	b.n	8000f86 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM5)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa0 <HAL_TIM_Base_MspInit+0xc0>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d10d      	bne.n	8000f86 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	4b09      	ldr	r3, [pc, #36]	@ (8000f94 <HAL_TIM_Base_MspInit+0xb4>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f72:	4a08      	ldr	r2, [pc, #32]	@ (8000f94 <HAL_TIM_Base_MspInit+0xb4>)
 8000f74:	f043 0308 	orr.w	r3, r3, #8
 8000f78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f7a:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <HAL_TIM_Base_MspInit+0xb4>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7e:	f003 0308 	and.w	r3, r3, #8
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
}
 8000f86:	bf00      	nop
 8000f88:	371c      	adds	r7, #28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40000400 	.word	0x40000400
 8000f9c:	40000800 	.word	0x40000800
 8000fa0:	40000c00 	.word	0x40000c00

08000fa4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08c      	sub	sp, #48	@ 0x30
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 031c 	add.w	r3, r7, #28
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a5a      	ldr	r2, [pc, #360]	@ (800112c <HAL_TIM_MspPostInit+0x188>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d11f      	bne.n	8001006 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
 8000fca:	4b59      	ldr	r3, [pc, #356]	@ (8001130 <HAL_TIM_MspPostInit+0x18c>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	4a58      	ldr	r2, [pc, #352]	@ (8001130 <HAL_TIM_MspPostInit+0x18c>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd6:	4b56      	ldr	r3, [pc, #344]	@ (8001130 <HAL_TIM_MspPostInit+0x18c>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	61bb      	str	r3, [r7, #24]
 8000fe0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fe2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	f107 031c 	add.w	r3, r7, #28
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	484d      	ldr	r0, [pc, #308]	@ (8001134 <HAL_TIM_MspPostInit+0x190>)
 8001000:	f001 fb64 	bl	80026cc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001004:	e08e      	b.n	8001124 <HAL_TIM_MspPostInit+0x180>
  else if(htim->Instance==TIM2)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800100e:	d11e      	bne.n	800104e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	4b46      	ldr	r3, [pc, #280]	@ (8001130 <HAL_TIM_MspPostInit+0x18c>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001018:	4a45      	ldr	r2, [pc, #276]	@ (8001130 <HAL_TIM_MspPostInit+0x18c>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001020:	4b43      	ldr	r3, [pc, #268]	@ (8001130 <HAL_TIM_MspPostInit+0x18c>)
 8001022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800102c:	2320      	movs	r3, #32
 800102e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800103c:	2301      	movs	r3, #1
 800103e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4619      	mov	r1, r3
 8001046:	483b      	ldr	r0, [pc, #236]	@ (8001134 <HAL_TIM_MspPostInit+0x190>)
 8001048:	f001 fb40 	bl	80026cc <HAL_GPIO_Init>
}
 800104c:	e06a      	b.n	8001124 <HAL_TIM_MspPostInit+0x180>
  else if(htim->Instance==TIM3)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a39      	ldr	r2, [pc, #228]	@ (8001138 <HAL_TIM_MspPostInit+0x194>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d11e      	bne.n	8001096 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	4b34      	ldr	r3, [pc, #208]	@ (8001130 <HAL_TIM_MspPostInit+0x18c>)
 800105e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001060:	4a33      	ldr	r2, [pc, #204]	@ (8001130 <HAL_TIM_MspPostInit+0x18c>)
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	6313      	str	r3, [r2, #48]	@ 0x30
 8001068:	4b31      	ldr	r3, [pc, #196]	@ (8001130 <HAL_TIM_MspPostInit+0x18c>)
 800106a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001074:	2340      	movs	r3, #64	@ 0x40
 8001076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001084:	2302      	movs	r3, #2
 8001086:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	4619      	mov	r1, r3
 800108e:	4829      	ldr	r0, [pc, #164]	@ (8001134 <HAL_TIM_MspPostInit+0x190>)
 8001090:	f001 fb1c 	bl	80026cc <HAL_GPIO_Init>
}
 8001094:	e046      	b.n	8001124 <HAL_TIM_MspPostInit+0x180>
  else if(htim->Instance==TIM4)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a28      	ldr	r2, [pc, #160]	@ (800113c <HAL_TIM_MspPostInit+0x198>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d11e      	bne.n	80010de <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	4b22      	ldr	r3, [pc, #136]	@ (8001130 <HAL_TIM_MspPostInit+0x18c>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a8:	4a21      	ldr	r2, [pc, #132]	@ (8001130 <HAL_TIM_MspPostInit+0x18c>)
 80010aa:	f043 0302 	orr.w	r3, r3, #2
 80010ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001130 <HAL_TIM_MspPostInit+0x18c>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010bc:	2340      	movs	r3, #64	@ 0x40
 80010be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010cc:	2302      	movs	r3, #2
 80010ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	4619      	mov	r1, r3
 80010d6:	481a      	ldr	r0, [pc, #104]	@ (8001140 <HAL_TIM_MspPostInit+0x19c>)
 80010d8:	f001 faf8 	bl	80026cc <HAL_GPIO_Init>
}
 80010dc:	e022      	b.n	8001124 <HAL_TIM_MspPostInit+0x180>
  else if(htim->Instance==TIM5)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a18      	ldr	r2, [pc, #96]	@ (8001144 <HAL_TIM_MspPostInit+0x1a0>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d11d      	bne.n	8001124 <HAL_TIM_MspPostInit+0x180>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e8:	2300      	movs	r3, #0
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <HAL_TIM_MspPostInit+0x18c>)
 80010ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001130 <HAL_TIM_MspPostInit+0x18c>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <HAL_TIM_MspPostInit+0x18c>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001104:	2302      	movs	r3, #2
 8001106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001114:	2302      	movs	r3, #2
 8001116:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4619      	mov	r1, r3
 800111e:	4805      	ldr	r0, [pc, #20]	@ (8001134 <HAL_TIM_MspPostInit+0x190>)
 8001120:	f001 fad4 	bl	80026cc <HAL_GPIO_Init>
}
 8001124:	bf00      	nop
 8001126:	3730      	adds	r7, #48	@ 0x30
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40010000 	.word	0x40010000
 8001130:	40023800 	.word	0x40023800
 8001134:	40020000 	.word	0x40020000
 8001138:	40000400 	.word	0x40000400
 800113c:	40000800 	.word	0x40000800
 8001140:	40020400 	.word	0x40020400
 8001144:	40000c00 	.word	0x40000c00

08001148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <NMI_Handler+0x4>

08001150 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <HardFault_Handler+0x4>

08001158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <MemManage_Handler+0x4>

08001160 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <BusFault_Handler+0x4>

08001168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <UsageFault_Handler+0x4>

08001170 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800119e:	f000 f8af 	bl	8001300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <ADC_IRQHandler+0x10>)
 80011ae:	f000 f92e 	bl	800140e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000120 	.word	0x20000120

080011bc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011c0:	4802      	ldr	r0, [pc, #8]	@ (80011cc <DMA2_Stream0_IRQHandler+0x10>)
 80011c2:	f001 f819 	bl	80021f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000168 	.word	0x20000168

080011d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011d4:	4802      	ldr	r0, [pc, #8]	@ (80011e0 <OTG_FS_IRQHandler+0x10>)
 80011d6:	f001 fd41 	bl	8002c5c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200056a0 	.word	0x200056a0

080011e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e8:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <SystemInit+0x20>)
 80011ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ee:	4a05      	ldr	r2, [pc, #20]	@ (8001204 <SystemInit+0x20>)
 80011f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001208:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001240 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800120c:	f7ff ffea 	bl	80011e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001210:	480c      	ldr	r0, [pc, #48]	@ (8001244 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001212:	490d      	ldr	r1, [pc, #52]	@ (8001248 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001214:	4a0d      	ldr	r2, [pc, #52]	@ (800124c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0a      	ldr	r2, [pc, #40]	@ (8001250 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001228:	4c0a      	ldr	r4, [pc, #40]	@ (8001254 <LoopFillZerobss+0x22>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001236:	f008 f9a9 	bl	800958c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123a:	f7ff f963 	bl	8000504 <main>
  bx  lr    
 800123e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001240:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001248:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 800124c:	08009678 	.word	0x08009678
  ldr r2, =_sbss
 8001250:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8001254:	20005da4 	.word	0x20005da4

08001258 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <DMA1_Stream0_IRQHandler>
	...

0800125c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001260:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <HAL_Init+0x40>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0d      	ldr	r2, [pc, #52]	@ (800129c <HAL_Init+0x40>)
 8001266:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800126a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800126c:	4b0b      	ldr	r3, [pc, #44]	@ (800129c <HAL_Init+0x40>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <HAL_Init+0x40>)
 8001272:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001276:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001278:	4b08      	ldr	r3, [pc, #32]	@ (800129c <HAL_Init+0x40>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a07      	ldr	r2, [pc, #28]	@ (800129c <HAL_Init+0x40>)
 800127e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001282:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001284:	2003      	movs	r0, #3
 8001286:	f000 fe6f 	bl	8001f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800128a:	200f      	movs	r0, #15
 800128c:	f000 f808 	bl	80012a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001290:	f7ff fd5c 	bl	8000d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40023c00 	.word	0x40023c00

080012a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a8:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <HAL_InitTick+0x54>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <HAL_InitTick+0x58>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4619      	mov	r1, r3
 80012b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 fe87 	bl	8001fd2 <HAL_SYSTICK_Config>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00e      	b.n	80012ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b0f      	cmp	r3, #15
 80012d2:	d80a      	bhi.n	80012ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d4:	2200      	movs	r2, #0
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012dc:	f000 fe4f 	bl	8001f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e0:	4a06      	ldr	r2, [pc, #24]	@ (80012fc <HAL_InitTick+0x5c>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e000      	b.n	80012ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000000 	.word	0x20000000
 80012f8:	20000008 	.word	0x20000008
 80012fc:	20000004 	.word	0x20000004

08001300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <HAL_IncTick+0x20>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <HAL_IncTick+0x24>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4413      	add	r3, r2
 8001310:	4a04      	ldr	r2, [pc, #16]	@ (8001324 <HAL_IncTick+0x24>)
 8001312:	6013      	str	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000008 	.word	0x20000008
 8001324:	200041bc 	.word	0x200041bc

08001328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return uwTick;
 800132c:	4b03      	ldr	r3, [pc, #12]	@ (800133c <HAL_GetTick+0x14>)
 800132e:	681b      	ldr	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	200041bc 	.word	0x200041bc

08001340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001348:	f7ff ffee 	bl	8001328 <HAL_GetTick>
 800134c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001358:	d005      	beq.n	8001366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800135a:	4b0a      	ldr	r3, [pc, #40]	@ (8001384 <HAL_Delay+0x44>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001366:	bf00      	nop
 8001368:	f7ff ffde 	bl	8001328 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	429a      	cmp	r2, r3
 8001376:	d8f7      	bhi.n	8001368 <HAL_Delay+0x28>
  {
  }
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000008 	.word	0x20000008

08001388 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e033      	b.n	8001406 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d109      	bne.n	80013ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fcf8 	bl	8000d9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	f003 0310 	and.w	r3, r3, #16
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d118      	bne.n	80013f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80013ce:	f023 0302 	bic.w	r3, r3, #2
 80013d2:	f043 0202 	orr.w	r2, r3, #2
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 fb6c 	bl	8001ab8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	f023 0303 	bic.w	r3, r3, #3
 80013ee:	f043 0201 	orr.w	r2, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80013f6:	e001      	b.n	80013fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001404:	7bfb      	ldrb	r3, [r7, #15]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	f003 0320 	and.w	r3, r3, #32
 800143c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d049      	beq.n	80014d8 <HAL_ADC_IRQHandler+0xca>
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d046      	beq.n	80014d8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144e:	f003 0310 	and.w	r3, r3, #16
 8001452:	2b00      	cmp	r3, #0
 8001454:	d105      	bne.n	8001462 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d12b      	bne.n	80014c8 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001474:	2b00      	cmp	r3, #0
 8001476:	d127      	bne.n	80014c8 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800147e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001482:	2b00      	cmp	r3, #0
 8001484:	d006      	beq.n	8001494 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001490:	2b00      	cmp	r3, #0
 8001492:	d119      	bne.n	80014c8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0220 	bic.w	r2, r2, #32
 80014a2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d105      	bne.n	80014c8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c0:	f043 0201 	orr.w	r2, r3, #1
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff fbff 	bl	8000ccc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f06f 0212 	mvn.w	r2, #18
 80014d6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014e6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d057      	beq.n	800159e <HAL_ADC_IRQHandler+0x190>
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d054      	beq.n	800159e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f8:	f003 0310 	and.w	r3, r3, #16
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d105      	bne.n	800150c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001504:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d139      	bne.n	800158e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001520:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001524:	2b00      	cmp	r3, #0
 8001526:	d006      	beq.n	8001536 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001532:	2b00      	cmp	r3, #0
 8001534:	d12b      	bne.n	800158e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001540:	2b00      	cmp	r3, #0
 8001542:	d124      	bne.n	800158e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800154e:	2b00      	cmp	r3, #0
 8001550:	d11d      	bne.n	800158e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001556:	2b00      	cmp	r3, #0
 8001558:	d119      	bne.n	800158e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001568:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800157e:	2b00      	cmp	r3, #0
 8001580:	d105      	bne.n	800158e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001586:	f043 0201 	orr.w	r2, r3, #1
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 fc10 	bl	8001db4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f06f 020c 	mvn.w	r2, #12
 800159c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015ac:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d017      	beq.n	80015e4 <HAL_ADC_IRQHandler+0x1d6>
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d014      	beq.n	80015e4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d10d      	bne.n	80015e4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f929 	bl	800182c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f06f 0201 	mvn.w	r2, #1
 80015e2:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0320 	and.w	r3, r3, #32
 80015ea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015f2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d015      	beq.n	8001626 <HAL_ADC_IRQHandler+0x218>
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d012      	beq.n	8001626 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001604:	f043 0202 	orr.w	r2, r3, #2
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f06f 0220 	mvn.w	r2, #32
 8001614:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 f912 	bl	8001840 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f06f 0220 	mvn.w	r2, #32
 8001624:	601a      	str	r2, [r3, #0]
  }
}
 8001626:	bf00      	nop
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800164a:	2b01      	cmp	r3, #1
 800164c:	d101      	bne.n	8001652 <HAL_ADC_Start_DMA+0x22>
 800164e:	2302      	movs	r3, #2
 8001650:	e0d0      	b.n	80017f4 <HAL_ADC_Start_DMA+0x1c4>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b01      	cmp	r3, #1
 8001666:	d018      	beq.n	800169a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f042 0201 	orr.w	r2, r2, #1
 8001676:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001678:	4b60      	ldr	r3, [pc, #384]	@ (80017fc <HAL_ADC_Start_DMA+0x1cc>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a60      	ldr	r2, [pc, #384]	@ (8001800 <HAL_ADC_Start_DMA+0x1d0>)
 800167e:	fba2 2303 	umull	r2, r3, r2, r3
 8001682:	0c9a      	lsrs	r2, r3, #18
 8001684:	4613      	mov	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4413      	add	r3, r2
 800168a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800168c:	e002      	b.n	8001694 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	3b01      	subs	r3, #1
 8001692:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f9      	bne.n	800168e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016a8:	d107      	bne.n	80016ba <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016b8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	f040 8088 	bne.w	80017da <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80016d2:	f023 0301 	bic.w	r3, r3, #1
 80016d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d007      	beq.n	80016fc <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016f4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001700:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001704:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001708:	d106      	bne.n	8001718 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170e:	f023 0206 	bic.w	r2, r3, #6
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	645a      	str	r2, [r3, #68]	@ 0x44
 8001716:	e002      	b.n	800171e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2200      	movs	r2, #0
 800171c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001726:	4b37      	ldr	r3, [pc, #220]	@ (8001804 <HAL_ADC_Start_DMA+0x1d4>)
 8001728:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800172e:	4a36      	ldr	r2, [pc, #216]	@ (8001808 <HAL_ADC_Start_DMA+0x1d8>)
 8001730:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001736:	4a35      	ldr	r2, [pc, #212]	@ (800180c <HAL_ADC_Start_DMA+0x1dc>)
 8001738:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800173e:	4a34      	ldr	r2, [pc, #208]	@ (8001810 <HAL_ADC_Start_DMA+0x1e0>)
 8001740:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800174a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800175a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800176a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	334c      	adds	r3, #76	@ 0x4c
 8001776:	4619      	mov	r1, r3
 8001778:	68ba      	ldr	r2, [r7, #8]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f000 fce4 	bl	8002148 <HAL_DMA_Start_IT>
 8001780:	4603      	mov	r3, r0
 8001782:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 031f 	and.w	r3, r3, #31
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10f      	bne.n	80017b0 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d129      	bne.n	80017f2 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	e020      	b.n	80017f2 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a17      	ldr	r2, [pc, #92]	@ (8001814 <HAL_ADC_Start_DMA+0x1e4>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d11b      	bne.n	80017f2 <HAL_ADC_Start_DMA+0x1c2>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d114      	bne.n	80017f2 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	e00b      	b.n	80017f2 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017de:	f043 0210 	orr.w	r2, r3, #16
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ea:	f043 0201 	orr.w	r2, r3, #1
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80017f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3720      	adds	r7, #32
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000000 	.word	0x20000000
 8001800:	431bde83 	.word	0x431bde83
 8001804:	40012300 	.word	0x40012300
 8001808:	08001cb1 	.word	0x08001cb1
 800180c:	08001d6b 	.word	0x08001d6b
 8001810:	08001d87 	.word	0x08001d87
 8001814:	40012000 	.word	0x40012000

08001818 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <HAL_ADC_ConfigChannel+0x1c>
 800186c:	2302      	movs	r3, #2
 800186e:	e113      	b.n	8001a98 <HAL_ADC_ConfigChannel+0x244>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b09      	cmp	r3, #9
 800187e:	d925      	bls.n	80018cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68d9      	ldr	r1, [r3, #12]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	b29b      	uxth	r3, r3
 800188c:	461a      	mov	r2, r3
 800188e:	4613      	mov	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4413      	add	r3, r2
 8001894:	3b1e      	subs	r3, #30
 8001896:	2207      	movs	r2, #7
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43da      	mvns	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	400a      	ands	r2, r1
 80018a4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68d9      	ldr	r1, [r3, #12]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	4618      	mov	r0, r3
 80018b8:	4603      	mov	r3, r0
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	4403      	add	r3, r0
 80018be:	3b1e      	subs	r3, #30
 80018c0:	409a      	lsls	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	e022      	b.n	8001912 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6919      	ldr	r1, [r3, #16]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	461a      	mov	r2, r3
 80018da:	4613      	mov	r3, r2
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	4413      	add	r3, r2
 80018e0:	2207      	movs	r2, #7
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43da      	mvns	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	400a      	ands	r2, r1
 80018ee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6919      	ldr	r1, [r3, #16]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	4618      	mov	r0, r3
 8001902:	4603      	mov	r3, r0
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4403      	add	r3, r0
 8001908:	409a      	lsls	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b06      	cmp	r3, #6
 8001918:	d824      	bhi.n	8001964 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	3b05      	subs	r3, #5
 800192c:	221f      	movs	r2, #31
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43da      	mvns	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	400a      	ands	r2, r1
 800193a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	b29b      	uxth	r3, r3
 8001948:	4618      	mov	r0, r3
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	3b05      	subs	r3, #5
 8001956:	fa00 f203 	lsl.w	r2, r0, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	635a      	str	r2, [r3, #52]	@ 0x34
 8001962:	e04c      	b.n	80019fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b0c      	cmp	r3, #12
 800196a:	d824      	bhi.n	80019b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	3b23      	subs	r3, #35	@ 0x23
 800197e:	221f      	movs	r2, #31
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43da      	mvns	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	400a      	ands	r2, r1
 800198c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	b29b      	uxth	r3, r3
 800199a:	4618      	mov	r0, r3
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	3b23      	subs	r3, #35	@ 0x23
 80019a8:	fa00 f203 	lsl.w	r2, r0, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80019b4:	e023      	b.n	80019fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	4613      	mov	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	3b41      	subs	r3, #65	@ 0x41
 80019c8:	221f      	movs	r2, #31
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43da      	mvns	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	400a      	ands	r2, r1
 80019d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	4618      	mov	r0, r3
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	3b41      	subs	r3, #65	@ 0x41
 80019f2:	fa00 f203 	lsl.w	r2, r0, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019fe:	4b29      	ldr	r3, [pc, #164]	@ (8001aa4 <HAL_ADC_ConfigChannel+0x250>)
 8001a00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a28      	ldr	r2, [pc, #160]	@ (8001aa8 <HAL_ADC_ConfigChannel+0x254>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d10f      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x1d8>
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b12      	cmp	r3, #18
 8001a12:	d10b      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a1d      	ldr	r2, [pc, #116]	@ (8001aa8 <HAL_ADC_ConfigChannel+0x254>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d12b      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x23a>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8001aac <HAL_ADC_ConfigChannel+0x258>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d003      	beq.n	8001a48 <HAL_ADC_ConfigChannel+0x1f4>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b11      	cmp	r3, #17
 8001a46:	d122      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a11      	ldr	r2, [pc, #68]	@ (8001aac <HAL_ADC_ConfigChannel+0x258>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d111      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a6a:	4b11      	ldr	r3, [pc, #68]	@ (8001ab0 <HAL_ADC_ConfigChannel+0x25c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a11      	ldr	r2, [pc, #68]	@ (8001ab4 <HAL_ADC_ConfigChannel+0x260>)
 8001a70:	fba2 2303 	umull	r2, r3, r2, r3
 8001a74:	0c9a      	lsrs	r2, r3, #18
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a80:	e002      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	3b01      	subs	r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f9      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	40012300 	.word	0x40012300
 8001aa8:	40012000 	.word	0x40012000
 8001aac:	10000012 	.word	0x10000012
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	431bde83 	.word	0x431bde83

08001ab8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ac0:	4b79      	ldr	r3, [pc, #484]	@ (8001ca8 <ADC_Init+0x1f0>)
 8001ac2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001aec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6859      	ldr	r1, [r3, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	021a      	lsls	r2, r3, #8
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6859      	ldr	r1, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6899      	ldr	r1, [r3, #8]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4a:	4a58      	ldr	r2, [pc, #352]	@ (8001cac <ADC_Init+0x1f4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d022      	beq.n	8001b96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6899      	ldr	r1, [r3, #8]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6899      	ldr	r1, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	e00f      	b.n	8001bb6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ba4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bb4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0202 	bic.w	r2, r2, #2
 8001bc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6899      	ldr	r1, [r3, #8]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	7e1b      	ldrb	r3, [r3, #24]
 8001bd0:	005a      	lsls	r2, r3, #1
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d01b      	beq.n	8001c1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bf2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6859      	ldr	r1, [r3, #4]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	035a      	lsls	r2, r3, #13
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	e007      	b.n	8001c2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c2a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	051a      	lsls	r2, r3, #20
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6899      	ldr	r1, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c6e:	025a      	lsls	r2, r3, #9
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6899      	ldr	r1, [r3, #8]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	029a      	lsls	r2, r3, #10
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	609a      	str	r2, [r3, #8]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	40012300 	.word	0x40012300
 8001cac:	0f000001 	.word	0x0f000001

08001cb0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cbc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d13c      	bne.n	8001d44 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d12b      	bne.n	8001d3c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d127      	bne.n	8001d3c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d006      	beq.n	8001d08 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d119      	bne.n	8001d3c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0220 	bic.w	r2, r2, #32
 8001d16:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d105      	bne.n	8001d3c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d34:	f043 0201 	orr.w	r2, r3, #1
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f7fe ffc5 	bl	8000ccc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d42:	e00e      	b.n	8001d62 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d48:	f003 0310 	and.w	r3, r3, #16
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f7ff fd75 	bl	8001840 <HAL_ADC_ErrorCallback>
}
 8001d56:	e004      	b.n	8001d62 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	4798      	blx	r3
}
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b084      	sub	sp, #16
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d76:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f7ff fd4d 	bl	8001818 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b084      	sub	sp, #16
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d92:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2240      	movs	r2, #64	@ 0x40
 8001d98:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9e:	f043 0204 	orr.w	r2, r3, #4
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f7ff fd4a 	bl	8001840 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001dac:	bf00      	nop
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e0c <__NVIC_SetPriorityGrouping+0x44>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001de4:	4013      	ands	r3, r2
 8001de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001df4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfa:	4a04      	ldr	r2, [pc, #16]	@ (8001e0c <__NVIC_SetPriorityGrouping+0x44>)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	60d3      	str	r3, [r2, #12]
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e14:	4b04      	ldr	r3, [pc, #16]	@ (8001e28 <__NVIC_GetPriorityGrouping+0x18>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	0a1b      	lsrs	r3, r3, #8
 8001e1a:	f003 0307 	and.w	r3, r3, #7
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	db0b      	blt.n	8001e56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	f003 021f 	and.w	r2, r3, #31
 8001e44:	4907      	ldr	r1, [pc, #28]	@ (8001e64 <__NVIC_EnableIRQ+0x38>)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000e100 	.word	0xe000e100

08001e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	db0a      	blt.n	8001e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	490c      	ldr	r1, [pc, #48]	@ (8001eb4 <__NVIC_SetPriority+0x4c>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	0112      	lsls	r2, r2, #4
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e90:	e00a      	b.n	8001ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4908      	ldr	r1, [pc, #32]	@ (8001eb8 <__NVIC_SetPriority+0x50>)
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	3b04      	subs	r3, #4
 8001ea0:	0112      	lsls	r2, r2, #4
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	761a      	strb	r2, [r3, #24]
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000e100 	.word	0xe000e100
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b089      	sub	sp, #36	@ 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f1c3 0307 	rsb	r3, r3, #7
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	bf28      	it	cs
 8001eda:	2304      	movcs	r3, #4
 8001edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	2b06      	cmp	r3, #6
 8001ee4:	d902      	bls.n	8001eec <NVIC_EncodePriority+0x30>
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3b03      	subs	r3, #3
 8001eea:	e000      	b.n	8001eee <NVIC_EncodePriority+0x32>
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43da      	mvns	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	401a      	ands	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0e:	43d9      	mvns	r1, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	4313      	orrs	r3, r2
         );
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3724      	adds	r7, #36	@ 0x24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f34:	d301      	bcc.n	8001f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f36:	2301      	movs	r3, #1
 8001f38:	e00f      	b.n	8001f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f64 <SysTick_Config+0x40>)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f42:	210f      	movs	r1, #15
 8001f44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f48:	f7ff ff8e 	bl	8001e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f4c:	4b05      	ldr	r3, [pc, #20]	@ (8001f64 <SysTick_Config+0x40>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f52:	4b04      	ldr	r3, [pc, #16]	@ (8001f64 <SysTick_Config+0x40>)
 8001f54:	2207      	movs	r2, #7
 8001f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	e000e010 	.word	0xe000e010

08001f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff ff29 	bl	8001dc8 <__NVIC_SetPriorityGrouping>
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b086      	sub	sp, #24
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	4603      	mov	r3, r0
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	607a      	str	r2, [r7, #4]
 8001f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f90:	f7ff ff3e 	bl	8001e10 <__NVIC_GetPriorityGrouping>
 8001f94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	68b9      	ldr	r1, [r7, #8]
 8001f9a:	6978      	ldr	r0, [r7, #20]
 8001f9c:	f7ff ff8e 	bl	8001ebc <NVIC_EncodePriority>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff5d 	bl	8001e68 <__NVIC_SetPriority>
}
 8001fae:	bf00      	nop
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff31 	bl	8001e2c <__NVIC_EnableIRQ>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ffa2 	bl	8001f24 <SysTick_Config>
 8001fe0:	4603      	mov	r3, r0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ff8:	f7ff f996 	bl	8001328 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e099      	b.n	800213c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2202      	movs	r2, #2
 800200c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0201 	bic.w	r2, r2, #1
 8002026:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002028:	e00f      	b.n	800204a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800202a:	f7ff f97d 	bl	8001328 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b05      	cmp	r3, #5
 8002036:	d908      	bls.n	800204a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2220      	movs	r2, #32
 800203c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2203      	movs	r2, #3
 8002042:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e078      	b.n	800213c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1e8      	bne.n	800202a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	4b38      	ldr	r3, [pc, #224]	@ (8002144 <HAL_DMA_Init+0x158>)
 8002064:	4013      	ands	r3, r2
 8002066:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002076:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002082:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800208e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	4313      	orrs	r3, r2
 800209a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d107      	bne.n	80020b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ac:	4313      	orrs	r3, r2
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f023 0307 	bic.w	r3, r3, #7
 80020ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d117      	bne.n	800210e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00e      	beq.n	800210e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 fa6f 	bl	80025d4 <DMA_CheckFifoParam>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2240      	movs	r2, #64	@ 0x40
 8002100:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800210a:	2301      	movs	r3, #1
 800210c:	e016      	b.n	800213c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 fa26 	bl	8002568 <DMA_CalcBaseAndBitshift>
 800211c:	4603      	mov	r3, r0
 800211e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002124:	223f      	movs	r2, #63	@ 0x3f
 8002126:	409a      	lsls	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	f010803f 	.word	0xf010803f

08002148 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
 8002154:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_DMA_Start_IT+0x26>
 800216a:	2302      	movs	r3, #2
 800216c:	e040      	b.n	80021f0 <HAL_DMA_Start_IT+0xa8>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b01      	cmp	r3, #1
 8002180:	d12f      	bne.n	80021e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2202      	movs	r2, #2
 8002186:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 f9b8 	bl	800250c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a0:	223f      	movs	r2, #63	@ 0x3f
 80021a2:	409a      	lsls	r2, r3
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0216 	orr.w	r2, r2, #22
 80021b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d007      	beq.n	80021d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0208 	orr.w	r2, r2, #8
 80021ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0201 	orr.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	e005      	b.n	80021ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021ea:	2302      	movs	r3, #2
 80021ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002204:	4b8e      	ldr	r3, [pc, #568]	@ (8002440 <HAL_DMA_IRQHandler+0x248>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a8e      	ldr	r2, [pc, #568]	@ (8002444 <HAL_DMA_IRQHandler+0x24c>)
 800220a:	fba2 2303 	umull	r2, r3, r2, r3
 800220e:	0a9b      	lsrs	r3, r3, #10
 8002210:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002216:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002222:	2208      	movs	r2, #8
 8002224:	409a      	lsls	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4013      	ands	r3, r2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d01a      	beq.n	8002264 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d013      	beq.n	8002264 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0204 	bic.w	r2, r2, #4
 800224a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002250:	2208      	movs	r2, #8
 8002252:	409a      	lsls	r2, r3
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225c:	f043 0201 	orr.w	r2, r3, #1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002268:	2201      	movs	r2, #1
 800226a:	409a      	lsls	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4013      	ands	r3, r2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d012      	beq.n	800229a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00b      	beq.n	800229a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002286:	2201      	movs	r2, #1
 8002288:	409a      	lsls	r2, r3
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002292:	f043 0202 	orr.w	r2, r3, #2
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800229e:	2204      	movs	r2, #4
 80022a0:	409a      	lsls	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d012      	beq.n	80022d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00b      	beq.n	80022d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022bc:	2204      	movs	r2, #4
 80022be:	409a      	lsls	r2, r3
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c8:	f043 0204 	orr.w	r2, r3, #4
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d4:	2210      	movs	r2, #16
 80022d6:	409a      	lsls	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d043      	beq.n	8002368 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d03c      	beq.n	8002368 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f2:	2210      	movs	r2, #16
 80022f4:	409a      	lsls	r2, r3
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d018      	beq.n	800233a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d108      	bne.n	8002328 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231a:	2b00      	cmp	r3, #0
 800231c:	d024      	beq.n	8002368 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	4798      	blx	r3
 8002326:	e01f      	b.n	8002368 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800232c:	2b00      	cmp	r3, #0
 800232e:	d01b      	beq.n	8002368 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	4798      	blx	r3
 8002338:	e016      	b.n	8002368 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002344:	2b00      	cmp	r3, #0
 8002346:	d107      	bne.n	8002358 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0208 	bic.w	r2, r2, #8
 8002356:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236c:	2220      	movs	r2, #32
 800236e:	409a      	lsls	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4013      	ands	r3, r2
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 808f 	beq.w	8002498 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 8087 	beq.w	8002498 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800238e:	2220      	movs	r2, #32
 8002390:	409a      	lsls	r2, r3
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b05      	cmp	r3, #5
 80023a0:	d136      	bne.n	8002410 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0216 	bic.w	r2, r2, #22
 80023b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695a      	ldr	r2, [r3, #20]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d103      	bne.n	80023d2 <HAL_DMA_IRQHandler+0x1da>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d007      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0208 	bic.w	r2, r2, #8
 80023e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e6:	223f      	movs	r2, #63	@ 0x3f
 80023e8:	409a      	lsls	r2, r3
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002402:	2b00      	cmp	r3, #0
 8002404:	d07e      	beq.n	8002504 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	4798      	blx	r3
        }
        return;
 800240e:	e079      	b.n	8002504 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d01d      	beq.n	800245a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10d      	bne.n	8002448 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002430:	2b00      	cmp	r3, #0
 8002432:	d031      	beq.n	8002498 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	4798      	blx	r3
 800243c:	e02c      	b.n	8002498 <HAL_DMA_IRQHandler+0x2a0>
 800243e:	bf00      	nop
 8002440:	20000000 	.word	0x20000000
 8002444:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800244c:	2b00      	cmp	r3, #0
 800244e:	d023      	beq.n	8002498 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	4798      	blx	r3
 8002458:	e01e      	b.n	8002498 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10f      	bne.n	8002488 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0210 	bic.w	r2, r2, #16
 8002476:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800249c:	2b00      	cmp	r3, #0
 800249e:	d032      	beq.n	8002506 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d022      	beq.n	80024f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2205      	movs	r2, #5
 80024b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0201 	bic.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	3301      	adds	r3, #1
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d307      	bcc.n	80024e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f2      	bne.n	80024c4 <HAL_DMA_IRQHandler+0x2cc>
 80024de:	e000      	b.n	80024e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d005      	beq.n	8002506 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	4798      	blx	r3
 8002502:	e000      	b.n	8002506 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002504:	bf00      	nop
    }
  }
}
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
 8002518:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002528:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	2b40      	cmp	r3, #64	@ 0x40
 8002538:	d108      	bne.n	800254c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800254a:	e007      	b.n	800255c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	60da      	str	r2, [r3, #12]
}
 800255c:	bf00      	nop
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	3b10      	subs	r3, #16
 8002578:	4a14      	ldr	r2, [pc, #80]	@ (80025cc <DMA_CalcBaseAndBitshift+0x64>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002582:	4a13      	ldr	r2, [pc, #76]	@ (80025d0 <DMA_CalcBaseAndBitshift+0x68>)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4413      	add	r3, r2
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2b03      	cmp	r3, #3
 8002594:	d909      	bls.n	80025aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800259e:	f023 0303 	bic.w	r3, r3, #3
 80025a2:	1d1a      	adds	r2, r3, #4
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	659a      	str	r2, [r3, #88]	@ 0x58
 80025a8:	e007      	b.n	80025ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025b2:	f023 0303 	bic.w	r3, r3, #3
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	aaaaaaab 	.word	0xaaaaaaab
 80025d0:	08009660 	.word	0x08009660

080025d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d11f      	bne.n	800262e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d856      	bhi.n	80026a2 <DMA_CheckFifoParam+0xce>
 80025f4:	a201      	add	r2, pc, #4	@ (adr r2, 80025fc <DMA_CheckFifoParam+0x28>)
 80025f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fa:	bf00      	nop
 80025fc:	0800260d 	.word	0x0800260d
 8002600:	0800261f 	.word	0x0800261f
 8002604:	0800260d 	.word	0x0800260d
 8002608:	080026a3 	.word	0x080026a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002610:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d046      	beq.n	80026a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800261c:	e043      	b.n	80026a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002622:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002626:	d140      	bne.n	80026aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800262c:	e03d      	b.n	80026aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002636:	d121      	bne.n	800267c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2b03      	cmp	r3, #3
 800263c:	d837      	bhi.n	80026ae <DMA_CheckFifoParam+0xda>
 800263e:	a201      	add	r2, pc, #4	@ (adr r2, 8002644 <DMA_CheckFifoParam+0x70>)
 8002640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002644:	08002655 	.word	0x08002655
 8002648:	0800265b 	.word	0x0800265b
 800264c:	08002655 	.word	0x08002655
 8002650:	0800266d 	.word	0x0800266d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
      break;
 8002658:	e030      	b.n	80026bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800265e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d025      	beq.n	80026b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800266a:	e022      	b.n	80026b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002670:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002674:	d11f      	bne.n	80026b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800267a:	e01c      	b.n	80026b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d903      	bls.n	800268a <DMA_CheckFifoParam+0xb6>
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2b03      	cmp	r3, #3
 8002686:	d003      	beq.n	8002690 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002688:	e018      	b.n	80026bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	73fb      	strb	r3, [r7, #15]
      break;
 800268e:	e015      	b.n	80026bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002694:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00e      	beq.n	80026ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]
      break;
 80026a0:	e00b      	b.n	80026ba <DMA_CheckFifoParam+0xe6>
      break;
 80026a2:	bf00      	nop
 80026a4:	e00a      	b.n	80026bc <DMA_CheckFifoParam+0xe8>
      break;
 80026a6:	bf00      	nop
 80026a8:	e008      	b.n	80026bc <DMA_CheckFifoParam+0xe8>
      break;
 80026aa:	bf00      	nop
 80026ac:	e006      	b.n	80026bc <DMA_CheckFifoParam+0xe8>
      break;
 80026ae:	bf00      	nop
 80026b0:	e004      	b.n	80026bc <DMA_CheckFifoParam+0xe8>
      break;
 80026b2:	bf00      	nop
 80026b4:	e002      	b.n	80026bc <DMA_CheckFifoParam+0xe8>
      break;   
 80026b6:	bf00      	nop
 80026b8:	e000      	b.n	80026bc <DMA_CheckFifoParam+0xe8>
      break;
 80026ba:	bf00      	nop
    }
  } 
  
  return status; 
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop

080026cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b089      	sub	sp, #36	@ 0x24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026de:	2300      	movs	r3, #0
 80026e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	e159      	b.n	800299c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026e8:	2201      	movs	r2, #1
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	429a      	cmp	r2, r3
 8002702:	f040 8148 	bne.w	8002996 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	2b01      	cmp	r3, #1
 8002710:	d005      	beq.n	800271e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800271a:	2b02      	cmp	r3, #2
 800271c:	d130      	bne.n	8002780 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	2203      	movs	r2, #3
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002754:	2201      	movs	r2, #1
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 0201 	and.w	r2, r3, #1
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b03      	cmp	r3, #3
 800278a:	d017      	beq.n	80027bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	2203      	movs	r2, #3
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d123      	bne.n	8002810 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	08da      	lsrs	r2, r3, #3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3208      	adds	r2, #8
 80027d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	220f      	movs	r2, #15
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	08da      	lsrs	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	3208      	adds	r2, #8
 800280a:	69b9      	ldr	r1, [r7, #24]
 800280c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	2203      	movs	r2, #3
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 0203 	and.w	r2, r3, #3
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80a2 	beq.w	8002996 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	4b57      	ldr	r3, [pc, #348]	@ (80029b4 <HAL_GPIO_Init+0x2e8>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285a:	4a56      	ldr	r2, [pc, #344]	@ (80029b4 <HAL_GPIO_Init+0x2e8>)
 800285c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002860:	6453      	str	r3, [r2, #68]	@ 0x44
 8002862:	4b54      	ldr	r3, [pc, #336]	@ (80029b4 <HAL_GPIO_Init+0x2e8>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002866:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800286e:	4a52      	ldr	r2, [pc, #328]	@ (80029b8 <HAL_GPIO_Init+0x2ec>)
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	089b      	lsrs	r3, r3, #2
 8002874:	3302      	adds	r3, #2
 8002876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	220f      	movs	r2, #15
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a49      	ldr	r2, [pc, #292]	@ (80029bc <HAL_GPIO_Init+0x2f0>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d019      	beq.n	80028ce <HAL_GPIO_Init+0x202>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a48      	ldr	r2, [pc, #288]	@ (80029c0 <HAL_GPIO_Init+0x2f4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d013      	beq.n	80028ca <HAL_GPIO_Init+0x1fe>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a47      	ldr	r2, [pc, #284]	@ (80029c4 <HAL_GPIO_Init+0x2f8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d00d      	beq.n	80028c6 <HAL_GPIO_Init+0x1fa>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a46      	ldr	r2, [pc, #280]	@ (80029c8 <HAL_GPIO_Init+0x2fc>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d007      	beq.n	80028c2 <HAL_GPIO_Init+0x1f6>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a45      	ldr	r2, [pc, #276]	@ (80029cc <HAL_GPIO_Init+0x300>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d101      	bne.n	80028be <HAL_GPIO_Init+0x1f2>
 80028ba:	2304      	movs	r3, #4
 80028bc:	e008      	b.n	80028d0 <HAL_GPIO_Init+0x204>
 80028be:	2307      	movs	r3, #7
 80028c0:	e006      	b.n	80028d0 <HAL_GPIO_Init+0x204>
 80028c2:	2303      	movs	r3, #3
 80028c4:	e004      	b.n	80028d0 <HAL_GPIO_Init+0x204>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e002      	b.n	80028d0 <HAL_GPIO_Init+0x204>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <HAL_GPIO_Init+0x204>
 80028ce:	2300      	movs	r3, #0
 80028d0:	69fa      	ldr	r2, [r7, #28]
 80028d2:	f002 0203 	and.w	r2, r2, #3
 80028d6:	0092      	lsls	r2, r2, #2
 80028d8:	4093      	lsls	r3, r2
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028e0:	4935      	ldr	r1, [pc, #212]	@ (80029b8 <HAL_GPIO_Init+0x2ec>)
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	089b      	lsrs	r3, r3, #2
 80028e6:	3302      	adds	r3, #2
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ee:	4b38      	ldr	r3, [pc, #224]	@ (80029d0 <HAL_GPIO_Init+0x304>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002912:	4a2f      	ldr	r2, [pc, #188]	@ (80029d0 <HAL_GPIO_Init+0x304>)
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002918:	4b2d      	ldr	r3, [pc, #180]	@ (80029d0 <HAL_GPIO_Init+0x304>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800293c:	4a24      	ldr	r2, [pc, #144]	@ (80029d0 <HAL_GPIO_Init+0x304>)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002942:	4b23      	ldr	r3, [pc, #140]	@ (80029d0 <HAL_GPIO_Init+0x304>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002966:	4a1a      	ldr	r2, [pc, #104]	@ (80029d0 <HAL_GPIO_Init+0x304>)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800296c:	4b18      	ldr	r3, [pc, #96]	@ (80029d0 <HAL_GPIO_Init+0x304>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002990:	4a0f      	ldr	r2, [pc, #60]	@ (80029d0 <HAL_GPIO_Init+0x304>)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3301      	adds	r3, #1
 800299a:	61fb      	str	r3, [r7, #28]
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	2b0f      	cmp	r3, #15
 80029a0:	f67f aea2 	bls.w	80026e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029a4:	bf00      	nop
 80029a6:	bf00      	nop
 80029a8:	3724      	adds	r7, #36	@ 0x24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40013800 	.word	0x40013800
 80029bc:	40020000 	.word	0x40020000
 80029c0:	40020400 	.word	0x40020400
 80029c4:	40020800 	.word	0x40020800
 80029c8:	40020c00 	.word	0x40020c00
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40013c00 	.word	0x40013c00

080029d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af02      	add	r7, sp, #8
 80029da:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e101      	b.n	8002bea <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d106      	bne.n	8002a06 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f006 fab1 	bl	8008f68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2203      	movs	r2, #3
 8002a0a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a14:	d102      	bne.n	8002a1c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f002 fe24 	bl	800566e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	7c1a      	ldrb	r2, [r3, #16]
 8002a2e:	f88d 2000 	strb.w	r2, [sp]
 8002a32:	3304      	adds	r3, #4
 8002a34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a36:	f002 fd03 	bl	8005440 <USB_CoreInit>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0ce      	b.n	8002bea <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2100      	movs	r1, #0
 8002a52:	4618      	mov	r0, r3
 8002a54:	f002 fe1c 	bl	8005690 <USB_SetCurrentMode>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d005      	beq.n	8002a6a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2202      	movs	r2, #2
 8002a62:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e0bf      	b.n	8002bea <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	73fb      	strb	r3, [r7, #15]
 8002a6e:	e04a      	b.n	8002b06 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a70:	7bfa      	ldrb	r2, [r7, #15]
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	3315      	adds	r3, #21
 8002a80:	2201      	movs	r2, #1
 8002a82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a84:	7bfa      	ldrb	r2, [r7, #15]
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	3314      	adds	r3, #20
 8002a94:	7bfa      	ldrb	r2, [r7, #15]
 8002a96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a98:	7bfa      	ldrb	r2, [r7, #15]
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
 8002a9c:	b298      	uxth	r0, r3
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	332e      	adds	r3, #46	@ 0x2e
 8002aac:	4602      	mov	r2, r0
 8002aae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ab0:	7bfa      	ldrb	r2, [r7, #15]
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	3318      	adds	r3, #24
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ac4:	7bfa      	ldrb	r2, [r7, #15]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	331c      	adds	r3, #28
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ad8:	7bfa      	ldrb	r2, [r7, #15]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	3320      	adds	r3, #32
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002aec:	7bfa      	ldrb	r2, [r7, #15]
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	4413      	add	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	3324      	adds	r3, #36	@ 0x24
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	3301      	adds	r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	791b      	ldrb	r3, [r3, #4]
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d3af      	bcc.n	8002a70 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b10:	2300      	movs	r3, #0
 8002b12:	73fb      	strb	r3, [r7, #15]
 8002b14:	e044      	b.n	8002ba0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b16:	7bfa      	ldrb	r2, [r7, #15]
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002b28:	2200      	movs	r2, #0
 8002b2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b2c:	7bfa      	ldrb	r2, [r7, #15]
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4413      	add	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002b3e:	7bfa      	ldrb	r2, [r7, #15]
 8002b40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b42:	7bfa      	ldrb	r2, [r7, #15]
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	440b      	add	r3, r1
 8002b50:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002b54:	2200      	movs	r2, #0
 8002b56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b58:	7bfa      	ldrb	r2, [r7, #15]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b6e:	7bfa      	ldrb	r2, [r7, #15]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b84:	7bfa      	ldrb	r2, [r7, #15]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	791b      	ldrb	r3, [r3, #4]
 8002ba4:	7bfa      	ldrb	r2, [r7, #15]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d3b5      	bcc.n	8002b16 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	7c1a      	ldrb	r2, [r3, #16]
 8002bb2:	f88d 2000 	strb.w	r2, [sp]
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bba:	f002 fdb5 	bl	8005728 <USB_DevInit>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e00c      	b.n	8002bea <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f003 fdff 	bl	80067e6 <USB_DevDisconnect>

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b084      	sub	sp, #16
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <HAL_PCD_Start+0x1c>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e022      	b.n	8002c54 <HAL_PCD_Start+0x62>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d009      	beq.n	8002c36 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d105      	bne.n	8002c36 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c2e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f002 fd06 	bl	800564c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f003 fdad 	bl	80067a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c5c:	b590      	push	{r4, r7, lr}
 8002c5e:	b08d      	sub	sp, #52	@ 0x34
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f003 fe6b 	bl	800694e <USB_GetMode>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f040 848c 	bne.w	8003598 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f003 fdcf 	bl	8006828 <USB_ReadInterrupts>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 8482 	beq.w	8003596 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	0a1b      	lsrs	r3, r3, #8
 8002c9c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f003 fdbc 	bl	8006828 <USB_ReadInterrupts>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d107      	bne.n	8002cca <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695a      	ldr	r2, [r3, #20]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f002 0202 	and.w	r2, r2, #2
 8002cc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f003 fdaa 	bl	8006828 <USB_ReadInterrupts>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f003 0310 	and.w	r3, r3, #16
 8002cda:	2b10      	cmp	r3, #16
 8002cdc:	d161      	bne.n	8002da2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	699a      	ldr	r2, [r3, #24]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0210 	bic.w	r2, r2, #16
 8002cec:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 020f 	and.w	r2, r3, #15
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	4413      	add	r3, r2
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002d14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d18:	d124      	bne.n	8002d64 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d035      	beq.n	8002d92 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	461a      	mov	r2, r3
 8002d38:	6a38      	ldr	r0, [r7, #32]
 8002d3a:	f003 fbe1 	bl	8006500 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d4a:	441a      	add	r2, r3
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	695a      	ldr	r2, [r3, #20]
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	091b      	lsrs	r3, r3, #4
 8002d58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d5c:	441a      	add	r2, r3
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	615a      	str	r2, [r3, #20]
 8002d62:	e016      	b.n	8002d92 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002d6a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002d6e:	d110      	bne.n	8002d92 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d76:	2208      	movs	r2, #8
 8002d78:	4619      	mov	r1, r3
 8002d7a:	6a38      	ldr	r0, [r7, #32]
 8002d7c:	f003 fbc0 	bl	8006500 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	695a      	ldr	r2, [r3, #20]
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	091b      	lsrs	r3, r3, #4
 8002d88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d8c:	441a      	add	r2, r3
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699a      	ldr	r2, [r3, #24]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 0210 	orr.w	r2, r2, #16
 8002da0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f003 fd3e 	bl	8006828 <USB_ReadInterrupts>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002db2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002db6:	f040 80a7 	bne.w	8002f08 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f003 fd43 	bl	800684e <USB_ReadDevAllOutEpInterrupt>
 8002dc8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002dca:	e099      	b.n	8002f00 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 808e 	beq.w	8002ef4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	4611      	mov	r1, r2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f003 fd67 	bl	80068b6 <USB_ReadDevOutEPInterrupt>
 8002de8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00c      	beq.n	8002e0e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df6:	015a      	lsls	r2, r3, #5
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e00:	461a      	mov	r2, r3
 8002e02:	2301      	movs	r3, #1
 8002e04:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 fea3 	bl	8003b54 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00c      	beq.n	8002e32 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1a:	015a      	lsls	r2, r3, #5
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e24:	461a      	mov	r2, r3
 8002e26:	2308      	movs	r3, #8
 8002e28:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 ff79 	bl	8003d24 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e48:	461a      	mov	r2, r3
 8002e4a:	2310      	movs	r3, #16
 8002e4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d030      	beq.n	8002eba <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e60:	2b80      	cmp	r3, #128	@ 0x80
 8002e62:	d109      	bne.n	8002e78 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	69fa      	ldr	r2, [r7, #28]
 8002e6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e76:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002e78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	4413      	add	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	4413      	add	r3, r2
 8002e8a:	3304      	adds	r3, #4
 8002e8c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	78db      	ldrb	r3, [r3, #3]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d108      	bne.n	8002ea8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f006 f95c 	bl	8009160 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f003 0320 	and.w	r3, r3, #32
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	2320      	movs	r3, #32
 8002ed4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d009      	beq.n	8002ef4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee2:	015a      	lsls	r2, r3, #5
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eec:	461a      	mov	r2, r3
 8002eee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ef2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efc:	085b      	lsrs	r3, r3, #1
 8002efe:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f47f af62 	bne.w	8002dcc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f003 fc8b 	bl	8006828 <USB_ReadInterrupts>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f1c:	f040 80db 	bne.w	80030d6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f003 fcac 	bl	8006882 <USB_ReadDevAllInEpInterrupt>
 8002f2a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002f30:	e0cd      	b.n	80030ce <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 80c2 	beq.w	80030c2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	4611      	mov	r1, r2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f003 fcd2 	bl	80068f2 <USB_ReadDevInEPInterrupt>
 8002f4e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d057      	beq.n	800300a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5c:	f003 030f 	and.w	r3, r3, #15
 8002f60:	2201      	movs	r2, #1
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	69f9      	ldr	r1, [r7, #28]
 8002f76:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f80:	015a      	lsls	r2, r3, #5
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	4413      	add	r3, r2
 8002f86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	799b      	ldrb	r3, [r3, #6]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d132      	bne.n	8002ffe <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	3320      	adds	r3, #32
 8002fa8:	6819      	ldr	r1, [r3, #0]
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fae:	4613      	mov	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4403      	add	r3, r0
 8002fb8:	331c      	adds	r3, #28
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4419      	add	r1, r3
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4403      	add	r3, r0
 8002fcc:	3320      	adds	r3, #32
 8002fce:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d113      	bne.n	8002ffe <HAL_PCD_IRQHandler+0x3a2>
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fda:	4613      	mov	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	4413      	add	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	3324      	adds	r3, #36	@ 0x24
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d108      	bne.n	8002ffe <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6818      	ldr	r0, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	f003 fcd9 	bl	80069b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003000:	b2db      	uxtb	r3, r3
 8003002:	4619      	mov	r1, r3
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f006 f830 	bl	800906a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	4413      	add	r3, r2
 800301c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003020:	461a      	mov	r2, r3
 8003022:	2308      	movs	r3, #8
 8003024:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	4413      	add	r3, r2
 8003038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800303c:	461a      	mov	r2, r3
 800303e:	2310      	movs	r3, #16
 8003040:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800304c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304e:	015a      	lsls	r2, r3, #5
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	4413      	add	r3, r2
 8003054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003058:	461a      	mov	r2, r3
 800305a:	2340      	movs	r3, #64	@ 0x40
 800305c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d023      	beq.n	80030b0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003068:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800306a:	6a38      	ldr	r0, [r7, #32]
 800306c:	f002 fcc0 	bl	80059f0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003072:	4613      	mov	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	3310      	adds	r3, #16
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	4413      	add	r3, r2
 8003080:	3304      	adds	r3, #4
 8003082:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	78db      	ldrb	r3, [r3, #3]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d108      	bne.n	800309e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	2200      	movs	r2, #0
 8003090:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003094:	b2db      	uxtb	r3, r3
 8003096:	4619      	mov	r1, r3
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f006 f873 	bl	8009184 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800309e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030aa:	461a      	mov	r2, r3
 80030ac:	2302      	movs	r3, #2
 80030ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80030ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 fcbd 	bl	8003a3c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c4:	3301      	adds	r3, #1
 80030c6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80030c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ca:	085b      	lsrs	r3, r3, #1
 80030cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80030ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f47f af2e 	bne.w	8002f32 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f003 fba4 	bl	8006828 <USB_ReadInterrupts>
 80030e0:	4603      	mov	r3, r0
 80030e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80030e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030ea:	d122      	bne.n	8003132 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	69fa      	ldr	r2, [r7, #28]
 80030f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030fa:	f023 0301 	bic.w	r3, r3, #1
 80030fe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003106:	2b01      	cmp	r3, #1
 8003108:	d108      	bne.n	800311c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003112:	2100      	movs	r1, #0
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 fea3 	bl	8003e60 <HAL_PCDEx_LPM_Callback>
 800311a:	e002      	b.n	8003122 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f006 f811 	bl	8009144 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695a      	ldr	r2, [r3, #20]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003130:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f003 fb76 	bl	8006828 <USB_ReadInterrupts>
 800313c:	4603      	mov	r3, r0
 800313e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003142:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003146:	d112      	bne.n	800316e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b01      	cmp	r3, #1
 8003156:	d102      	bne.n	800315e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f005 ffcd 	bl	80090f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695a      	ldr	r2, [r3, #20]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800316c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f003 fb58 	bl	8006828 <USB_ReadInterrupts>
 8003178:	4603      	mov	r3, r0
 800317a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800317e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003182:	f040 80b7 	bne.w	80032f4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	69fa      	ldr	r2, [r7, #28]
 8003190:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003194:	f023 0301 	bic.w	r3, r3, #1
 8003198:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2110      	movs	r1, #16
 80031a0:	4618      	mov	r0, r3
 80031a2:	f002 fc25 	bl	80059f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a6:	2300      	movs	r3, #0
 80031a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031aa:	e046      	b.n	800323a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80031ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031b8:	461a      	mov	r2, r3
 80031ba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80031be:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80031c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031d0:	0151      	lsls	r1, r2, #5
 80031d2:	69fa      	ldr	r2, [r7, #28]
 80031d4:	440a      	add	r2, r1
 80031d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80031da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80031de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80031e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031ec:	461a      	mov	r2, r3
 80031ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80031f2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80031f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031f6:	015a      	lsls	r2, r3, #5
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	4413      	add	r3, r2
 80031fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003204:	0151      	lsls	r1, r2, #5
 8003206:	69fa      	ldr	r2, [r7, #28]
 8003208:	440a      	add	r2, r1
 800320a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800320e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003212:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	4413      	add	r3, r2
 800321c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003224:	0151      	lsls	r1, r2, #5
 8003226:	69fa      	ldr	r2, [r7, #28]
 8003228:	440a      	add	r2, r1
 800322a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800322e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003232:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003236:	3301      	adds	r3, #1
 8003238:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	791b      	ldrb	r3, [r3, #4]
 800323e:	461a      	mov	r2, r3
 8003240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003242:	4293      	cmp	r3, r2
 8003244:	d3b2      	bcc.n	80031ac <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003254:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003258:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	7bdb      	ldrb	r3, [r3, #15]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d016      	beq.n	8003290 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003268:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800326c:	69fa      	ldr	r2, [r7, #28]
 800326e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003272:	f043 030b 	orr.w	r3, r3, #11
 8003276:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003282:	69fa      	ldr	r2, [r7, #28]
 8003284:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003288:	f043 030b 	orr.w	r3, r3, #11
 800328c:	6453      	str	r3, [r2, #68]	@ 0x44
 800328e:	e015      	b.n	80032bc <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	69fa      	ldr	r2, [r7, #28]
 800329a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800329e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80032a2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80032a6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	69fa      	ldr	r2, [r7, #28]
 80032b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032b6:	f043 030b 	orr.w	r3, r3, #11
 80032ba:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	69fa      	ldr	r2, [r7, #28]
 80032c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032ca:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80032ce:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6818      	ldr	r0, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032de:	461a      	mov	r2, r3
 80032e0:	f003 fb66 	bl	80069b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695a      	ldr	r2, [r3, #20]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80032f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f003 fa95 	bl	8006828 <USB_ReadInterrupts>
 80032fe:	4603      	mov	r3, r0
 8003300:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003304:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003308:	d123      	bne.n	8003352 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f003 fb2b 	bl	800696a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f002 fbe2 	bl	8005ae2 <USB_GetDevSpeed>
 800331e:	4603      	mov	r3, r0
 8003320:	461a      	mov	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681c      	ldr	r4, [r3, #0]
 800332a:	f001 f9c9 	bl	80046c0 <HAL_RCC_GetHCLKFreq>
 800332e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003334:	461a      	mov	r2, r3
 8003336:	4620      	mov	r0, r4
 8003338:	f002 f8e6 	bl	8005508 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f005 febc 	bl	80090ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695a      	ldr	r2, [r3, #20]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003350:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f003 fa66 	bl	8006828 <USB_ReadInterrupts>
 800335c:	4603      	mov	r3, r0
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b08      	cmp	r3, #8
 8003364:	d10a      	bne.n	800337c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f005 fe99 	bl	800909e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695a      	ldr	r2, [r3, #20]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f002 0208 	and.w	r2, r2, #8
 800337a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f003 fa51 	bl	8006828 <USB_ReadInterrupts>
 8003386:	4603      	mov	r3, r0
 8003388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800338c:	2b80      	cmp	r3, #128	@ 0x80
 800338e:	d123      	bne.n	80033d8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800339c:	2301      	movs	r3, #1
 800339e:	627b      	str	r3, [r7, #36]	@ 0x24
 80033a0:	e014      	b.n	80033cc <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033a6:	4613      	mov	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d105      	bne.n	80033c6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80033ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	4619      	mov	r1, r3
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 fb0a 	bl	80039da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	3301      	adds	r3, #1
 80033ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	791b      	ldrb	r3, [r3, #4]
 80033d0:	461a      	mov	r2, r3
 80033d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d3e4      	bcc.n	80033a2 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f003 fa23 	bl	8006828 <USB_ReadInterrupts>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033ec:	d13c      	bne.n	8003468 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033ee:	2301      	movs	r3, #1
 80033f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80033f2:	e02b      	b.n	800344c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80033f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003408:	4613      	mov	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	4413      	add	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	3318      	adds	r3, #24
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d115      	bne.n	8003446 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800341a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800341c:	2b00      	cmp	r3, #0
 800341e:	da12      	bge.n	8003446 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003424:	4613      	mov	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	3317      	adds	r3, #23
 8003430:	2201      	movs	r2, #1
 8003432:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003436:	b2db      	uxtb	r3, r3
 8003438:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800343c:	b2db      	uxtb	r3, r3
 800343e:	4619      	mov	r1, r3
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 faca 	bl	80039da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003448:	3301      	adds	r3, #1
 800344a:	627b      	str	r3, [r7, #36]	@ 0x24
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	791b      	ldrb	r3, [r3, #4]
 8003450:	461a      	mov	r2, r3
 8003452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003454:	4293      	cmp	r3, r2
 8003456:	d3cd      	bcc.n	80033f4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003466:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f003 f9db 	bl	8006828 <USB_ReadInterrupts>
 8003472:	4603      	mov	r3, r0
 8003474:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003478:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800347c:	d156      	bne.n	800352c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800347e:	2301      	movs	r3, #1
 8003480:	627b      	str	r3, [r7, #36]	@ 0x24
 8003482:	e045      	b.n	8003510 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	4413      	add	r3, r2
 800348c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003498:	4613      	mov	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d12e      	bne.n	800350a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80034ac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	da2b      	bge.n	800350a <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	0c1a      	lsrs	r2, r3, #16
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80034bc:	4053      	eors	r3, r2
 80034be:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d121      	bne.n	800350a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ca:	4613      	mov	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4413      	add	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80034d8:	2201      	movs	r2, #1
 80034da:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10a      	bne.n	800350a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	69fa      	ldr	r2, [r7, #28]
 80034fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003502:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003506:	6053      	str	r3, [r2, #4]
            break;
 8003508:	e008      	b.n	800351c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800350a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350c:	3301      	adds	r3, #1
 800350e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	791b      	ldrb	r3, [r3, #4]
 8003514:	461a      	mov	r2, r3
 8003516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003518:	4293      	cmp	r3, r2
 800351a:	d3b3      	bcc.n	8003484 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695a      	ldr	r2, [r3, #20]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800352a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f003 f979 	bl	8006828 <USB_ReadInterrupts>
 8003536:	4603      	mov	r3, r0
 8003538:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800353c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003540:	d10a      	bne.n	8003558 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f005 fe30 	bl	80091a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695a      	ldr	r2, [r3, #20]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003556:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f003 f963 	bl	8006828 <USB_ReadInterrupts>
 8003562:	4603      	mov	r3, r0
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b04      	cmp	r3, #4
 800356a:	d115      	bne.n	8003598 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f005 fe20 	bl	80091c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6859      	ldr	r1, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	430a      	orrs	r2, r1
 8003592:	605a      	str	r2, [r3, #4]
 8003594:	e000      	b.n	8003598 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003596:	bf00      	nop
    }
  }
}
 8003598:	3734      	adds	r7, #52	@ 0x34
 800359a:	46bd      	mov	sp, r7
 800359c:	bd90      	pop	{r4, r7, pc}

0800359e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
 80035a6:	460b      	mov	r3, r1
 80035a8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_PCD_SetAddress+0x1a>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e012      	b.n	80035de <HAL_PCD_SetAddress+0x40>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	78fa      	ldrb	r2, [r7, #3]
 80035c4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	78fa      	ldrb	r2, [r7, #3]
 80035cc:	4611      	mov	r1, r2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f003 f8c2 	bl	8006758 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	4608      	mov	r0, r1
 80035f0:	4611      	mov	r1, r2
 80035f2:	461a      	mov	r2, r3
 80035f4:	4603      	mov	r3, r0
 80035f6:	70fb      	strb	r3, [r7, #3]
 80035f8:	460b      	mov	r3, r1
 80035fa:	803b      	strh	r3, [r7, #0]
 80035fc:	4613      	mov	r3, r2
 80035fe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003604:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003608:	2b00      	cmp	r3, #0
 800360a:	da0f      	bge.n	800362c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	f003 020f 	and.w	r2, r3, #15
 8003612:	4613      	mov	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	3310      	adds	r3, #16
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	4413      	add	r3, r2
 8003620:	3304      	adds	r3, #4
 8003622:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2201      	movs	r2, #1
 8003628:	705a      	strb	r2, [r3, #1]
 800362a:	e00f      	b.n	800364c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800362c:	78fb      	ldrb	r3, [r7, #3]
 800362e:	f003 020f 	and.w	r2, r3, #15
 8003632:	4613      	mov	r3, r2
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	4413      	add	r3, r2
 8003642:	3304      	adds	r3, #4
 8003644:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	b2da      	uxtb	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003658:	883b      	ldrh	r3, [r7, #0]
 800365a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	78ba      	ldrb	r2, [r7, #2]
 8003666:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	785b      	ldrb	r3, [r3, #1]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d004      	beq.n	800367a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	461a      	mov	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800367a:	78bb      	ldrb	r3, [r7, #2]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d102      	bne.n	8003686 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_PCD_EP_Open+0xae>
 8003690:	2302      	movs	r3, #2
 8003692:	e00e      	b.n	80036b2 <HAL_PCD_EP_Open+0xcc>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68f9      	ldr	r1, [r7, #12]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f002 fa42 	bl	8005b2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80036b0:	7afb      	ldrb	r3, [r7, #11]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	460b      	mov	r3, r1
 80036c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	da0f      	bge.n	80036ee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	f003 020f 	and.w	r2, r3, #15
 80036d4:	4613      	mov	r3, r2
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	3310      	adds	r3, #16
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	4413      	add	r3, r2
 80036e2:	3304      	adds	r3, #4
 80036e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2201      	movs	r2, #1
 80036ea:	705a      	strb	r2, [r3, #1]
 80036ec:	e00f      	b.n	800370e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036ee:	78fb      	ldrb	r3, [r7, #3]
 80036f0:	f003 020f 	and.w	r2, r3, #15
 80036f4:	4613      	mov	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	4413      	add	r3, r2
 8003704:	3304      	adds	r3, #4
 8003706:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800370e:	78fb      	ldrb	r3, [r7, #3]
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	b2da      	uxtb	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_PCD_EP_Close+0x6e>
 8003724:	2302      	movs	r3, #2
 8003726:	e00e      	b.n	8003746 <HAL_PCD_EP_Close+0x8c>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68f9      	ldr	r1, [r7, #12]
 8003736:	4618      	mov	r0, r3
 8003738:	f002 fa80 	bl	8005c3c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b086      	sub	sp, #24
 8003752:	af00      	add	r7, sp, #0
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	607a      	str	r2, [r7, #4]
 8003758:	603b      	str	r3, [r7, #0]
 800375a:	460b      	mov	r3, r1
 800375c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800375e:	7afb      	ldrb	r3, [r7, #11]
 8003760:	f003 020f 	and.w	r2, r3, #15
 8003764:	4613      	mov	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	4413      	add	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	4413      	add	r3, r2
 8003774:	3304      	adds	r3, #4
 8003776:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	2200      	movs	r2, #0
 8003788:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2200      	movs	r2, #0
 800378e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003790:	7afb      	ldrb	r3, [r7, #11]
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	b2da      	uxtb	r2, r3
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	799b      	ldrb	r3, [r3, #6]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d102      	bne.n	80037aa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6818      	ldr	r0, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	799b      	ldrb	r3, [r3, #6]
 80037b2:	461a      	mov	r2, r3
 80037b4:	6979      	ldr	r1, [r7, #20]
 80037b6:	f002 fb1d 	bl	8005df4 <USB_EPStartXfer>

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80037d0:	78fb      	ldrb	r3, [r7, #3]
 80037d2:	f003 020f 	and.w	r2, r3, #15
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	4613      	mov	r3, r2
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	4413      	add	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80037e6:	681b      	ldr	r3, [r3, #0]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	607a      	str	r2, [r7, #4]
 80037fe:	603b      	str	r3, [r7, #0]
 8003800:	460b      	mov	r3, r1
 8003802:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003804:	7afb      	ldrb	r3, [r7, #11]
 8003806:	f003 020f 	and.w	r2, r3, #15
 800380a:	4613      	mov	r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	4413      	add	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	3310      	adds	r3, #16
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4413      	add	r3, r2
 8003818:	3304      	adds	r3, #4
 800381a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	2200      	movs	r2, #0
 800382c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2201      	movs	r2, #1
 8003832:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003834:	7afb      	ldrb	r3, [r7, #11]
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	b2da      	uxtb	r2, r3
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	799b      	ldrb	r3, [r3, #6]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d102      	bne.n	800384e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6818      	ldr	r0, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	799b      	ldrb	r3, [r3, #6]
 8003856:	461a      	mov	r2, r3
 8003858:	6979      	ldr	r1, [r7, #20]
 800385a:	f002 facb 	bl	8005df4 <USB_EPStartXfer>

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	460b      	mov	r3, r1
 8003872:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003874:	78fb      	ldrb	r3, [r7, #3]
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	7912      	ldrb	r2, [r2, #4]
 800387e:	4293      	cmp	r3, r2
 8003880:	d901      	bls.n	8003886 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e04f      	b.n	8003926 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003886:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800388a:	2b00      	cmp	r3, #0
 800388c:	da0f      	bge.n	80038ae <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800388e:	78fb      	ldrb	r3, [r7, #3]
 8003890:	f003 020f 	and.w	r2, r3, #15
 8003894:	4613      	mov	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4413      	add	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	3310      	adds	r3, #16
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	4413      	add	r3, r2
 80038a2:	3304      	adds	r3, #4
 80038a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2201      	movs	r2, #1
 80038aa:	705a      	strb	r2, [r3, #1]
 80038ac:	e00d      	b.n	80038ca <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80038ae:	78fa      	ldrb	r2, [r7, #3]
 80038b0:	4613      	mov	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	4413      	add	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	4413      	add	r3, r2
 80038c0:	3304      	adds	r3, #4
 80038c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2201      	movs	r2, #1
 80038ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038d0:	78fb      	ldrb	r3, [r7, #3]
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d101      	bne.n	80038ea <HAL_PCD_EP_SetStall+0x82>
 80038e6:	2302      	movs	r3, #2
 80038e8:	e01d      	b.n	8003926 <HAL_PCD_EP_SetStall+0xbe>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68f9      	ldr	r1, [r7, #12]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f002 fe59 	bl	80065b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038fe:	78fb      	ldrb	r3, [r7, #3]
 8003900:	f003 030f 	and.w	r3, r3, #15
 8003904:	2b00      	cmp	r3, #0
 8003906:	d109      	bne.n	800391c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6818      	ldr	r0, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	7999      	ldrb	r1, [r3, #6]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003916:	461a      	mov	r2, r3
 8003918:	f003 f84a 	bl	80069b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b084      	sub	sp, #16
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	460b      	mov	r3, r1
 8003938:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	f003 030f 	and.w	r3, r3, #15
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	7912      	ldrb	r2, [r2, #4]
 8003944:	4293      	cmp	r3, r2
 8003946:	d901      	bls.n	800394c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e042      	b.n	80039d2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800394c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003950:	2b00      	cmp	r3, #0
 8003952:	da0f      	bge.n	8003974 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	f003 020f 	and.w	r2, r3, #15
 800395a:	4613      	mov	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	3310      	adds	r3, #16
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	4413      	add	r3, r2
 8003968:	3304      	adds	r3, #4
 800396a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2201      	movs	r2, #1
 8003970:	705a      	strb	r2, [r3, #1]
 8003972:	e00f      	b.n	8003994 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	f003 020f 	and.w	r2, r3, #15
 800397a:	4613      	mov	r3, r2
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	4413      	add	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	4413      	add	r3, r2
 800398a:	3304      	adds	r3, #4
 800398c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800399a:	78fb      	ldrb	r3, [r7, #3]
 800399c:	f003 030f 	and.w	r3, r3, #15
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_PCD_EP_ClrStall+0x86>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e00e      	b.n	80039d2 <HAL_PCD_EP_ClrStall+0xa4>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68f9      	ldr	r1, [r7, #12]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f002 fe62 	bl	800668c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b084      	sub	sp, #16
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	460b      	mov	r3, r1
 80039e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80039e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	da0c      	bge.n	8003a08 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039ee:	78fb      	ldrb	r3, [r7, #3]
 80039f0:	f003 020f 	and.w	r2, r3, #15
 80039f4:	4613      	mov	r3, r2
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	4413      	add	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	3310      	adds	r3, #16
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	4413      	add	r3, r2
 8003a02:	3304      	adds	r3, #4
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	e00c      	b.n	8003a22 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a08:	78fb      	ldrb	r3, [r7, #3]
 8003a0a:	f003 020f 	and.w	r2, r3, #15
 8003a0e:	4613      	mov	r3, r2
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	3304      	adds	r3, #4
 8003a20:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68f9      	ldr	r1, [r7, #12]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f002 fc81 	bl	8006330 <USB_EPStopXfer>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003a32:	7afb      	ldrb	r3, [r7, #11]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08a      	sub	sp, #40	@ 0x28
 8003a40:	af02      	add	r7, sp, #8
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	4613      	mov	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	4413      	add	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	3310      	adds	r3, #16
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	4413      	add	r3, r2
 8003a60:	3304      	adds	r3, #4
 8003a62:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	695a      	ldr	r2, [r3, #20]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d901      	bls.n	8003a74 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e06b      	b.n	8003b4c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	691a      	ldr	r2, [r3, #16]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	69fa      	ldr	r2, [r7, #28]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d902      	bls.n	8003a90 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	3303      	adds	r3, #3
 8003a94:	089b      	lsrs	r3, r3, #2
 8003a96:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a98:	e02a      	b.n	8003af0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	691a      	ldr	r2, [r3, #16]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	69fa      	ldr	r2, [r7, #28]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d902      	bls.n	8003ab6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	3303      	adds	r3, #3
 8003aba:	089b      	lsrs	r3, r3, #2
 8003abc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	68d9      	ldr	r1, [r3, #12]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	6978      	ldr	r0, [r7, #20]
 8003ad4:	f002 fcd6 	bl	8006484 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	441a      	add	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	695a      	ldr	r2, [r3, #20]
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	441a      	add	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d809      	bhi.n	8003b1a <PCD_WriteEmptyTxFifo+0xde>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	695a      	ldr	r2, [r3, #20]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d203      	bcs.n	8003b1a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1bf      	bne.n	8003a9a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	691a      	ldr	r2, [r3, #16]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d811      	bhi.n	8003b4a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	f003 030f 	and.w	r3, r3, #15
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	6939      	ldr	r1, [r7, #16]
 8003b42:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b46:	4013      	ands	r3, r2
 8003b48:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3720      	adds	r7, #32
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	333c      	adds	r3, #60	@ 0x3c
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	015a      	lsls	r2, r3, #5
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	4413      	add	r3, r2
 8003b7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	799b      	ldrb	r3, [r3, #6]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d17b      	bne.n	8003c82 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d015      	beq.n	8003bc0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	4a61      	ldr	r2, [pc, #388]	@ (8003d1c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	f240 80b9 	bls.w	8003d10 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 80b3 	beq.w	8003d10 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bbc:	6093      	str	r3, [r2, #8]
 8003bbe:	e0a7      	b.n	8003d10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	f003 0320 	and.w	r3, r3, #32
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d009      	beq.n	8003bde <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	2320      	movs	r3, #32
 8003bda:	6093      	str	r3, [r2, #8]
 8003bdc:	e098      	b.n	8003d10 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f040 8093 	bne.w	8003d10 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	4a4b      	ldr	r2, [pc, #300]	@ (8003d1c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d90f      	bls.n	8003c12 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c08:	461a      	mov	r2, r3
 8003c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c0e:	6093      	str	r3, [r2, #8]
 8003c10:	e07e      	b.n	8003d10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	4613      	mov	r3, r2
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	4413      	add	r3, r2
 8003c24:	3304      	adds	r3, #4
 8003c26:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a1a      	ldr	r2, [r3, #32]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	0159      	lsls	r1, r3, #5
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	440b      	add	r3, r1
 8003c34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c3e:	1ad2      	subs	r2, r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d114      	bne.n	8003c74 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d109      	bne.n	8003c66 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6818      	ldr	r0, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2101      	movs	r1, #1
 8003c60:	f002 fea6 	bl	80069b0 <USB_EP0_OutStart>
 8003c64:	e006      	b.n	8003c74 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	441a      	add	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	4619      	mov	r1, r3
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f005 f9da 	bl	8009034 <HAL_PCD_DataOutStageCallback>
 8003c80:	e046      	b.n	8003d10 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	4a26      	ldr	r2, [pc, #152]	@ (8003d20 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d124      	bne.n	8003cd4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ca6:	6093      	str	r3, [r2, #8]
 8003ca8:	e032      	b.n	8003d10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f003 0320 	and.w	r3, r3, #32
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d008      	beq.n	8003cc6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	2320      	movs	r3, #32
 8003cc4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	4619      	mov	r1, r3
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f005 f9b1 	bl	8009034 <HAL_PCD_DataOutStageCallback>
 8003cd2:	e01d      	b.n	8003d10 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d114      	bne.n	8003d04 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d108      	bne.n	8003d04 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6818      	ldr	r0, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	2100      	movs	r1, #0
 8003d00:	f002 fe56 	bl	80069b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	4619      	mov	r1, r3
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f005 f992 	bl	8009034 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3720      	adds	r7, #32
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	4f54300a 	.word	0x4f54300a
 8003d20:	4f54310a 	.word	0x4f54310a

08003d24 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	333c      	adds	r3, #60	@ 0x3c
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4a15      	ldr	r2, [pc, #84]	@ (8003dac <PCD_EP_OutSetupPacket_int+0x88>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d90e      	bls.n	8003d78 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d009      	beq.n	8003d78 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d70:	461a      	mov	r2, r3
 8003d72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d76:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f005 f949 	bl	8009010 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4a0a      	ldr	r2, [pc, #40]	@ (8003dac <PCD_EP_OutSetupPacket_int+0x88>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d90c      	bls.n	8003da0 <PCD_EP_OutSetupPacket_int+0x7c>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	799b      	ldrb	r3, [r3, #6]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d108      	bne.n	8003da0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6818      	ldr	r0, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d98:	461a      	mov	r2, r3
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	f002 fe08 	bl	80069b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	4f54300a 	.word	0x4f54300a

08003db0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	70fb      	strb	r3, [r7, #3]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003dc8:	78fb      	ldrb	r3, [r7, #3]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d107      	bne.n	8003dde <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003dce:	883b      	ldrh	r3, [r7, #0]
 8003dd0:	0419      	lsls	r1, r3, #16
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ddc:	e028      	b.n	8003e30 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de4:	0c1b      	lsrs	r3, r3, #16
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	4413      	add	r3, r2
 8003dea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003dec:	2300      	movs	r3, #0
 8003dee:	73fb      	strb	r3, [r7, #15]
 8003df0:	e00d      	b.n	8003e0e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	3340      	adds	r3, #64	@ 0x40
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	0c1b      	lsrs	r3, r3, #16
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	4413      	add	r3, r2
 8003e06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	73fb      	strb	r3, [r7, #15]
 8003e0e:	7bfa      	ldrb	r2, [r7, #15]
 8003e10:	78fb      	ldrb	r3, [r7, #3]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d3ec      	bcc.n	8003df2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003e18:	883b      	ldrh	r3, [r7, #0]
 8003e1a:	0418      	lsls	r0, r3, #16
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6819      	ldr	r1, [r3, #0]
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	4302      	orrs	r2, r0
 8003e28:	3340      	adds	r3, #64	@ 0x40
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	460b      	mov	r3, r1
 8003e48:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	887a      	ldrh	r2, [r7, #2]
 8003e50:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e267      	b.n	800435a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d075      	beq.n	8003f82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e96:	4b88      	ldr	r3, [pc, #544]	@ (80040b8 <HAL_RCC_OscConfig+0x240>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 030c 	and.w	r3, r3, #12
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d00c      	beq.n	8003ebc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ea2:	4b85      	ldr	r3, [pc, #532]	@ (80040b8 <HAL_RCC_OscConfig+0x240>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003eaa:	2b08      	cmp	r3, #8
 8003eac:	d112      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eae:	4b82      	ldr	r3, [pc, #520]	@ (80040b8 <HAL_RCC_OscConfig+0x240>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003eba:	d10b      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ebc:	4b7e      	ldr	r3, [pc, #504]	@ (80040b8 <HAL_RCC_OscConfig+0x240>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d05b      	beq.n	8003f80 <HAL_RCC_OscConfig+0x108>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d157      	bne.n	8003f80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e242      	b.n	800435a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003edc:	d106      	bne.n	8003eec <HAL_RCC_OscConfig+0x74>
 8003ede:	4b76      	ldr	r3, [pc, #472]	@ (80040b8 <HAL_RCC_OscConfig+0x240>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a75      	ldr	r2, [pc, #468]	@ (80040b8 <HAL_RCC_OscConfig+0x240>)
 8003ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	e01d      	b.n	8003f28 <HAL_RCC_OscConfig+0xb0>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ef4:	d10c      	bne.n	8003f10 <HAL_RCC_OscConfig+0x98>
 8003ef6:	4b70      	ldr	r3, [pc, #448]	@ (80040b8 <HAL_RCC_OscConfig+0x240>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a6f      	ldr	r2, [pc, #444]	@ (80040b8 <HAL_RCC_OscConfig+0x240>)
 8003efc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	4b6d      	ldr	r3, [pc, #436]	@ (80040b8 <HAL_RCC_OscConfig+0x240>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a6c      	ldr	r2, [pc, #432]	@ (80040b8 <HAL_RCC_OscConfig+0x240>)
 8003f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	e00b      	b.n	8003f28 <HAL_RCC_OscConfig+0xb0>
 8003f10:	4b69      	ldr	r3, [pc, #420]	@ (80040b8 <HAL_RCC_OscConfig+0x240>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a68      	ldr	r2, [pc, #416]	@ (80040b8 <HAL_RCC_OscConfig+0x240>)
 8003f16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f1a:	6013      	str	r3, [r2, #0]
 8003f1c:	4b66      	ldr	r3, [pc, #408]	@ (80040b8 <HAL_RCC_OscConfig+0x240>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a65      	ldr	r2, [pc, #404]	@ (80040b8 <HAL_RCC_OscConfig+0x240>)
 8003f22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d013      	beq.n	8003f58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f30:	f7fd f9fa 	bl	8001328 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f38:	f7fd f9f6 	bl	8001328 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b64      	cmp	r3, #100	@ 0x64
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e207      	b.n	800435a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f4a:	4b5b      	ldr	r3, [pc, #364]	@ (80040b8 <HAL_RCC_OscConfig+0x240>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0f0      	beq.n	8003f38 <HAL_RCC_OscConfig+0xc0>
 8003f56:	e014      	b.n	8003f82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f58:	f7fd f9e6 	bl	8001328 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f60:	f7fd f9e2 	bl	8001328 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b64      	cmp	r3, #100	@ 0x64
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e1f3      	b.n	800435a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f72:	4b51      	ldr	r3, [pc, #324]	@ (80040b8 <HAL_RCC_OscConfig+0x240>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f0      	bne.n	8003f60 <HAL_RCC_OscConfig+0xe8>
 8003f7e:	e000      	b.n	8003f82 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d063      	beq.n	8004056 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f8e:	4b4a      	ldr	r3, [pc, #296]	@ (80040b8 <HAL_RCC_OscConfig+0x240>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 030c 	and.w	r3, r3, #12
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00b      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f9a:	4b47      	ldr	r3, [pc, #284]	@ (80040b8 <HAL_RCC_OscConfig+0x240>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d11c      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fa6:	4b44      	ldr	r3, [pc, #272]	@ (80040b8 <HAL_RCC_OscConfig+0x240>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d116      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fb2:	4b41      	ldr	r3, [pc, #260]	@ (80040b8 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d005      	beq.n	8003fca <HAL_RCC_OscConfig+0x152>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d001      	beq.n	8003fca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e1c7      	b.n	800435a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fca:	4b3b      	ldr	r3, [pc, #236]	@ (80040b8 <HAL_RCC_OscConfig+0x240>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	4937      	ldr	r1, [pc, #220]	@ (80040b8 <HAL_RCC_OscConfig+0x240>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fde:	e03a      	b.n	8004056 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d020      	beq.n	800402a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fe8:	4b34      	ldr	r3, [pc, #208]	@ (80040bc <HAL_RCC_OscConfig+0x244>)
 8003fea:	2201      	movs	r2, #1
 8003fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fee:	f7fd f99b 	bl	8001328 <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff4:	e008      	b.n	8004008 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ff6:	f7fd f997 	bl	8001328 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e1a8      	b.n	800435a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004008:	4b2b      	ldr	r3, [pc, #172]	@ (80040b8 <HAL_RCC_OscConfig+0x240>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0f0      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004014:	4b28      	ldr	r3, [pc, #160]	@ (80040b8 <HAL_RCC_OscConfig+0x240>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	4925      	ldr	r1, [pc, #148]	@ (80040b8 <HAL_RCC_OscConfig+0x240>)
 8004024:	4313      	orrs	r3, r2
 8004026:	600b      	str	r3, [r1, #0]
 8004028:	e015      	b.n	8004056 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800402a:	4b24      	ldr	r3, [pc, #144]	@ (80040bc <HAL_RCC_OscConfig+0x244>)
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004030:	f7fd f97a 	bl	8001328 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004038:	f7fd f976 	bl	8001328 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e187      	b.n	800435a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800404a:	4b1b      	ldr	r3, [pc, #108]	@ (80040b8 <HAL_RCC_OscConfig+0x240>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f0      	bne.n	8004038 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d036      	beq.n	80040d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d016      	beq.n	8004098 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800406a:	4b15      	ldr	r3, [pc, #84]	@ (80040c0 <HAL_RCC_OscConfig+0x248>)
 800406c:	2201      	movs	r2, #1
 800406e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004070:	f7fd f95a 	bl	8001328 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004078:	f7fd f956 	bl	8001328 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e167      	b.n	800435a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800408a:	4b0b      	ldr	r3, [pc, #44]	@ (80040b8 <HAL_RCC_OscConfig+0x240>)
 800408c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0f0      	beq.n	8004078 <HAL_RCC_OscConfig+0x200>
 8004096:	e01b      	b.n	80040d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004098:	4b09      	ldr	r3, [pc, #36]	@ (80040c0 <HAL_RCC_OscConfig+0x248>)
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800409e:	f7fd f943 	bl	8001328 <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040a4:	e00e      	b.n	80040c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040a6:	f7fd f93f 	bl	8001328 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d907      	bls.n	80040c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e150      	b.n	800435a <HAL_RCC_OscConfig+0x4e2>
 80040b8:	40023800 	.word	0x40023800
 80040bc:	42470000 	.word	0x42470000
 80040c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c4:	4b88      	ldr	r3, [pc, #544]	@ (80042e8 <HAL_RCC_OscConfig+0x470>)
 80040c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1ea      	bne.n	80040a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 8097 	beq.w	800420c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040de:	2300      	movs	r3, #0
 80040e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040e2:	4b81      	ldr	r3, [pc, #516]	@ (80042e8 <HAL_RCC_OscConfig+0x470>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10f      	bne.n	800410e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ee:	2300      	movs	r3, #0
 80040f0:	60bb      	str	r3, [r7, #8]
 80040f2:	4b7d      	ldr	r3, [pc, #500]	@ (80042e8 <HAL_RCC_OscConfig+0x470>)
 80040f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f6:	4a7c      	ldr	r2, [pc, #496]	@ (80042e8 <HAL_RCC_OscConfig+0x470>)
 80040f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80040fe:	4b7a      	ldr	r3, [pc, #488]	@ (80042e8 <HAL_RCC_OscConfig+0x470>)
 8004100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004102:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004106:	60bb      	str	r3, [r7, #8]
 8004108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800410a:	2301      	movs	r3, #1
 800410c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800410e:	4b77      	ldr	r3, [pc, #476]	@ (80042ec <HAL_RCC_OscConfig+0x474>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004116:	2b00      	cmp	r3, #0
 8004118:	d118      	bne.n	800414c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800411a:	4b74      	ldr	r3, [pc, #464]	@ (80042ec <HAL_RCC_OscConfig+0x474>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a73      	ldr	r2, [pc, #460]	@ (80042ec <HAL_RCC_OscConfig+0x474>)
 8004120:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004126:	f7fd f8ff 	bl	8001328 <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800412e:	f7fd f8fb 	bl	8001328 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e10c      	b.n	800435a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004140:	4b6a      	ldr	r3, [pc, #424]	@ (80042ec <HAL_RCC_OscConfig+0x474>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0f0      	beq.n	800412e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d106      	bne.n	8004162 <HAL_RCC_OscConfig+0x2ea>
 8004154:	4b64      	ldr	r3, [pc, #400]	@ (80042e8 <HAL_RCC_OscConfig+0x470>)
 8004156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004158:	4a63      	ldr	r2, [pc, #396]	@ (80042e8 <HAL_RCC_OscConfig+0x470>)
 800415a:	f043 0301 	orr.w	r3, r3, #1
 800415e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004160:	e01c      	b.n	800419c <HAL_RCC_OscConfig+0x324>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	2b05      	cmp	r3, #5
 8004168:	d10c      	bne.n	8004184 <HAL_RCC_OscConfig+0x30c>
 800416a:	4b5f      	ldr	r3, [pc, #380]	@ (80042e8 <HAL_RCC_OscConfig+0x470>)
 800416c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800416e:	4a5e      	ldr	r2, [pc, #376]	@ (80042e8 <HAL_RCC_OscConfig+0x470>)
 8004170:	f043 0304 	orr.w	r3, r3, #4
 8004174:	6713      	str	r3, [r2, #112]	@ 0x70
 8004176:	4b5c      	ldr	r3, [pc, #368]	@ (80042e8 <HAL_RCC_OscConfig+0x470>)
 8004178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417a:	4a5b      	ldr	r2, [pc, #364]	@ (80042e8 <HAL_RCC_OscConfig+0x470>)
 800417c:	f043 0301 	orr.w	r3, r3, #1
 8004180:	6713      	str	r3, [r2, #112]	@ 0x70
 8004182:	e00b      	b.n	800419c <HAL_RCC_OscConfig+0x324>
 8004184:	4b58      	ldr	r3, [pc, #352]	@ (80042e8 <HAL_RCC_OscConfig+0x470>)
 8004186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004188:	4a57      	ldr	r2, [pc, #348]	@ (80042e8 <HAL_RCC_OscConfig+0x470>)
 800418a:	f023 0301 	bic.w	r3, r3, #1
 800418e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004190:	4b55      	ldr	r3, [pc, #340]	@ (80042e8 <HAL_RCC_OscConfig+0x470>)
 8004192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004194:	4a54      	ldr	r2, [pc, #336]	@ (80042e8 <HAL_RCC_OscConfig+0x470>)
 8004196:	f023 0304 	bic.w	r3, r3, #4
 800419a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d015      	beq.n	80041d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a4:	f7fd f8c0 	bl	8001328 <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041aa:	e00a      	b.n	80041c2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ac:	f7fd f8bc 	bl	8001328 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e0cb      	b.n	800435a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c2:	4b49      	ldr	r3, [pc, #292]	@ (80042e8 <HAL_RCC_OscConfig+0x470>)
 80041c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0ee      	beq.n	80041ac <HAL_RCC_OscConfig+0x334>
 80041ce:	e014      	b.n	80041fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d0:	f7fd f8aa 	bl	8001328 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041d6:	e00a      	b.n	80041ee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d8:	f7fd f8a6 	bl	8001328 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e0b5      	b.n	800435a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ee:	4b3e      	ldr	r3, [pc, #248]	@ (80042e8 <HAL_RCC_OscConfig+0x470>)
 80041f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1ee      	bne.n	80041d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041fa:	7dfb      	ldrb	r3, [r7, #23]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d105      	bne.n	800420c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004200:	4b39      	ldr	r3, [pc, #228]	@ (80042e8 <HAL_RCC_OscConfig+0x470>)
 8004202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004204:	4a38      	ldr	r2, [pc, #224]	@ (80042e8 <HAL_RCC_OscConfig+0x470>)
 8004206:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800420a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 80a1 	beq.w	8004358 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004216:	4b34      	ldr	r3, [pc, #208]	@ (80042e8 <HAL_RCC_OscConfig+0x470>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 030c 	and.w	r3, r3, #12
 800421e:	2b08      	cmp	r3, #8
 8004220:	d05c      	beq.n	80042dc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d141      	bne.n	80042ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800422a:	4b31      	ldr	r3, [pc, #196]	@ (80042f0 <HAL_RCC_OscConfig+0x478>)
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004230:	f7fd f87a 	bl	8001328 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004238:	f7fd f876 	bl	8001328 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e087      	b.n	800435a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800424a:	4b27      	ldr	r3, [pc, #156]	@ (80042e8 <HAL_RCC_OscConfig+0x470>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1f0      	bne.n	8004238 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	69da      	ldr	r2, [r3, #28]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004264:	019b      	lsls	r3, r3, #6
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426c:	085b      	lsrs	r3, r3, #1
 800426e:	3b01      	subs	r3, #1
 8004270:	041b      	lsls	r3, r3, #16
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004278:	061b      	lsls	r3, r3, #24
 800427a:	491b      	ldr	r1, [pc, #108]	@ (80042e8 <HAL_RCC_OscConfig+0x470>)
 800427c:	4313      	orrs	r3, r2
 800427e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004280:	4b1b      	ldr	r3, [pc, #108]	@ (80042f0 <HAL_RCC_OscConfig+0x478>)
 8004282:	2201      	movs	r2, #1
 8004284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004286:	f7fd f84f 	bl	8001328 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800428e:	f7fd f84b 	bl	8001328 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e05c      	b.n	800435a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042a0:	4b11      	ldr	r3, [pc, #68]	@ (80042e8 <HAL_RCC_OscConfig+0x470>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0f0      	beq.n	800428e <HAL_RCC_OscConfig+0x416>
 80042ac:	e054      	b.n	8004358 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ae:	4b10      	ldr	r3, [pc, #64]	@ (80042f0 <HAL_RCC_OscConfig+0x478>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b4:	f7fd f838 	bl	8001328 <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042bc:	f7fd f834 	bl	8001328 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e045      	b.n	800435a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ce:	4b06      	ldr	r3, [pc, #24]	@ (80042e8 <HAL_RCC_OscConfig+0x470>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1f0      	bne.n	80042bc <HAL_RCC_OscConfig+0x444>
 80042da:	e03d      	b.n	8004358 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d107      	bne.n	80042f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e038      	b.n	800435a <HAL_RCC_OscConfig+0x4e2>
 80042e8:	40023800 	.word	0x40023800
 80042ec:	40007000 	.word	0x40007000
 80042f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004364 <HAL_RCC_OscConfig+0x4ec>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d028      	beq.n	8004354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800430c:	429a      	cmp	r2, r3
 800430e:	d121      	bne.n	8004354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800431a:	429a      	cmp	r2, r3
 800431c:	d11a      	bne.n	8004354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004324:	4013      	ands	r3, r2
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800432a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800432c:	4293      	cmp	r3, r2
 800432e:	d111      	bne.n	8004354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433a:	085b      	lsrs	r3, r3, #1
 800433c:	3b01      	subs	r3, #1
 800433e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004340:	429a      	cmp	r2, r3
 8004342:	d107      	bne.n	8004354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004350:	429a      	cmp	r2, r3
 8004352:	d001      	beq.n	8004358 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e000      	b.n	800435a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	40023800 	.word	0x40023800

08004368 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e0cc      	b.n	8004516 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800437c:	4b68      	ldr	r3, [pc, #416]	@ (8004520 <HAL_RCC_ClockConfig+0x1b8>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d90c      	bls.n	80043a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438a:	4b65      	ldr	r3, [pc, #404]	@ (8004520 <HAL_RCC_ClockConfig+0x1b8>)
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004392:	4b63      	ldr	r3, [pc, #396]	@ (8004520 <HAL_RCC_ClockConfig+0x1b8>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	429a      	cmp	r2, r3
 800439e:	d001      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e0b8      	b.n	8004516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d020      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d005      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043bc:	4b59      	ldr	r3, [pc, #356]	@ (8004524 <HAL_RCC_ClockConfig+0x1bc>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	4a58      	ldr	r2, [pc, #352]	@ (8004524 <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80043c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0308 	and.w	r3, r3, #8
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d005      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043d4:	4b53      	ldr	r3, [pc, #332]	@ (8004524 <HAL_RCC_ClockConfig+0x1bc>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	4a52      	ldr	r2, [pc, #328]	@ (8004524 <HAL_RCC_ClockConfig+0x1bc>)
 80043da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80043de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043e0:	4b50      	ldr	r3, [pc, #320]	@ (8004524 <HAL_RCC_ClockConfig+0x1bc>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	494d      	ldr	r1, [pc, #308]	@ (8004524 <HAL_RCC_ClockConfig+0x1bc>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d044      	beq.n	8004488 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d107      	bne.n	8004416 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004406:	4b47      	ldr	r3, [pc, #284]	@ (8004524 <HAL_RCC_ClockConfig+0x1bc>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d119      	bne.n	8004446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e07f      	b.n	8004516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d003      	beq.n	8004426 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004422:	2b03      	cmp	r3, #3
 8004424:	d107      	bne.n	8004436 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004426:	4b3f      	ldr	r3, [pc, #252]	@ (8004524 <HAL_RCC_ClockConfig+0x1bc>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d109      	bne.n	8004446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e06f      	b.n	8004516 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004436:	4b3b      	ldr	r3, [pc, #236]	@ (8004524 <HAL_RCC_ClockConfig+0x1bc>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e067      	b.n	8004516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004446:	4b37      	ldr	r3, [pc, #220]	@ (8004524 <HAL_RCC_ClockConfig+0x1bc>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f023 0203 	bic.w	r2, r3, #3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	4934      	ldr	r1, [pc, #208]	@ (8004524 <HAL_RCC_ClockConfig+0x1bc>)
 8004454:	4313      	orrs	r3, r2
 8004456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004458:	f7fc ff66 	bl	8001328 <HAL_GetTick>
 800445c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800445e:	e00a      	b.n	8004476 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004460:	f7fc ff62 	bl	8001328 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800446e:	4293      	cmp	r3, r2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e04f      	b.n	8004516 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004476:	4b2b      	ldr	r3, [pc, #172]	@ (8004524 <HAL_RCC_ClockConfig+0x1bc>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 020c 	and.w	r2, r3, #12
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	429a      	cmp	r2, r3
 8004486:	d1eb      	bne.n	8004460 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004488:	4b25      	ldr	r3, [pc, #148]	@ (8004520 <HAL_RCC_ClockConfig+0x1b8>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d20c      	bcs.n	80044b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004496:	4b22      	ldr	r3, [pc, #136]	@ (8004520 <HAL_RCC_ClockConfig+0x1b8>)
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800449e:	4b20      	ldr	r3, [pc, #128]	@ (8004520 <HAL_RCC_ClockConfig+0x1b8>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d001      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e032      	b.n	8004516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d008      	beq.n	80044ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044bc:	4b19      	ldr	r3, [pc, #100]	@ (8004524 <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	4916      	ldr	r1, [pc, #88]	@ (8004524 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0308 	and.w	r3, r3, #8
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d009      	beq.n	80044ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044da:	4b12      	ldr	r3, [pc, #72]	@ (8004524 <HAL_RCC_ClockConfig+0x1bc>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	490e      	ldr	r1, [pc, #56]	@ (8004524 <HAL_RCC_ClockConfig+0x1bc>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044ee:	f000 f821 	bl	8004534 <HAL_RCC_GetSysClockFreq>
 80044f2:	4602      	mov	r2, r0
 80044f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004524 <HAL_RCC_ClockConfig+0x1bc>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	091b      	lsrs	r3, r3, #4
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	490a      	ldr	r1, [pc, #40]	@ (8004528 <HAL_RCC_ClockConfig+0x1c0>)
 8004500:	5ccb      	ldrb	r3, [r1, r3]
 8004502:	fa22 f303 	lsr.w	r3, r2, r3
 8004506:	4a09      	ldr	r2, [pc, #36]	@ (800452c <HAL_RCC_ClockConfig+0x1c4>)
 8004508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800450a:	4b09      	ldr	r3, [pc, #36]	@ (8004530 <HAL_RCC_ClockConfig+0x1c8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f7fc fec6 	bl	80012a0 <HAL_InitTick>

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	40023c00 	.word	0x40023c00
 8004524:	40023800 	.word	0x40023800
 8004528:	08009650 	.word	0x08009650
 800452c:	20000000 	.word	0x20000000
 8004530:	20000004 	.word	0x20000004

08004534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004538:	b090      	sub	sp, #64	@ 0x40
 800453a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800454c:	4b59      	ldr	r3, [pc, #356]	@ (80046b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 030c 	and.w	r3, r3, #12
 8004554:	2b08      	cmp	r3, #8
 8004556:	d00d      	beq.n	8004574 <HAL_RCC_GetSysClockFreq+0x40>
 8004558:	2b08      	cmp	r3, #8
 800455a:	f200 80a1 	bhi.w	80046a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <HAL_RCC_GetSysClockFreq+0x34>
 8004562:	2b04      	cmp	r3, #4
 8004564:	d003      	beq.n	800456e <HAL_RCC_GetSysClockFreq+0x3a>
 8004566:	e09b      	b.n	80046a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004568:	4b53      	ldr	r3, [pc, #332]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800456a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800456c:	e09b      	b.n	80046a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800456e:	4b53      	ldr	r3, [pc, #332]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x188>)
 8004570:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004572:	e098      	b.n	80046a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004574:	4b4f      	ldr	r3, [pc, #316]	@ (80046b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800457c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800457e:	4b4d      	ldr	r3, [pc, #308]	@ (80046b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d028      	beq.n	80045dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800458a:	4b4a      	ldr	r3, [pc, #296]	@ (80046b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	099b      	lsrs	r3, r3, #6
 8004590:	2200      	movs	r2, #0
 8004592:	623b      	str	r3, [r7, #32]
 8004594:	627a      	str	r2, [r7, #36]	@ 0x24
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800459c:	2100      	movs	r1, #0
 800459e:	4b47      	ldr	r3, [pc, #284]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x188>)
 80045a0:	fb03 f201 	mul.w	r2, r3, r1
 80045a4:	2300      	movs	r3, #0
 80045a6:	fb00 f303 	mul.w	r3, r0, r3
 80045aa:	4413      	add	r3, r2
 80045ac:	4a43      	ldr	r2, [pc, #268]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x188>)
 80045ae:	fba0 1202 	umull	r1, r2, r0, r2
 80045b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045b4:	460a      	mov	r2, r1
 80045b6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80045b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045ba:	4413      	add	r3, r2
 80045bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045c0:	2200      	movs	r2, #0
 80045c2:	61bb      	str	r3, [r7, #24]
 80045c4:	61fa      	str	r2, [r7, #28]
 80045c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80045ce:	f7fb fe03 	bl	80001d8 <__aeabi_uldivmod>
 80045d2:	4602      	mov	r2, r0
 80045d4:	460b      	mov	r3, r1
 80045d6:	4613      	mov	r3, r2
 80045d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045da:	e053      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045dc:	4b35      	ldr	r3, [pc, #212]	@ (80046b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	099b      	lsrs	r3, r3, #6
 80045e2:	2200      	movs	r2, #0
 80045e4:	613b      	str	r3, [r7, #16]
 80045e6:	617a      	str	r2, [r7, #20]
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80045ee:	f04f 0b00 	mov.w	fp, #0
 80045f2:	4652      	mov	r2, sl
 80045f4:	465b      	mov	r3, fp
 80045f6:	f04f 0000 	mov.w	r0, #0
 80045fa:	f04f 0100 	mov.w	r1, #0
 80045fe:	0159      	lsls	r1, r3, #5
 8004600:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004604:	0150      	lsls	r0, r2, #5
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	ebb2 080a 	subs.w	r8, r2, sl
 800460e:	eb63 090b 	sbc.w	r9, r3, fp
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	f04f 0300 	mov.w	r3, #0
 800461a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800461e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004622:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004626:	ebb2 0408 	subs.w	r4, r2, r8
 800462a:	eb63 0509 	sbc.w	r5, r3, r9
 800462e:	f04f 0200 	mov.w	r2, #0
 8004632:	f04f 0300 	mov.w	r3, #0
 8004636:	00eb      	lsls	r3, r5, #3
 8004638:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800463c:	00e2      	lsls	r2, r4, #3
 800463e:	4614      	mov	r4, r2
 8004640:	461d      	mov	r5, r3
 8004642:	eb14 030a 	adds.w	r3, r4, sl
 8004646:	603b      	str	r3, [r7, #0]
 8004648:	eb45 030b 	adc.w	r3, r5, fp
 800464c:	607b      	str	r3, [r7, #4]
 800464e:	f04f 0200 	mov.w	r2, #0
 8004652:	f04f 0300 	mov.w	r3, #0
 8004656:	e9d7 4500 	ldrd	r4, r5, [r7]
 800465a:	4629      	mov	r1, r5
 800465c:	028b      	lsls	r3, r1, #10
 800465e:	4621      	mov	r1, r4
 8004660:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004664:	4621      	mov	r1, r4
 8004666:	028a      	lsls	r2, r1, #10
 8004668:	4610      	mov	r0, r2
 800466a:	4619      	mov	r1, r3
 800466c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800466e:	2200      	movs	r2, #0
 8004670:	60bb      	str	r3, [r7, #8]
 8004672:	60fa      	str	r2, [r7, #12]
 8004674:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004678:	f7fb fdae 	bl	80001d8 <__aeabi_uldivmod>
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	4613      	mov	r3, r2
 8004682:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004684:	4b0b      	ldr	r3, [pc, #44]	@ (80046b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	0c1b      	lsrs	r3, r3, #16
 800468a:	f003 0303 	and.w	r3, r3, #3
 800468e:	3301      	adds	r3, #1
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004694:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004698:	fbb2 f3f3 	udiv	r3, r2, r3
 800469c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800469e:	e002      	b.n	80046a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046a0:	4b05      	ldr	r3, [pc, #20]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80046a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3740      	adds	r7, #64	@ 0x40
 80046ac:	46bd      	mov	sp, r7
 80046ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046b2:	bf00      	nop
 80046b4:	40023800 	.word	0x40023800
 80046b8:	00f42400 	.word	0x00f42400
 80046bc:	017d7840 	.word	0x017d7840

080046c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046c4:	4b03      	ldr	r3, [pc, #12]	@ (80046d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80046c6:	681b      	ldr	r3, [r3, #0]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	20000000 	.word	0x20000000

080046d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e041      	b.n	800476e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d106      	bne.n	8004704 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7fc fbee 	bl	8000ee0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3304      	adds	r3, #4
 8004714:	4619      	mov	r1, r3
 8004716:	4610      	mov	r0, r2
 8004718:	f000 fa8a 	bl	8004c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b082      	sub	sp, #8
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e041      	b.n	800480c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d106      	bne.n	80047a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7fc fb7d 	bl	8000e9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2202      	movs	r2, #2
 80047a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	3304      	adds	r3, #4
 80047b2:	4619      	mov	r1, r3
 80047b4:	4610      	mov	r0, r2
 80047b6:	f000 fa3b 	bl	8004c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3708      	adds	r7, #8
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d109      	bne.n	8004838 <HAL_TIM_PWM_Start+0x24>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b01      	cmp	r3, #1
 800482e:	bf14      	ite	ne
 8004830:	2301      	movne	r3, #1
 8004832:	2300      	moveq	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	e022      	b.n	800487e <HAL_TIM_PWM_Start+0x6a>
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	2b04      	cmp	r3, #4
 800483c:	d109      	bne.n	8004852 <HAL_TIM_PWM_Start+0x3e>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b01      	cmp	r3, #1
 8004848:	bf14      	ite	ne
 800484a:	2301      	movne	r3, #1
 800484c:	2300      	moveq	r3, #0
 800484e:	b2db      	uxtb	r3, r3
 8004850:	e015      	b.n	800487e <HAL_TIM_PWM_Start+0x6a>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b08      	cmp	r3, #8
 8004856:	d109      	bne.n	800486c <HAL_TIM_PWM_Start+0x58>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b01      	cmp	r3, #1
 8004862:	bf14      	ite	ne
 8004864:	2301      	movne	r3, #1
 8004866:	2300      	moveq	r3, #0
 8004868:	b2db      	uxtb	r3, r3
 800486a:	e008      	b.n	800487e <HAL_TIM_PWM_Start+0x6a>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b01      	cmp	r3, #1
 8004876:	bf14      	ite	ne
 8004878:	2301      	movne	r3, #1
 800487a:	2300      	moveq	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e068      	b.n	8004958 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d104      	bne.n	8004896 <HAL_TIM_PWM_Start+0x82>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004894:	e013      	b.n	80048be <HAL_TIM_PWM_Start+0xaa>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b04      	cmp	r3, #4
 800489a:	d104      	bne.n	80048a6 <HAL_TIM_PWM_Start+0x92>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048a4:	e00b      	b.n	80048be <HAL_TIM_PWM_Start+0xaa>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d104      	bne.n	80048b6 <HAL_TIM_PWM_Start+0xa2>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048b4:	e003      	b.n	80048be <HAL_TIM_PWM_Start+0xaa>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2202      	movs	r2, #2
 80048ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2201      	movs	r2, #1
 80048c4:	6839      	ldr	r1, [r7, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 fcd4 	bl	8005274 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a23      	ldr	r2, [pc, #140]	@ (8004960 <HAL_TIM_PWM_Start+0x14c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d107      	bne.n	80048e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a1d      	ldr	r2, [pc, #116]	@ (8004960 <HAL_TIM_PWM_Start+0x14c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d018      	beq.n	8004922 <HAL_TIM_PWM_Start+0x10e>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048f8:	d013      	beq.n	8004922 <HAL_TIM_PWM_Start+0x10e>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a19      	ldr	r2, [pc, #100]	@ (8004964 <HAL_TIM_PWM_Start+0x150>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d00e      	beq.n	8004922 <HAL_TIM_PWM_Start+0x10e>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a17      	ldr	r2, [pc, #92]	@ (8004968 <HAL_TIM_PWM_Start+0x154>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d009      	beq.n	8004922 <HAL_TIM_PWM_Start+0x10e>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a16      	ldr	r2, [pc, #88]	@ (800496c <HAL_TIM_PWM_Start+0x158>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d004      	beq.n	8004922 <HAL_TIM_PWM_Start+0x10e>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a14      	ldr	r2, [pc, #80]	@ (8004970 <HAL_TIM_PWM_Start+0x15c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d111      	bne.n	8004946 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2b06      	cmp	r3, #6
 8004932:	d010      	beq.n	8004956 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0201 	orr.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004944:	e007      	b.n	8004956 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f042 0201 	orr.w	r2, r2, #1
 8004954:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40010000 	.word	0x40010000
 8004964:	40000400 	.word	0x40000400
 8004968:	40000800 	.word	0x40000800
 800496c:	40000c00 	.word	0x40000c00
 8004970:	40014000 	.word	0x40014000

08004974 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e041      	b.n	8004a0c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d106      	bne.n	80049a2 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f839 	bl	8004a14 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2202      	movs	r2, #2
 80049a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3304      	adds	r3, #4
 80049b2:	4619      	mov	r1, r3
 80049b4:	4610      	mov	r0, r2
 80049b6:	f000 f93b 	bl	8004c30 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0208 	bic.w	r2, r2, #8
 80049c8:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6819      	ldr	r1, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d101      	bne.n	8004a46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e0ae      	b.n	8004ba4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b0c      	cmp	r3, #12
 8004a52:	f200 809f 	bhi.w	8004b94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a56:	a201      	add	r2, pc, #4	@ (adr r2, 8004a5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5c:	08004a91 	.word	0x08004a91
 8004a60:	08004b95 	.word	0x08004b95
 8004a64:	08004b95 	.word	0x08004b95
 8004a68:	08004b95 	.word	0x08004b95
 8004a6c:	08004ad1 	.word	0x08004ad1
 8004a70:	08004b95 	.word	0x08004b95
 8004a74:	08004b95 	.word	0x08004b95
 8004a78:	08004b95 	.word	0x08004b95
 8004a7c:	08004b13 	.word	0x08004b13
 8004a80:	08004b95 	.word	0x08004b95
 8004a84:	08004b95 	.word	0x08004b95
 8004a88:	08004b95 	.word	0x08004b95
 8004a8c:	08004b53 	.word	0x08004b53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68b9      	ldr	r1, [r7, #8]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 f950 	bl	8004d3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	699a      	ldr	r2, [r3, #24]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0208 	orr.w	r2, r2, #8
 8004aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699a      	ldr	r2, [r3, #24]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0204 	bic.w	r2, r2, #4
 8004aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6999      	ldr	r1, [r3, #24]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	691a      	ldr	r2, [r3, #16]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	619a      	str	r2, [r3, #24]
      break;
 8004ace:	e064      	b.n	8004b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68b9      	ldr	r1, [r7, #8]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 f996 	bl	8004e08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699a      	ldr	r2, [r3, #24]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004aea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	699a      	ldr	r2, [r3, #24]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004afa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6999      	ldr	r1, [r3, #24]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	021a      	lsls	r2, r3, #8
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	619a      	str	r2, [r3, #24]
      break;
 8004b10:	e043      	b.n	8004b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68b9      	ldr	r1, [r7, #8]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 f9e1 	bl	8004ee0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	69da      	ldr	r2, [r3, #28]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0208 	orr.w	r2, r2, #8
 8004b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69da      	ldr	r2, [r3, #28]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0204 	bic.w	r2, r2, #4
 8004b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69d9      	ldr	r1, [r3, #28]
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	691a      	ldr	r2, [r3, #16]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	61da      	str	r2, [r3, #28]
      break;
 8004b50:	e023      	b.n	8004b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68b9      	ldr	r1, [r7, #8]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 fa2b 	bl	8004fb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69da      	ldr	r2, [r3, #28]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	69da      	ldr	r2, [r3, #28]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	69d9      	ldr	r1, [r3, #28]
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	021a      	lsls	r2, r3, #8
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	61da      	str	r2, [r3, #28]
      break;
 8004b92:	e002      	b.n	8004b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	75fb      	strb	r3, [r7, #23]
      break;
 8004b98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d101      	bne.n	8004bc4 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e031      	b.n	8004c28 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004bd4:	6839      	ldr	r1, [r7, #0]
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fa3c 	bl	8005054 <TIM_SlaveTimer_SetConfig>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d009      	beq.n	8004bf6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e018      	b.n	8004c28 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68da      	ldr	r2, [r3, #12]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c04:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004c14:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3708      	adds	r7, #8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a37      	ldr	r2, [pc, #220]	@ (8004d20 <TIM_Base_SetConfig+0xf0>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d00f      	beq.n	8004c68 <TIM_Base_SetConfig+0x38>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c4e:	d00b      	beq.n	8004c68 <TIM_Base_SetConfig+0x38>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a34      	ldr	r2, [pc, #208]	@ (8004d24 <TIM_Base_SetConfig+0xf4>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d007      	beq.n	8004c68 <TIM_Base_SetConfig+0x38>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a33      	ldr	r2, [pc, #204]	@ (8004d28 <TIM_Base_SetConfig+0xf8>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d003      	beq.n	8004c68 <TIM_Base_SetConfig+0x38>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a32      	ldr	r2, [pc, #200]	@ (8004d2c <TIM_Base_SetConfig+0xfc>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d108      	bne.n	8004c7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a28      	ldr	r2, [pc, #160]	@ (8004d20 <TIM_Base_SetConfig+0xf0>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d01b      	beq.n	8004cba <TIM_Base_SetConfig+0x8a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c88:	d017      	beq.n	8004cba <TIM_Base_SetConfig+0x8a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a25      	ldr	r2, [pc, #148]	@ (8004d24 <TIM_Base_SetConfig+0xf4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d013      	beq.n	8004cba <TIM_Base_SetConfig+0x8a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a24      	ldr	r2, [pc, #144]	@ (8004d28 <TIM_Base_SetConfig+0xf8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d00f      	beq.n	8004cba <TIM_Base_SetConfig+0x8a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a23      	ldr	r2, [pc, #140]	@ (8004d2c <TIM_Base_SetConfig+0xfc>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d00b      	beq.n	8004cba <TIM_Base_SetConfig+0x8a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a22      	ldr	r2, [pc, #136]	@ (8004d30 <TIM_Base_SetConfig+0x100>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d007      	beq.n	8004cba <TIM_Base_SetConfig+0x8a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a21      	ldr	r2, [pc, #132]	@ (8004d34 <TIM_Base_SetConfig+0x104>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d003      	beq.n	8004cba <TIM_Base_SetConfig+0x8a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a20      	ldr	r2, [pc, #128]	@ (8004d38 <TIM_Base_SetConfig+0x108>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d108      	bne.n	8004ccc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	689a      	ldr	r2, [r3, #8]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a0c      	ldr	r2, [pc, #48]	@ (8004d20 <TIM_Base_SetConfig+0xf0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d103      	bne.n	8004cfa <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	691a      	ldr	r2, [r3, #16]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f043 0204 	orr.w	r2, r3, #4
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	601a      	str	r2, [r3, #0]
}
 8004d12:	bf00      	nop
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40010000 	.word	0x40010000
 8004d24:	40000400 	.word	0x40000400
 8004d28:	40000800 	.word	0x40000800
 8004d2c:	40000c00 	.word	0x40000c00
 8004d30:	40014000 	.word	0x40014000
 8004d34:	40014400 	.word	0x40014400
 8004d38:	40014800 	.word	0x40014800

08004d3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	f023 0201 	bic.w	r2, r3, #1
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0303 	bic.w	r3, r3, #3
 8004d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f023 0302 	bic.w	r3, r3, #2
 8004d84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a1c      	ldr	r2, [pc, #112]	@ (8004e04 <TIM_OC1_SetConfig+0xc8>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d10c      	bne.n	8004db2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f023 0308 	bic.w	r3, r3, #8
 8004d9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f023 0304 	bic.w	r3, r3, #4
 8004db0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a13      	ldr	r2, [pc, #76]	@ (8004e04 <TIM_OC1_SetConfig+0xc8>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d111      	bne.n	8004dde <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	621a      	str	r2, [r3, #32]
}
 8004df8:	bf00      	nop
 8004dfa:	371c      	adds	r7, #28
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	40010000 	.word	0x40010000

08004e08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	f023 0210 	bic.w	r2, r3, #16
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	021b      	lsls	r3, r3, #8
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f023 0320 	bic.w	r3, r3, #32
 8004e52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a1e      	ldr	r2, [pc, #120]	@ (8004edc <TIM_OC2_SetConfig+0xd4>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d10d      	bne.n	8004e84 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a15      	ldr	r2, [pc, #84]	@ (8004edc <TIM_OC2_SetConfig+0xd4>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d113      	bne.n	8004eb4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	621a      	str	r2, [r3, #32]
}
 8004ece:	bf00      	nop
 8004ed0:	371c      	adds	r7, #28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40010000 	.word	0x40010000

08004ee0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f023 0303 	bic.w	r3, r3, #3
 8004f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	021b      	lsls	r3, r3, #8
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a1d      	ldr	r2, [pc, #116]	@ (8004fb0 <TIM_OC3_SetConfig+0xd0>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d10d      	bne.n	8004f5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	021b      	lsls	r3, r3, #8
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a14      	ldr	r2, [pc, #80]	@ (8004fb0 <TIM_OC3_SetConfig+0xd0>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d113      	bne.n	8004f8a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	011b      	lsls	r3, r3, #4
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	011b      	lsls	r3, r3, #4
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	621a      	str	r2, [r3, #32]
}
 8004fa4:	bf00      	nop
 8004fa6:	371c      	adds	r7, #28
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	40010000 	.word	0x40010000

08004fb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	021b      	lsls	r3, r3, #8
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ffe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	031b      	lsls	r3, r3, #12
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4313      	orrs	r3, r2
 800500a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a10      	ldr	r2, [pc, #64]	@ (8005050 <TIM_OC4_SetConfig+0x9c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d109      	bne.n	8005028 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800501a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	019b      	lsls	r3, r3, #6
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	4313      	orrs	r3, r2
 8005026:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	621a      	str	r2, [r3, #32]
}
 8005042:	bf00      	nop
 8005044:	371c      	adds	r7, #28
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	40010000 	.word	0x40010000

08005054 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005070:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	4313      	orrs	r3, r2
 800507a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f023 0307 	bic.w	r3, r3, #7
 8005082:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2b70      	cmp	r3, #112	@ 0x70
 800509c:	d01a      	beq.n	80050d4 <TIM_SlaveTimer_SetConfig+0x80>
 800509e:	2b70      	cmp	r3, #112	@ 0x70
 80050a0:	d860      	bhi.n	8005164 <TIM_SlaveTimer_SetConfig+0x110>
 80050a2:	2b60      	cmp	r3, #96	@ 0x60
 80050a4:	d054      	beq.n	8005150 <TIM_SlaveTimer_SetConfig+0xfc>
 80050a6:	2b60      	cmp	r3, #96	@ 0x60
 80050a8:	d85c      	bhi.n	8005164 <TIM_SlaveTimer_SetConfig+0x110>
 80050aa:	2b50      	cmp	r3, #80	@ 0x50
 80050ac:	d046      	beq.n	800513c <TIM_SlaveTimer_SetConfig+0xe8>
 80050ae:	2b50      	cmp	r3, #80	@ 0x50
 80050b0:	d858      	bhi.n	8005164 <TIM_SlaveTimer_SetConfig+0x110>
 80050b2:	2b40      	cmp	r3, #64	@ 0x40
 80050b4:	d019      	beq.n	80050ea <TIM_SlaveTimer_SetConfig+0x96>
 80050b6:	2b40      	cmp	r3, #64	@ 0x40
 80050b8:	d854      	bhi.n	8005164 <TIM_SlaveTimer_SetConfig+0x110>
 80050ba:	2b30      	cmp	r3, #48	@ 0x30
 80050bc:	d055      	beq.n	800516a <TIM_SlaveTimer_SetConfig+0x116>
 80050be:	2b30      	cmp	r3, #48	@ 0x30
 80050c0:	d850      	bhi.n	8005164 <TIM_SlaveTimer_SetConfig+0x110>
 80050c2:	2b20      	cmp	r3, #32
 80050c4:	d051      	beq.n	800516a <TIM_SlaveTimer_SetConfig+0x116>
 80050c6:	2b20      	cmp	r3, #32
 80050c8:	d84c      	bhi.n	8005164 <TIM_SlaveTimer_SetConfig+0x110>
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d04d      	beq.n	800516a <TIM_SlaveTimer_SetConfig+0x116>
 80050ce:	2b10      	cmp	r3, #16
 80050d0:	d04b      	beq.n	800516a <TIM_SlaveTimer_SetConfig+0x116>
 80050d2:	e047      	b.n	8005164 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80050e4:	f000 f8a6 	bl	8005234 <TIM_ETR_SetConfig>
      break;
 80050e8:	e040      	b.n	800516c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b05      	cmp	r3, #5
 80050f0:	d101      	bne.n	80050f6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e03b      	b.n	800516e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6a1a      	ldr	r2, [r3, #32]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0201 	bic.w	r2, r2, #1
 800510c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800511c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	4313      	orrs	r3, r2
 8005128:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	621a      	str	r2, [r3, #32]
      break;
 800513a:	e017      	b.n	800516c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005148:	461a      	mov	r2, r3
 800514a:	f000 f814 	bl	8005176 <TIM_TI1_ConfigInputStage>
      break;
 800514e:	e00d      	b.n	800516c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800515c:	461a      	mov	r2, r3
 800515e:	f000 f839 	bl	80051d4 <TIM_TI2_ConfigInputStage>
      break;
 8005162:	e003      	b.n	800516c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	75fb      	strb	r3, [r7, #23]
      break;
 8005168:	e000      	b.n	800516c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800516a:	bf00      	nop
  }

  return status;
 800516c:	7dfb      	ldrb	r3, [r7, #23]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005176:	b480      	push	{r7}
 8005178:	b087      	sub	sp, #28
 800517a:	af00      	add	r7, sp, #0
 800517c:	60f8      	str	r0, [r7, #12]
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	f023 0201 	bic.w	r2, r3, #1
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	011b      	lsls	r3, r3, #4
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f023 030a 	bic.w	r3, r3, #10
 80051b2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	621a      	str	r2, [r3, #32]
}
 80051c8:	bf00      	nop
 80051ca:	371c      	adds	r7, #28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	f023 0210 	bic.w	r2, r3, #16
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	031b      	lsls	r3, r3, #12
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	4313      	orrs	r3, r2
 8005208:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005210:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	621a      	str	r2, [r3, #32]
}
 8005228:	bf00      	nop
 800522a:	371c      	adds	r7, #28
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
 8005240:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800524e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	021a      	lsls	r2, r3, #8
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	431a      	orrs	r2, r3
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	4313      	orrs	r3, r2
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	4313      	orrs	r3, r2
 8005260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	609a      	str	r2, [r3, #8]
}
 8005268:	bf00      	nop
 800526a:	371c      	adds	r7, #28
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f003 031f 	and.w	r3, r3, #31
 8005286:	2201      	movs	r2, #1
 8005288:	fa02 f303 	lsl.w	r3, r2, r3
 800528c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6a1a      	ldr	r2, [r3, #32]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	43db      	mvns	r3, r3
 8005296:	401a      	ands	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6a1a      	ldr	r2, [r3, #32]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f003 031f 	and.w	r3, r3, #31
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	fa01 f303 	lsl.w	r3, r1, r3
 80052ac:	431a      	orrs	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	621a      	str	r2, [r3, #32]
}
 80052b2:	bf00      	nop
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
	...

080052c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d101      	bne.n	80052d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052d4:	2302      	movs	r3, #2
 80052d6:	e050      	b.n	800537a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a1c      	ldr	r2, [pc, #112]	@ (8005388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d018      	beq.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005324:	d013      	beq.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a18      	ldr	r2, [pc, #96]	@ (800538c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d00e      	beq.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a16      	ldr	r2, [pc, #88]	@ (8005390 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d009      	beq.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a15      	ldr	r2, [pc, #84]	@ (8005394 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d004      	beq.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a13      	ldr	r2, [pc, #76]	@ (8005398 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d10c      	bne.n	8005368 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005354:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	4313      	orrs	r3, r2
 800535e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	40010000 	.word	0x40010000
 800538c:	40000400 	.word	0x40000400
 8005390:	40000800 	.word	0x40000800
 8005394:	40000c00 	.word	0x40000c00
 8005398:	40014000 	.word	0x40014000

0800539c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053a6:	2300      	movs	r3, #0
 80053a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e03d      	b.n	8005434 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	4313      	orrs	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005440:	b084      	sub	sp, #16
 8005442:	b580      	push	{r7, lr}
 8005444:	b084      	sub	sp, #16
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
 800544a:	f107 001c 	add.w	r0, r7, #28
 800544e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005452:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005456:	2b01      	cmp	r3, #1
 8005458:	d123      	bne.n	80054a2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800545e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800546e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005482:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005486:	2b01      	cmp	r3, #1
 8005488:	d105      	bne.n	8005496 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f001 fae8 	bl	8006a6c <USB_CoreReset>
 800549c:	4603      	mov	r3, r0
 800549e:	73fb      	strb	r3, [r7, #15]
 80054a0:	e01b      	b.n	80054da <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f001 fadc 	bl	8006a6c <USB_CoreReset>
 80054b4:	4603      	mov	r3, r0
 80054b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80054b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d106      	bne.n	80054ce <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80054cc:	e005      	b.n	80054da <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80054da:	7fbb      	ldrb	r3, [r7, #30]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d10b      	bne.n	80054f8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f043 0206 	orr.w	r2, r3, #6
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f043 0220 	orr.w	r2, r3, #32
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005504:	b004      	add	sp, #16
 8005506:	4770      	bx	lr

08005508 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	4613      	mov	r3, r2
 8005514:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005516:	79fb      	ldrb	r3, [r7, #7]
 8005518:	2b02      	cmp	r3, #2
 800551a:	d165      	bne.n	80055e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4a41      	ldr	r2, [pc, #260]	@ (8005624 <USB_SetTurnaroundTime+0x11c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d906      	bls.n	8005532 <USB_SetTurnaroundTime+0x2a>
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4a40      	ldr	r2, [pc, #256]	@ (8005628 <USB_SetTurnaroundTime+0x120>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d202      	bcs.n	8005532 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800552c:	230f      	movs	r3, #15
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	e062      	b.n	80055f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	4a3c      	ldr	r2, [pc, #240]	@ (8005628 <USB_SetTurnaroundTime+0x120>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d306      	bcc.n	8005548 <USB_SetTurnaroundTime+0x40>
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	4a3b      	ldr	r2, [pc, #236]	@ (800562c <USB_SetTurnaroundTime+0x124>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d202      	bcs.n	8005548 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005542:	230e      	movs	r3, #14
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	e057      	b.n	80055f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4a38      	ldr	r2, [pc, #224]	@ (800562c <USB_SetTurnaroundTime+0x124>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d306      	bcc.n	800555e <USB_SetTurnaroundTime+0x56>
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	4a37      	ldr	r2, [pc, #220]	@ (8005630 <USB_SetTurnaroundTime+0x128>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d202      	bcs.n	800555e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005558:	230d      	movs	r3, #13
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	e04c      	b.n	80055f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	4a33      	ldr	r2, [pc, #204]	@ (8005630 <USB_SetTurnaroundTime+0x128>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d306      	bcc.n	8005574 <USB_SetTurnaroundTime+0x6c>
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	4a32      	ldr	r2, [pc, #200]	@ (8005634 <USB_SetTurnaroundTime+0x12c>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d802      	bhi.n	8005574 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800556e:	230c      	movs	r3, #12
 8005570:	617b      	str	r3, [r7, #20]
 8005572:	e041      	b.n	80055f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	4a2f      	ldr	r2, [pc, #188]	@ (8005634 <USB_SetTurnaroundTime+0x12c>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d906      	bls.n	800558a <USB_SetTurnaroundTime+0x82>
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4a2e      	ldr	r2, [pc, #184]	@ (8005638 <USB_SetTurnaroundTime+0x130>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d802      	bhi.n	800558a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005584:	230b      	movs	r3, #11
 8005586:	617b      	str	r3, [r7, #20]
 8005588:	e036      	b.n	80055f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	4a2a      	ldr	r2, [pc, #168]	@ (8005638 <USB_SetTurnaroundTime+0x130>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d906      	bls.n	80055a0 <USB_SetTurnaroundTime+0x98>
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	4a29      	ldr	r2, [pc, #164]	@ (800563c <USB_SetTurnaroundTime+0x134>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d802      	bhi.n	80055a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800559a:	230a      	movs	r3, #10
 800559c:	617b      	str	r3, [r7, #20]
 800559e:	e02b      	b.n	80055f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	4a26      	ldr	r2, [pc, #152]	@ (800563c <USB_SetTurnaroundTime+0x134>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d906      	bls.n	80055b6 <USB_SetTurnaroundTime+0xae>
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	4a25      	ldr	r2, [pc, #148]	@ (8005640 <USB_SetTurnaroundTime+0x138>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d202      	bcs.n	80055b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80055b0:	2309      	movs	r3, #9
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	e020      	b.n	80055f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	4a21      	ldr	r2, [pc, #132]	@ (8005640 <USB_SetTurnaroundTime+0x138>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d306      	bcc.n	80055cc <USB_SetTurnaroundTime+0xc4>
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	4a20      	ldr	r2, [pc, #128]	@ (8005644 <USB_SetTurnaroundTime+0x13c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d802      	bhi.n	80055cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80055c6:	2308      	movs	r3, #8
 80055c8:	617b      	str	r3, [r7, #20]
 80055ca:	e015      	b.n	80055f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	4a1d      	ldr	r2, [pc, #116]	@ (8005644 <USB_SetTurnaroundTime+0x13c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d906      	bls.n	80055e2 <USB_SetTurnaroundTime+0xda>
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4a1c      	ldr	r2, [pc, #112]	@ (8005648 <USB_SetTurnaroundTime+0x140>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d202      	bcs.n	80055e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80055dc:	2307      	movs	r3, #7
 80055de:	617b      	str	r3, [r7, #20]
 80055e0:	e00a      	b.n	80055f8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80055e2:	2306      	movs	r3, #6
 80055e4:	617b      	str	r3, [r7, #20]
 80055e6:	e007      	b.n	80055f8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80055e8:	79fb      	ldrb	r3, [r7, #7]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d102      	bne.n	80055f4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80055ee:	2309      	movs	r3, #9
 80055f0:	617b      	str	r3, [r7, #20]
 80055f2:	e001      	b.n	80055f8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80055f4:	2309      	movs	r3, #9
 80055f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	029b      	lsls	r3, r3, #10
 800560c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005610:	431a      	orrs	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	371c      	adds	r7, #28
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	00d8acbf 	.word	0x00d8acbf
 8005628:	00e4e1c0 	.word	0x00e4e1c0
 800562c:	00f42400 	.word	0x00f42400
 8005630:	01067380 	.word	0x01067380
 8005634:	011a499f 	.word	0x011a499f
 8005638:	01312cff 	.word	0x01312cff
 800563c:	014ca43f 	.word	0x014ca43f
 8005640:	016e3600 	.word	0x016e3600
 8005644:	01a6ab1f 	.word	0x01a6ab1f
 8005648:	01e84800 	.word	0x01e84800

0800564c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f043 0201 	orr.w	r2, r3, #1
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800566e:	b480      	push	{r7}
 8005670:	b083      	sub	sp, #12
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f023 0201 	bic.w	r2, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	460b      	mov	r3, r1
 800569a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056ac:	78fb      	ldrb	r3, [r7, #3]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d115      	bne.n	80056de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80056be:	200a      	movs	r0, #10
 80056c0:	f7fb fe3e 	bl	8001340 <HAL_Delay>
      ms += 10U;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	330a      	adds	r3, #10
 80056c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f001 f93f 	bl	800694e <USB_GetMode>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d01e      	beq.n	8005714 <USB_SetCurrentMode+0x84>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2bc7      	cmp	r3, #199	@ 0xc7
 80056da:	d9f0      	bls.n	80056be <USB_SetCurrentMode+0x2e>
 80056dc:	e01a      	b.n	8005714 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80056de:	78fb      	ldrb	r3, [r7, #3]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d115      	bne.n	8005710 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80056f0:	200a      	movs	r0, #10
 80056f2:	f7fb fe25 	bl	8001340 <HAL_Delay>
      ms += 10U;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	330a      	adds	r3, #10
 80056fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f001 f926 	bl	800694e <USB_GetMode>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d005      	beq.n	8005714 <USB_SetCurrentMode+0x84>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2bc7      	cmp	r3, #199	@ 0xc7
 800570c:	d9f0      	bls.n	80056f0 <USB_SetCurrentMode+0x60>
 800570e:	e001      	b.n	8005714 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e005      	b.n	8005720 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2bc8      	cmp	r3, #200	@ 0xc8
 8005718:	d101      	bne.n	800571e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e000      	b.n	8005720 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005728:	b084      	sub	sp, #16
 800572a:	b580      	push	{r7, lr}
 800572c:	b086      	sub	sp, #24
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005742:	2300      	movs	r3, #0
 8005744:	613b      	str	r3, [r7, #16]
 8005746:	e009      	b.n	800575c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	3340      	adds	r3, #64	@ 0x40
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	2200      	movs	r2, #0
 8005754:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	3301      	adds	r3, #1
 800575a:	613b      	str	r3, [r7, #16]
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	2b0e      	cmp	r3, #14
 8005760:	d9f2      	bls.n	8005748 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005762:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005766:	2b00      	cmp	r3, #0
 8005768:	d11c      	bne.n	80057a4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005778:	f043 0302 	orr.w	r3, r3, #2
 800577c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005782:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800578e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800579a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80057a2:	e00b      	b.n	80057bc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80057c2:	461a      	mov	r2, r3
 80057c4:	2300      	movs	r3, #0
 80057c6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057c8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d10d      	bne.n	80057ec <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80057d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d104      	bne.n	80057e2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80057d8:	2100      	movs	r1, #0
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f968 	bl	8005ab0 <USB_SetDevSpeed>
 80057e0:	e008      	b.n	80057f4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80057e2:	2101      	movs	r1, #1
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f963 	bl	8005ab0 <USB_SetDevSpeed>
 80057ea:	e003      	b.n	80057f4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80057ec:	2103      	movs	r1, #3
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f95e 	bl	8005ab0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057f4:	2110      	movs	r1, #16
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f8fa 	bl	80059f0 <USB_FlushTxFifo>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f924 	bl	8005a54 <USB_FlushRxFifo>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800581c:	461a      	mov	r2, r3
 800581e:	2300      	movs	r3, #0
 8005820:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005828:	461a      	mov	r2, r3
 800582a:	2300      	movs	r3, #0
 800582c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005834:	461a      	mov	r2, r3
 8005836:	2300      	movs	r3, #0
 8005838:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800583a:	2300      	movs	r3, #0
 800583c:	613b      	str	r3, [r7, #16]
 800583e:	e043      	b.n	80058c8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005852:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005856:	d118      	bne.n	800588a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10a      	bne.n	8005874 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	015a      	lsls	r2, r3, #5
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4413      	add	r3, r2
 8005866:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800586a:	461a      	mov	r2, r3
 800586c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005870:	6013      	str	r3, [r2, #0]
 8005872:	e013      	b.n	800589c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005880:	461a      	mov	r2, r3
 8005882:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005886:	6013      	str	r3, [r2, #0]
 8005888:	e008      	b.n	800589c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4413      	add	r3, r2
 8005892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005896:	461a      	mov	r2, r3
 8005898:	2300      	movs	r3, #0
 800589a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058a8:	461a      	mov	r2, r3
 80058aa:	2300      	movs	r3, #0
 80058ac:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ba:	461a      	mov	r2, r3
 80058bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80058c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	3301      	adds	r3, #1
 80058c6:	613b      	str	r3, [r7, #16]
 80058c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80058cc:	461a      	mov	r2, r3
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d3b5      	bcc.n	8005840 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058d4:	2300      	movs	r3, #0
 80058d6:	613b      	str	r3, [r7, #16]
 80058d8:	e043      	b.n	8005962 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058f0:	d118      	bne.n	8005924 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10a      	bne.n	800590e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005904:	461a      	mov	r2, r3
 8005906:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800590a:	6013      	str	r3, [r2, #0]
 800590c:	e013      	b.n	8005936 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800591a:	461a      	mov	r2, r3
 800591c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005920:	6013      	str	r3, [r2, #0]
 8005922:	e008      	b.n	8005936 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005930:	461a      	mov	r2, r3
 8005932:	2300      	movs	r3, #0
 8005934:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005942:	461a      	mov	r2, r3
 8005944:	2300      	movs	r3, #0
 8005946:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4413      	add	r3, r2
 8005950:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005954:	461a      	mov	r2, r3
 8005956:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800595a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	3301      	adds	r3, #1
 8005960:	613b      	str	r3, [r7, #16]
 8005962:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005966:	461a      	mov	r2, r3
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	4293      	cmp	r3, r2
 800596c:	d3b5      	bcc.n	80058da <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800597c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005980:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800598e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005990:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005994:	2b00      	cmp	r3, #0
 8005996:	d105      	bne.n	80059a4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	f043 0210 	orr.w	r2, r3, #16
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	699a      	ldr	r2, [r3, #24]
 80059a8:	4b10      	ldr	r3, [pc, #64]	@ (80059ec <USB_DevInit+0x2c4>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80059b0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d005      	beq.n	80059c4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	f043 0208 	orr.w	r2, r3, #8
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80059c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d107      	bne.n	80059dc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80059d4:	f043 0304 	orr.w	r3, r3, #4
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80059dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059e8:	b004      	add	sp, #16
 80059ea:	4770      	bx	lr
 80059ec:	803c3800 	.word	0x803c3800

080059f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	3301      	adds	r3, #1
 8005a02:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a0a:	d901      	bls.n	8005a10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e01b      	b.n	8005a48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	daf2      	bge.n	80059fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	019b      	lsls	r3, r3, #6
 8005a20:	f043 0220 	orr.w	r2, r3, #32
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a34:	d901      	bls.n	8005a3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e006      	b.n	8005a48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f003 0320 	and.w	r3, r3, #32
 8005a42:	2b20      	cmp	r3, #32
 8005a44:	d0f0      	beq.n	8005a28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	3301      	adds	r3, #1
 8005a64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a6c:	d901      	bls.n	8005a72 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e018      	b.n	8005aa4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	daf2      	bge.n	8005a60 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2210      	movs	r2, #16
 8005a82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	3301      	adds	r3, #1
 8005a88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a90:	d901      	bls.n	8005a96 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e006      	b.n	8005aa4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f003 0310 	and.w	r3, r3, #16
 8005a9e:	2b10      	cmp	r3, #16
 8005aa0:	d0f0      	beq.n	8005a84 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	78fb      	ldrb	r3, [r7, #3]
 8005aca:	68f9      	ldr	r1, [r7, #12]
 8005acc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b087      	sub	sp, #28
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 0306 	and.w	r3, r3, #6
 8005afa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d102      	bne.n	8005b08 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005b02:	2300      	movs	r3, #0
 8005b04:	75fb      	strb	r3, [r7, #23]
 8005b06:	e00a      	b.n	8005b1e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d002      	beq.n	8005b14 <USB_GetDevSpeed+0x32>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2b06      	cmp	r3, #6
 8005b12:	d102      	bne.n	8005b1a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005b14:	2302      	movs	r3, #2
 8005b16:	75fb      	strb	r3, [r7, #23]
 8005b18:	e001      	b.n	8005b1e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005b1a:	230f      	movs	r3, #15
 8005b1c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	371c      	adds	r7, #28
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	785b      	ldrb	r3, [r3, #1]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d13a      	bne.n	8005bbe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b4e:	69da      	ldr	r2, [r3, #28]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	f003 030f 	and.w	r3, r3, #15
 8005b58:	2101      	movs	r1, #1
 8005b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	68f9      	ldr	r1, [r7, #12]
 8005b62:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b66:	4313      	orrs	r3, r2
 8005b68:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d155      	bne.n	8005c2c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	791b      	ldrb	r3, [r3, #4]
 8005b9a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b9c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	059b      	lsls	r3, r3, #22
 8005ba2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	0151      	lsls	r1, r2, #5
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	440a      	add	r2, r1
 8005bae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bba:	6013      	str	r3, [r2, #0]
 8005bbc:	e036      	b.n	8005c2c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bc4:	69da      	ldr	r2, [r3, #28]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	f003 030f 	and.w	r3, r3, #15
 8005bce:	2101      	movs	r1, #1
 8005bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd4:	041b      	lsls	r3, r3, #16
 8005bd6:	68f9      	ldr	r1, [r7, #12]
 8005bd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d11a      	bne.n	8005c2c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	791b      	ldrb	r3, [r3, #4]
 8005c10:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c12:	430b      	orrs	r3, r1
 8005c14:	4313      	orrs	r3, r2
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	0151      	lsls	r1, r2, #5
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	440a      	add	r2, r1
 8005c1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c2a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
	...

08005c3c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	785b      	ldrb	r3, [r3, #1]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d161      	bne.n	8005d1c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c6e:	d11f      	bne.n	8005cb0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	0151      	lsls	r1, r2, #5
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	440a      	add	r2, r1
 8005c86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c8a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005c8e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	0151      	lsls	r1, r2, #5
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	440a      	add	r2, r1
 8005ca6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005caa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005cae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	f003 030f 	and.w	r3, r3, #15
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	43db      	mvns	r3, r3
 8005cca:	68f9      	ldr	r1, [r7, #12]
 8005ccc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cda:	69da      	ldr	r2, [r3, #28]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	f003 030f 	and.w	r3, r3, #15
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	43db      	mvns	r3, r3
 8005cee:	68f9      	ldr	r1, [r7, #12]
 8005cf0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	0159      	lsls	r1, r3, #5
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	440b      	add	r3, r1
 8005d0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d12:	4619      	mov	r1, r3
 8005d14:	4b35      	ldr	r3, [pc, #212]	@ (8005dec <USB_DeactivateEndpoint+0x1b0>)
 8005d16:	4013      	ands	r3, r2
 8005d18:	600b      	str	r3, [r1, #0]
 8005d1a:	e060      	b.n	8005dde <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d32:	d11f      	bne.n	8005d74 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	0151      	lsls	r1, r2, #5
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	440a      	add	r2, r1
 8005d4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d4e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005d52:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	0151      	lsls	r1, r2, #5
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	440a      	add	r2, r1
 8005d6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	f003 030f 	and.w	r3, r3, #15
 8005d84:	2101      	movs	r1, #1
 8005d86:	fa01 f303 	lsl.w	r3, r1, r3
 8005d8a:	041b      	lsls	r3, r3, #16
 8005d8c:	43db      	mvns	r3, r3
 8005d8e:	68f9      	ldr	r1, [r7, #12]
 8005d90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d94:	4013      	ands	r3, r2
 8005d96:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d9e:	69da      	ldr	r2, [r3, #28]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	f003 030f 	and.w	r3, r3, #15
 8005da8:	2101      	movs	r1, #1
 8005daa:	fa01 f303 	lsl.w	r3, r1, r3
 8005dae:	041b      	lsls	r3, r3, #16
 8005db0:	43db      	mvns	r3, r3
 8005db2:	68f9      	ldr	r1, [r7, #12]
 8005db4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005db8:	4013      	ands	r3, r2
 8005dba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	0159      	lsls	r1, r3, #5
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	440b      	add	r3, r1
 8005dd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4b05      	ldr	r3, [pc, #20]	@ (8005df0 <USB_DeactivateEndpoint+0x1b4>)
 8005dda:	4013      	ands	r3, r2
 8005ddc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	ec337800 	.word	0xec337800
 8005df0:	eff37800 	.word	0xeff37800

08005df4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b08a      	sub	sp, #40	@ 0x28
 8005df8:	af02      	add	r7, sp, #8
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	785b      	ldrb	r3, [r3, #1]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	f040 817f 	bne.w	8006114 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d132      	bne.n	8005e84 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	0151      	lsls	r1, r2, #5
 8005e30:	69fa      	ldr	r2, [r7, #28]
 8005e32:	440a      	add	r2, r1
 8005e34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e38:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005e3c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005e40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	0151      	lsls	r1, r2, #5
 8005e54:	69fa      	ldr	r2, [r7, #28]
 8005e56:	440a      	add	r2, r1
 8005e58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e5c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	0151      	lsls	r1, r2, #5
 8005e74:	69fa      	ldr	r2, [r7, #28]
 8005e76:	440a      	add	r2, r1
 8005e78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e7c:	0cdb      	lsrs	r3, r3, #19
 8005e7e:	04db      	lsls	r3, r3, #19
 8005e80:	6113      	str	r3, [r2, #16]
 8005e82:	e097      	b.n	8005fb4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	0151      	lsls	r1, r2, #5
 8005e96:	69fa      	ldr	r2, [r7, #28]
 8005e98:	440a      	add	r2, r1
 8005e9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e9e:	0cdb      	lsrs	r3, r3, #19
 8005ea0:	04db      	lsls	r3, r3, #19
 8005ea2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	0151      	lsls	r1, r2, #5
 8005eb6:	69fa      	ldr	r2, [r7, #28]
 8005eb8:	440a      	add	r2, r1
 8005eba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ebe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005ec2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005ec6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d11a      	bne.n	8005f04 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	691a      	ldr	r2, [r3, #16]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d903      	bls.n	8005ee2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	689a      	ldr	r2, [r3, #8]
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	0151      	lsls	r1, r2, #5
 8005ef4:	69fa      	ldr	r2, [r7, #28]
 8005ef6:	440a      	add	r2, r1
 8005ef8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005efc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f00:	6113      	str	r3, [r2, #16]
 8005f02:	e044      	b.n	8005f8e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	691a      	ldr	r2, [r3, #16]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	1e5a      	subs	r2, r3, #1
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f18:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f26:	691a      	ldr	r2, [r3, #16]
 8005f28:	8afb      	ldrh	r3, [r7, #22]
 8005f2a:	04d9      	lsls	r1, r3, #19
 8005f2c:	4ba4      	ldr	r3, [pc, #656]	@ (80061c0 <USB_EPStartXfer+0x3cc>)
 8005f2e:	400b      	ands	r3, r1
 8005f30:	69b9      	ldr	r1, [r7, #24]
 8005f32:	0148      	lsls	r0, r1, #5
 8005f34:	69f9      	ldr	r1, [r7, #28]
 8005f36:	4401      	add	r1, r0
 8005f38:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	791b      	ldrb	r3, [r3, #4]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d122      	bne.n	8005f8e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	0151      	lsls	r1, r2, #5
 8005f5a:	69fa      	ldr	r2, [r7, #28]
 8005f5c:	440a      	add	r2, r1
 8005f5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f62:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005f66:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f74:	691a      	ldr	r2, [r3, #16]
 8005f76:	8afb      	ldrh	r3, [r7, #22]
 8005f78:	075b      	lsls	r3, r3, #29
 8005f7a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005f7e:	69b9      	ldr	r1, [r7, #24]
 8005f80:	0148      	lsls	r0, r1, #5
 8005f82:	69f9      	ldr	r1, [r7, #28]
 8005f84:	4401      	add	r1, r0
 8005f86:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f9a:	691a      	ldr	r2, [r3, #16]
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fa4:	69b9      	ldr	r1, [r7, #24]
 8005fa6:	0148      	lsls	r0, r1, #5
 8005fa8:	69f9      	ldr	r1, [r7, #28]
 8005faa:	4401      	add	r1, r0
 8005fac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005fb4:	79fb      	ldrb	r3, [r7, #7]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d14b      	bne.n	8006052 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d009      	beq.n	8005fd6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fce:	461a      	mov	r2, r3
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	791b      	ldrb	r3, [r3, #4]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d128      	bne.n	8006030 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d110      	bne.n	8006010 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	69ba      	ldr	r2, [r7, #24]
 8005ffe:	0151      	lsls	r1, r2, #5
 8006000:	69fa      	ldr	r2, [r7, #28]
 8006002:	440a      	add	r2, r1
 8006004:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006008:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800600c:	6013      	str	r3, [r2, #0]
 800600e:	e00f      	b.n	8006030 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	4413      	add	r3, r2
 8006018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	0151      	lsls	r1, r2, #5
 8006022:	69fa      	ldr	r2, [r7, #28]
 8006024:	440a      	add	r2, r1
 8006026:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800602a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800602e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	4413      	add	r3, r2
 8006038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69ba      	ldr	r2, [r7, #24]
 8006040:	0151      	lsls	r1, r2, #5
 8006042:	69fa      	ldr	r2, [r7, #28]
 8006044:	440a      	add	r2, r1
 8006046:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800604a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800604e:	6013      	str	r3, [r2, #0]
 8006050:	e166      	b.n	8006320 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	015a      	lsls	r2, r3, #5
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	4413      	add	r3, r2
 800605a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	69ba      	ldr	r2, [r7, #24]
 8006062:	0151      	lsls	r1, r2, #5
 8006064:	69fa      	ldr	r2, [r7, #28]
 8006066:	440a      	add	r2, r1
 8006068:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800606c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006070:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	791b      	ldrb	r3, [r3, #4]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d015      	beq.n	80060a6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	2b00      	cmp	r3, #0
 8006080:	f000 814e 	beq.w	8006320 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800608a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	f003 030f 	and.w	r3, r3, #15
 8006094:	2101      	movs	r1, #1
 8006096:	fa01 f303 	lsl.w	r3, r1, r3
 800609a:	69f9      	ldr	r1, [r7, #28]
 800609c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060a0:	4313      	orrs	r3, r2
 80060a2:	634b      	str	r3, [r1, #52]	@ 0x34
 80060a4:	e13c      	b.n	8006320 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d110      	bne.n	80060d8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	0151      	lsls	r1, r2, #5
 80060c8:	69fa      	ldr	r2, [r7, #28]
 80060ca:	440a      	add	r2, r1
 80060cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	e00f      	b.n	80060f8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	015a      	lsls	r2, r3, #5
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	4413      	add	r3, r2
 80060e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	0151      	lsls	r1, r2, #5
 80060ea:	69fa      	ldr	r2, [r7, #28]
 80060ec:	440a      	add	r2, r1
 80060ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060f6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	68d9      	ldr	r1, [r3, #12]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	781a      	ldrb	r2, [r3, #0]
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	b298      	uxth	r0, r3
 8006106:	79fb      	ldrb	r3, [r7, #7]
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	4603      	mov	r3, r0
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 f9b9 	bl	8006484 <USB_WritePacket>
 8006112:	e105      	b.n	8006320 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	0151      	lsls	r1, r2, #5
 8006126:	69fa      	ldr	r2, [r7, #28]
 8006128:	440a      	add	r2, r1
 800612a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800612e:	0cdb      	lsrs	r3, r3, #19
 8006130:	04db      	lsls	r3, r3, #19
 8006132:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	0151      	lsls	r1, r2, #5
 8006146:	69fa      	ldr	r2, [r7, #28]
 8006148:	440a      	add	r2, r1
 800614a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800614e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006152:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006156:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d132      	bne.n	80061c4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	689a      	ldr	r2, [r3, #8]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	689a      	ldr	r2, [r3, #8]
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	4413      	add	r3, r2
 800617e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006182:	691a      	ldr	r2, [r3, #16]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800618c:	69b9      	ldr	r1, [r7, #24]
 800618e:	0148      	lsls	r0, r1, #5
 8006190:	69f9      	ldr	r1, [r7, #28]
 8006192:	4401      	add	r1, r0
 8006194:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006198:	4313      	orrs	r3, r2
 800619a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	0151      	lsls	r1, r2, #5
 80061ae:	69fa      	ldr	r2, [r7, #28]
 80061b0:	440a      	add	r2, r1
 80061b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80061ba:	6113      	str	r3, [r2, #16]
 80061bc:	e062      	b.n	8006284 <USB_EPStartXfer+0x490>
 80061be:	bf00      	nop
 80061c0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d123      	bne.n	8006214 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061d8:	691a      	ldr	r2, [r3, #16]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061e2:	69b9      	ldr	r1, [r7, #24]
 80061e4:	0148      	lsls	r0, r1, #5
 80061e6:	69f9      	ldr	r1, [r7, #28]
 80061e8:	4401      	add	r1, r0
 80061ea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80061ee:	4313      	orrs	r3, r2
 80061f0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	0151      	lsls	r1, r2, #5
 8006204:	69fa      	ldr	r2, [r7, #28]
 8006206:	440a      	add	r2, r1
 8006208:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800620c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006210:	6113      	str	r3, [r2, #16]
 8006212:	e037      	b.n	8006284 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	691a      	ldr	r2, [r3, #16]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	4413      	add	r3, r2
 800621e:	1e5a      	subs	r2, r3, #1
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	fbb2 f3f3 	udiv	r3, r2, r3
 8006228:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	8afa      	ldrh	r2, [r7, #22]
 8006230:	fb03 f202 	mul.w	r2, r3, r2
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	4413      	add	r3, r2
 8006240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006244:	691a      	ldr	r2, [r3, #16]
 8006246:	8afb      	ldrh	r3, [r7, #22]
 8006248:	04d9      	lsls	r1, r3, #19
 800624a:	4b38      	ldr	r3, [pc, #224]	@ (800632c <USB_EPStartXfer+0x538>)
 800624c:	400b      	ands	r3, r1
 800624e:	69b9      	ldr	r1, [r7, #24]
 8006250:	0148      	lsls	r0, r1, #5
 8006252:	69f9      	ldr	r1, [r7, #28]
 8006254:	4401      	add	r1, r0
 8006256:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800625a:	4313      	orrs	r3, r2
 800625c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	4413      	add	r3, r2
 8006266:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800626a:	691a      	ldr	r2, [r3, #16]
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006274:	69b9      	ldr	r1, [r7, #24]
 8006276:	0148      	lsls	r0, r1, #5
 8006278:	69f9      	ldr	r1, [r7, #28]
 800627a:	4401      	add	r1, r0
 800627c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006280:	4313      	orrs	r3, r2
 8006282:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006284:	79fb      	ldrb	r3, [r7, #7]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d10d      	bne.n	80062a6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d009      	beq.n	80062a6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	68d9      	ldr	r1, [r3, #12]
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	4413      	add	r3, r2
 800629e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062a2:	460a      	mov	r2, r1
 80062a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	791b      	ldrb	r3, [r3, #4]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d128      	bne.n	8006300 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d110      	bne.n	80062e0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	0151      	lsls	r1, r2, #5
 80062d0:	69fa      	ldr	r2, [r7, #28]
 80062d2:	440a      	add	r2, r1
 80062d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	e00f      	b.n	8006300 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	0151      	lsls	r1, r2, #5
 80062f2:	69fa      	ldr	r2, [r7, #28]
 80062f4:	440a      	add	r2, r1
 80062f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	0151      	lsls	r1, r2, #5
 8006312:	69fa      	ldr	r2, [r7, #28]
 8006314:	440a      	add	r2, r1
 8006316:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800631a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800631e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3720      	adds	r7, #32
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	1ff80000 	.word	0x1ff80000

08006330 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006330:	b480      	push	{r7}
 8006332:	b087      	sub	sp, #28
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800633a:	2300      	movs	r3, #0
 800633c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800633e:	2300      	movs	r3, #0
 8006340:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	785b      	ldrb	r3, [r3, #1]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d14a      	bne.n	80063e4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	4413      	add	r3, r2
 8006358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006362:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006366:	f040 8086 	bne.w	8006476 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	7812      	ldrb	r2, [r2, #0]
 800637e:	0151      	lsls	r1, r2, #5
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	440a      	add	r2, r1
 8006384:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006388:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800638c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	7812      	ldrb	r2, [r2, #0]
 80063a2:	0151      	lsls	r1, r2, #5
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	440a      	add	r2, r1
 80063a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80063b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	3301      	adds	r3, #1
 80063b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 80063be:	4293      	cmp	r3, r2
 80063c0:	d902      	bls.n	80063c8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	75fb      	strb	r3, [r7, #23]
          break;
 80063c6:	e056      	b.n	8006476 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063e0:	d0e7      	beq.n	80063b2 <USB_EPStopXfer+0x82>
 80063e2:	e048      	b.n	8006476 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063fc:	d13b      	bne.n	8006476 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	4413      	add	r3, r2
 8006408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	7812      	ldrb	r2, [r2, #0]
 8006412:	0151      	lsls	r1, r2, #5
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	440a      	add	r2, r1
 8006418:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800641c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006420:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	4413      	add	r3, r2
 800642c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	7812      	ldrb	r2, [r2, #0]
 8006436:	0151      	lsls	r1, r2, #5
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	440a      	add	r2, r1
 800643c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006440:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006444:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	3301      	adds	r3, #1
 800644a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006452:	4293      	cmp	r3, r2
 8006454:	d902      	bls.n	800645c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	75fb      	strb	r3, [r7, #23]
          break;
 800645a:	e00c      	b.n	8006476 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	015a      	lsls	r2, r3, #5
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	4413      	add	r3, r2
 8006466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006470:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006474:	d0e7      	beq.n	8006446 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006476:	7dfb      	ldrb	r3, [r7, #23]
}
 8006478:	4618      	mov	r0, r3
 800647a:	371c      	adds	r7, #28
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006484:	b480      	push	{r7}
 8006486:	b089      	sub	sp, #36	@ 0x24
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	4611      	mov	r1, r2
 8006490:	461a      	mov	r2, r3
 8006492:	460b      	mov	r3, r1
 8006494:	71fb      	strb	r3, [r7, #7]
 8006496:	4613      	mov	r3, r2
 8006498:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80064a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d123      	bne.n	80064f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80064aa:	88bb      	ldrh	r3, [r7, #4]
 80064ac:	3303      	adds	r3, #3
 80064ae:	089b      	lsrs	r3, r3, #2
 80064b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80064b2:	2300      	movs	r3, #0
 80064b4:	61bb      	str	r3, [r7, #24]
 80064b6:	e018      	b.n	80064ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80064b8:	79fb      	ldrb	r3, [r7, #7]
 80064ba:	031a      	lsls	r2, r3, #12
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	4413      	add	r3, r2
 80064c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064c4:	461a      	mov	r2, r3
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	3301      	adds	r3, #1
 80064d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	3301      	adds	r3, #1
 80064d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	3301      	adds	r3, #1
 80064dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	3301      	adds	r3, #1
 80064e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	3301      	adds	r3, #1
 80064e8:	61bb      	str	r3, [r7, #24]
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d3e2      	bcc.n	80064b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3724      	adds	r7, #36	@ 0x24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006500:	b480      	push	{r7}
 8006502:	b08b      	sub	sp, #44	@ 0x2c
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	4613      	mov	r3, r2
 800650c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006516:	88fb      	ldrh	r3, [r7, #6]
 8006518:	089b      	lsrs	r3, r3, #2
 800651a:	b29b      	uxth	r3, r3
 800651c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800651e:	88fb      	ldrh	r3, [r7, #6]
 8006520:	f003 0303 	and.w	r3, r3, #3
 8006524:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006526:	2300      	movs	r3, #0
 8006528:	623b      	str	r3, [r7, #32]
 800652a:	e014      	b.n	8006556 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006536:	601a      	str	r2, [r3, #0]
    pDest++;
 8006538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653a:	3301      	adds	r3, #1
 800653c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800653e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006540:	3301      	adds	r3, #1
 8006542:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006546:	3301      	adds	r3, #1
 8006548:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800654a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654c:	3301      	adds	r3, #1
 800654e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006550:	6a3b      	ldr	r3, [r7, #32]
 8006552:	3301      	adds	r3, #1
 8006554:	623b      	str	r3, [r7, #32]
 8006556:	6a3a      	ldr	r2, [r7, #32]
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	429a      	cmp	r2, r3
 800655c:	d3e6      	bcc.n	800652c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800655e:	8bfb      	ldrh	r3, [r7, #30]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d01e      	beq.n	80065a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006564:	2300      	movs	r3, #0
 8006566:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800656e:	461a      	mov	r2, r3
 8006570:	f107 0310 	add.w	r3, r7, #16
 8006574:	6812      	ldr	r2, [r2, #0]
 8006576:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	b2db      	uxtb	r3, r3
 800657e:	00db      	lsls	r3, r3, #3
 8006580:	fa22 f303 	lsr.w	r3, r2, r3
 8006584:	b2da      	uxtb	r2, r3
 8006586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006588:	701a      	strb	r2, [r3, #0]
      i++;
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	3301      	adds	r3, #1
 800658e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006592:	3301      	adds	r3, #1
 8006594:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006596:	8bfb      	ldrh	r3, [r7, #30]
 8006598:	3b01      	subs	r3, #1
 800659a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800659c:	8bfb      	ldrh	r3, [r7, #30]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1ea      	bne.n	8006578 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80065a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	372c      	adds	r7, #44	@ 0x2c
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	785b      	ldrb	r3, [r3, #1]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d12c      	bne.n	8006626 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	db12      	blt.n	8006604 <USB_EPSetStall+0x54>
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00f      	beq.n	8006604 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	0151      	lsls	r1, r2, #5
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	440a      	add	r2, r1
 80065fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006602:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	0151      	lsls	r1, r2, #5
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	440a      	add	r2, r1
 800661a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800661e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006622:	6013      	str	r3, [r2, #0]
 8006624:	e02b      	b.n	800667e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	4413      	add	r3, r2
 800662e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	db12      	blt.n	800665e <USB_EPSetStall+0xae>
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00f      	beq.n	800665e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	015a      	lsls	r2, r3, #5
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	4413      	add	r3, r2
 8006646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	0151      	lsls	r1, r2, #5
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	440a      	add	r2, r1
 8006654:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006658:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800665c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	0151      	lsls	r1, r2, #5
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	440a      	add	r2, r1
 8006674:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006678:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800667c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	785b      	ldrb	r3, [r3, #1]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d128      	bne.n	80066fa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	0151      	lsls	r1, r2, #5
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	440a      	add	r2, r1
 80066be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80066c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	791b      	ldrb	r3, [r3, #4]
 80066cc:	2b03      	cmp	r3, #3
 80066ce:	d003      	beq.n	80066d8 <USB_EPClearStall+0x4c>
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	791b      	ldrb	r3, [r3, #4]
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d138      	bne.n	800674a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	0151      	lsls	r1, r2, #5
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	440a      	add	r2, r1
 80066ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066f6:	6013      	str	r3, [r2, #0]
 80066f8:	e027      	b.n	800674a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	4413      	add	r3, r2
 8006702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	0151      	lsls	r1, r2, #5
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	440a      	add	r2, r1
 8006710:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006714:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006718:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	791b      	ldrb	r3, [r3, #4]
 800671e:	2b03      	cmp	r3, #3
 8006720:	d003      	beq.n	800672a <USB_EPClearStall+0x9e>
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	791b      	ldrb	r3, [r3, #4]
 8006726:	2b02      	cmp	r3, #2
 8006728:	d10f      	bne.n	800674a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	015a      	lsls	r2, r3, #5
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	4413      	add	r3, r2
 8006732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	0151      	lsls	r1, r2, #5
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	440a      	add	r2, r1
 8006740:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006748:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	460b      	mov	r3, r1
 8006762:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006776:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800677a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	78fb      	ldrb	r3, [r7, #3]
 8006786:	011b      	lsls	r3, r3, #4
 8006788:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800678c:	68f9      	ldr	r1, [r7, #12]
 800678e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006792:	4313      	orrs	r3, r2
 8006794:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80067be:	f023 0303 	bic.w	r3, r3, #3
 80067c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067d2:	f023 0302 	bic.w	r3, r3, #2
 80067d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b085      	sub	sp, #20
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006800:	f023 0303 	bic.w	r3, r3, #3
 8006804:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006814:	f043 0302 	orr.w	r3, r3, #2
 8006818:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	4013      	ands	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006840:	68fb      	ldr	r3, [r7, #12]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3714      	adds	r7, #20
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800684e:	b480      	push	{r7}
 8006850:	b085      	sub	sp, #20
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	4013      	ands	r3, r2
 8006870:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	0c1b      	lsrs	r3, r3, #16
}
 8006876:	4618      	mov	r0, r3
 8006878:	3714      	adds	r7, #20
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006882:	b480      	push	{r7}
 8006884:	b085      	sub	sp, #20
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800689e:	69db      	ldr	r3, [r3, #28]
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	4013      	ands	r3, r2
 80068a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	b29b      	uxth	r3, r3
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b085      	sub	sp, #20
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
 80068be:	460b      	mov	r3, r1
 80068c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80068c6:	78fb      	ldrb	r3, [r7, #3]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	4013      	ands	r3, r2
 80068e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068e4:	68bb      	ldr	r3, [r7, #8]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b087      	sub	sp, #28
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
 80068fa:	460b      	mov	r3, r1
 80068fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006914:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006916:	78fb      	ldrb	r3, [r7, #3]
 8006918:	f003 030f 	and.w	r3, r3, #15
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	fa22 f303 	lsr.w	r3, r2, r3
 8006922:	01db      	lsls	r3, r3, #7
 8006924:	b2db      	uxtb	r3, r3
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	4313      	orrs	r3, r2
 800692a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800692c:	78fb      	ldrb	r3, [r7, #3]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	4413      	add	r3, r2
 8006934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	4013      	ands	r3, r2
 800693e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006940:	68bb      	ldr	r3, [r7, #8]
}
 8006942:	4618      	mov	r0, r3
 8006944:	371c      	adds	r7, #28
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800694e:	b480      	push	{r7}
 8006950:	b083      	sub	sp, #12
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	f003 0301 	and.w	r3, r3, #1
}
 800695e:	4618      	mov	r0, r3
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800696a:	b480      	push	{r7}
 800696c:	b085      	sub	sp, #20
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006984:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006988:	f023 0307 	bic.w	r3, r3, #7
 800698c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800699c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b087      	sub	sp, #28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	460b      	mov	r3, r1
 80069ba:	607a      	str	r2, [r7, #4]
 80069bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	333c      	adds	r3, #60	@ 0x3c
 80069c6:	3304      	adds	r3, #4
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	4a26      	ldr	r2, [pc, #152]	@ (8006a68 <USB_EP0_OutStart+0xb8>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d90a      	bls.n	80069ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069e4:	d101      	bne.n	80069ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80069e6:	2300      	movs	r3, #0
 80069e8:	e037      	b.n	8006a5a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069f0:	461a      	mov	r2, r3
 80069f2:	2300      	movs	r3, #0
 80069f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a18:	f043 0318 	orr.w	r3, r3, #24
 8006a1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a2c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006a30:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006a32:	7afb      	ldrb	r3, [r7, #11]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d10f      	bne.n	8006a58 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a3e:	461a      	mov	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a52:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006a56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	371c      	adds	r7, #28
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	4f54300a 	.word	0x4f54300a

08006a6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a84:	d901      	bls.n	8006a8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e022      	b.n	8006ad0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	daf2      	bge.n	8006a78 <USB_CoreReset+0xc>

  count = 10U;
 8006a92:	230a      	movs	r3, #10
 8006a94:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006a96:	e002      	b.n	8006a9e <USB_CoreReset+0x32>
  {
    count--;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1f9      	bne.n	8006a98 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	f043 0201 	orr.w	r2, r3, #1
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006abc:	d901      	bls.n	8006ac2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e006      	b.n	8006ad0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d0f0      	beq.n	8006ab0 <USB_CoreReset+0x44>

  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3714      	adds	r7, #20
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006ae8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006aec:	f002 fd02 	bl	80094f4 <USBD_static_malloc>
 8006af0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d109      	bne.n	8006b0c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	32b0      	adds	r2, #176	@ 0xb0
 8006b02:	2100      	movs	r1, #0
 8006b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006b08:	2302      	movs	r3, #2
 8006b0a:	e0d4      	b.n	8006cb6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006b0c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006b10:	2100      	movs	r1, #0
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f002 fd32 	bl	800957c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	32b0      	adds	r2, #176	@ 0xb0
 8006b22:	68f9      	ldr	r1, [r7, #12]
 8006b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	32b0      	adds	r2, #176	@ 0xb0
 8006b32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	7c1b      	ldrb	r3, [r3, #16]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d138      	bne.n	8006bb6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b44:	4b5e      	ldr	r3, [pc, #376]	@ (8006cc0 <USBD_CDC_Init+0x1e4>)
 8006b46:	7819      	ldrb	r1, [r3, #0]
 8006b48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b4c:	2202      	movs	r2, #2
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f002 fbad 	bl	80092ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b54:	4b5a      	ldr	r3, [pc, #360]	@ (8006cc0 <USBD_CDC_Init+0x1e4>)
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	f003 020f 	and.w	r2, r3, #15
 8006b5c:	6879      	ldr	r1, [r7, #4]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	440b      	add	r3, r1
 8006b68:	3323      	adds	r3, #35	@ 0x23
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b6e:	4b55      	ldr	r3, [pc, #340]	@ (8006cc4 <USBD_CDC_Init+0x1e8>)
 8006b70:	7819      	ldrb	r1, [r3, #0]
 8006b72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b76:	2202      	movs	r2, #2
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f002 fb98 	bl	80092ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006b7e:	4b51      	ldr	r3, [pc, #324]	@ (8006cc4 <USBD_CDC_Init+0x1e8>)
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	f003 020f 	and.w	r2, r3, #15
 8006b86:	6879      	ldr	r1, [r7, #4]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	440b      	add	r3, r1
 8006b92:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006b96:	2201      	movs	r2, #1
 8006b98:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006b9a:	4b4b      	ldr	r3, [pc, #300]	@ (8006cc8 <USBD_CDC_Init+0x1ec>)
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	f003 020f 	and.w	r2, r3, #15
 8006ba2:	6879      	ldr	r1, [r7, #4]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	440b      	add	r3, r1
 8006bae:	331c      	adds	r3, #28
 8006bb0:	2210      	movs	r2, #16
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	e035      	b.n	8006c22 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006bb6:	4b42      	ldr	r3, [pc, #264]	@ (8006cc0 <USBD_CDC_Init+0x1e4>)
 8006bb8:	7819      	ldrb	r1, [r3, #0]
 8006bba:	2340      	movs	r3, #64	@ 0x40
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f002 fb75 	bl	80092ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006bc4:	4b3e      	ldr	r3, [pc, #248]	@ (8006cc0 <USBD_CDC_Init+0x1e4>)
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	f003 020f 	and.w	r2, r3, #15
 8006bcc:	6879      	ldr	r1, [r7, #4]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4413      	add	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	440b      	add	r3, r1
 8006bd8:	3323      	adds	r3, #35	@ 0x23
 8006bda:	2201      	movs	r2, #1
 8006bdc:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006bde:	4b39      	ldr	r3, [pc, #228]	@ (8006cc4 <USBD_CDC_Init+0x1e8>)
 8006be0:	7819      	ldrb	r1, [r3, #0]
 8006be2:	2340      	movs	r3, #64	@ 0x40
 8006be4:	2202      	movs	r2, #2
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f002 fb61 	bl	80092ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006bec:	4b35      	ldr	r3, [pc, #212]	@ (8006cc4 <USBD_CDC_Init+0x1e8>)
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	f003 020f 	and.w	r2, r3, #15
 8006bf4:	6879      	ldr	r1, [r7, #4]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	440b      	add	r3, r1
 8006c00:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006c04:	2201      	movs	r2, #1
 8006c06:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c08:	4b2f      	ldr	r3, [pc, #188]	@ (8006cc8 <USBD_CDC_Init+0x1ec>)
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	f003 020f 	and.w	r2, r3, #15
 8006c10:	6879      	ldr	r1, [r7, #4]
 8006c12:	4613      	mov	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	440b      	add	r3, r1
 8006c1c:	331c      	adds	r3, #28
 8006c1e:	2210      	movs	r2, #16
 8006c20:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c22:	4b29      	ldr	r3, [pc, #164]	@ (8006cc8 <USBD_CDC_Init+0x1ec>)
 8006c24:	7819      	ldrb	r1, [r3, #0]
 8006c26:	2308      	movs	r3, #8
 8006c28:	2203      	movs	r2, #3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f002 fb3f 	bl	80092ae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006c30:	4b25      	ldr	r3, [pc, #148]	@ (8006cc8 <USBD_CDC_Init+0x1ec>)
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	f003 020f 	and.w	r2, r3, #15
 8006c38:	6879      	ldr	r1, [r7, #4]
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	440b      	add	r3, r1
 8006c44:	3323      	adds	r3, #35	@ 0x23
 8006c46:	2201      	movs	r2, #1
 8006c48:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	33b0      	adds	r3, #176	@ 0xb0
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006c80:	2302      	movs	r3, #2
 8006c82:	e018      	b.n	8006cb6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	7c1b      	ldrb	r3, [r3, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10a      	bne.n	8006ca2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc4 <USBD_CDC_Init+0x1e8>)
 8006c8e:	7819      	ldrb	r1, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006c96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f002 fbf6 	bl	800948c <USBD_LL_PrepareReceive>
 8006ca0:	e008      	b.n	8006cb4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ca2:	4b08      	ldr	r3, [pc, #32]	@ (8006cc4 <USBD_CDC_Init+0x1e8>)
 8006ca4:	7819      	ldrb	r1, [r3, #0]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006cac:	2340      	movs	r3, #64	@ 0x40
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f002 fbec 	bl	800948c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	20000093 	.word	0x20000093
 8006cc4:	20000094 	.word	0x20000094
 8006cc8:	20000095 	.word	0x20000095

08006ccc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006cd8:	4b3a      	ldr	r3, [pc, #232]	@ (8006dc4 <USBD_CDC_DeInit+0xf8>)
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f002 fb0b 	bl	80092fa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006ce4:	4b37      	ldr	r3, [pc, #220]	@ (8006dc4 <USBD_CDC_DeInit+0xf8>)
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	f003 020f 	and.w	r2, r3, #15
 8006cec:	6879      	ldr	r1, [r7, #4]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	440b      	add	r3, r1
 8006cf8:	3323      	adds	r3, #35	@ 0x23
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006cfe:	4b32      	ldr	r3, [pc, #200]	@ (8006dc8 <USBD_CDC_DeInit+0xfc>)
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	4619      	mov	r1, r3
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f002 faf8 	bl	80092fa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8006dc8 <USBD_CDC_DeInit+0xfc>)
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	f003 020f 	and.w	r2, r3, #15
 8006d12:	6879      	ldr	r1, [r7, #4]
 8006d14:	4613      	mov	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	440b      	add	r3, r1
 8006d1e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006d22:	2200      	movs	r2, #0
 8006d24:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006d26:	4b29      	ldr	r3, [pc, #164]	@ (8006dcc <USBD_CDC_DeInit+0x100>)
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f002 fae4 	bl	80092fa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006d32:	4b26      	ldr	r3, [pc, #152]	@ (8006dcc <USBD_CDC_DeInit+0x100>)
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	f003 020f 	and.w	r2, r3, #15
 8006d3a:	6879      	ldr	r1, [r7, #4]
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4413      	add	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	440b      	add	r3, r1
 8006d46:	3323      	adds	r3, #35	@ 0x23
 8006d48:	2200      	movs	r2, #0
 8006d4a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8006dcc <USBD_CDC_DeInit+0x100>)
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	f003 020f 	and.w	r2, r3, #15
 8006d54:	6879      	ldr	r1, [r7, #4]
 8006d56:	4613      	mov	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4413      	add	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	440b      	add	r3, r1
 8006d60:	331c      	adds	r3, #28
 8006d62:	2200      	movs	r2, #0
 8006d64:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	32b0      	adds	r2, #176	@ 0xb0
 8006d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d01f      	beq.n	8006db8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	33b0      	adds	r3, #176	@ 0xb0
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4413      	add	r3, r2
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	32b0      	adds	r2, #176	@ 0xb0
 8006d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f002 fbb8 	bl	8009510 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	32b0      	adds	r2, #176	@ 0xb0
 8006daa:	2100      	movs	r1, #0
 8006dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	20000093 	.word	0x20000093
 8006dc8:	20000094 	.word	0x20000094
 8006dcc:	20000095 	.word	0x20000095

08006dd0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	32b0      	adds	r2, #176	@ 0xb0
 8006de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006dea:	2300      	movs	r3, #0
 8006dec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006dee:	2300      	movs	r3, #0
 8006df0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006df2:	2300      	movs	r3, #0
 8006df4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d101      	bne.n	8006e00 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e0bf      	b.n	8006f80 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d050      	beq.n	8006eae <USBD_CDC_Setup+0xde>
 8006e0c:	2b20      	cmp	r3, #32
 8006e0e:	f040 80af 	bne.w	8006f70 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	88db      	ldrh	r3, [r3, #6]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d03a      	beq.n	8006e90 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	b25b      	sxtb	r3, r3
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	da1b      	bge.n	8006e5c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	33b0      	adds	r3, #176	@ 0xb0
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4413      	add	r3, r2
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006e3a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	88d2      	ldrh	r2, [r2, #6]
 8006e40:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	88db      	ldrh	r3, [r3, #6]
 8006e46:	2b07      	cmp	r3, #7
 8006e48:	bf28      	it	cs
 8006e4a:	2307      	movcs	r3, #7
 8006e4c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	89fa      	ldrh	r2, [r7, #14]
 8006e52:	4619      	mov	r1, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f001 fda9 	bl	80089ac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006e5a:	e090      	b.n	8006f7e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	785a      	ldrb	r2, [r3, #1]
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	88db      	ldrh	r3, [r3, #6]
 8006e6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8006e6c:	d803      	bhi.n	8006e76 <USBD_CDC_Setup+0xa6>
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	88db      	ldrh	r3, [r3, #6]
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	e000      	b.n	8006e78 <USBD_CDC_Setup+0xa8>
 8006e76:	2240      	movs	r2, #64	@ 0x40
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006e7e:	6939      	ldr	r1, [r7, #16]
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006e86:	461a      	mov	r2, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f001 fdbe 	bl	8008a0a <USBD_CtlPrepareRx>
      break;
 8006e8e:	e076      	b.n	8006f7e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	33b0      	adds	r3, #176	@ 0xb0
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	7850      	ldrb	r0, [r2, #1]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	4798      	blx	r3
      break;
 8006eac:	e067      	b.n	8006f7e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	785b      	ldrb	r3, [r3, #1]
 8006eb2:	2b0b      	cmp	r3, #11
 8006eb4:	d851      	bhi.n	8006f5a <USBD_CDC_Setup+0x18a>
 8006eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8006ebc <USBD_CDC_Setup+0xec>)
 8006eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ebc:	08006eed 	.word	0x08006eed
 8006ec0:	08006f69 	.word	0x08006f69
 8006ec4:	08006f5b 	.word	0x08006f5b
 8006ec8:	08006f5b 	.word	0x08006f5b
 8006ecc:	08006f5b 	.word	0x08006f5b
 8006ed0:	08006f5b 	.word	0x08006f5b
 8006ed4:	08006f5b 	.word	0x08006f5b
 8006ed8:	08006f5b 	.word	0x08006f5b
 8006edc:	08006f5b 	.word	0x08006f5b
 8006ee0:	08006f5b 	.word	0x08006f5b
 8006ee4:	08006f17 	.word	0x08006f17
 8006ee8:	08006f41 	.word	0x08006f41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b03      	cmp	r3, #3
 8006ef6:	d107      	bne.n	8006f08 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006ef8:	f107 030a 	add.w	r3, r7, #10
 8006efc:	2202      	movs	r2, #2
 8006efe:	4619      	mov	r1, r3
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f001 fd53 	bl	80089ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f06:	e032      	b.n	8006f6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006f08:	6839      	ldr	r1, [r7, #0]
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f001 fcd1 	bl	80088b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f10:	2303      	movs	r3, #3
 8006f12:	75fb      	strb	r3, [r7, #23]
          break;
 8006f14:	e02b      	b.n	8006f6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d107      	bne.n	8006f32 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f22:	f107 030d 	add.w	r3, r7, #13
 8006f26:	2201      	movs	r2, #1
 8006f28:	4619      	mov	r1, r3
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f001 fd3e 	bl	80089ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f30:	e01d      	b.n	8006f6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006f32:	6839      	ldr	r1, [r7, #0]
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f001 fcbc 	bl	80088b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	75fb      	strb	r3, [r7, #23]
          break;
 8006f3e:	e016      	b.n	8006f6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b03      	cmp	r3, #3
 8006f4a:	d00f      	beq.n	8006f6c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006f4c:	6839      	ldr	r1, [r7, #0]
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f001 fcaf 	bl	80088b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f54:	2303      	movs	r3, #3
 8006f56:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006f58:	e008      	b.n	8006f6c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006f5a:	6839      	ldr	r1, [r7, #0]
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f001 fca8 	bl	80088b2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006f62:	2303      	movs	r3, #3
 8006f64:	75fb      	strb	r3, [r7, #23]
          break;
 8006f66:	e002      	b.n	8006f6e <USBD_CDC_Setup+0x19e>
          break;
 8006f68:	bf00      	nop
 8006f6a:	e008      	b.n	8006f7e <USBD_CDC_Setup+0x1ae>
          break;
 8006f6c:	bf00      	nop
      }
      break;
 8006f6e:	e006      	b.n	8006f7e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006f70:	6839      	ldr	r1, [r7, #0]
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f001 fc9d 	bl	80088b2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f7c:	bf00      	nop
  }

  return (uint8_t)ret;
 8006f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3718      	adds	r7, #24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	460b      	mov	r3, r1
 8006f92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006f9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	32b0      	adds	r2, #176	@ 0xb0
 8006fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e065      	b.n	800707e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	32b0      	adds	r2, #176	@ 0xb0
 8006fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006fc2:	78fb      	ldrb	r3, [r7, #3]
 8006fc4:	f003 020f 	and.w	r2, r3, #15
 8006fc8:	6879      	ldr	r1, [r7, #4]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	440b      	add	r3, r1
 8006fd4:	3314      	adds	r3, #20
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d02f      	beq.n	800703c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006fdc:	78fb      	ldrb	r3, [r7, #3]
 8006fde:	f003 020f 	and.w	r2, r3, #15
 8006fe2:	6879      	ldr	r1, [r7, #4]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	440b      	add	r3, r1
 8006fee:	3314      	adds	r3, #20
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	78fb      	ldrb	r3, [r7, #3]
 8006ff4:	f003 010f 	and.w	r1, r3, #15
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	00db      	lsls	r3, r3, #3
 8006ffe:	440b      	add	r3, r1
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4403      	add	r3, r0
 8007004:	331c      	adds	r3, #28
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	fbb2 f1f3 	udiv	r1, r2, r3
 800700c:	fb01 f303 	mul.w	r3, r1, r3
 8007010:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007012:	2b00      	cmp	r3, #0
 8007014:	d112      	bne.n	800703c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007016:	78fb      	ldrb	r3, [r7, #3]
 8007018:	f003 020f 	and.w	r2, r3, #15
 800701c:	6879      	ldr	r1, [r7, #4]
 800701e:	4613      	mov	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	440b      	add	r3, r1
 8007028:	3314      	adds	r3, #20
 800702a:	2200      	movs	r2, #0
 800702c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800702e:	78f9      	ldrb	r1, [r7, #3]
 8007030:	2300      	movs	r3, #0
 8007032:	2200      	movs	r2, #0
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f002 fa08 	bl	800944a <USBD_LL_Transmit>
 800703a:	e01f      	b.n	800707c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	2200      	movs	r2, #0
 8007040:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	33b0      	adds	r3, #176	@ 0xb0
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d010      	beq.n	800707c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	33b0      	adds	r3, #176	@ 0xb0
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007078:	78fa      	ldrb	r2, [r7, #3]
 800707a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b084      	sub	sp, #16
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	460b      	mov	r3, r1
 8007090:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	32b0      	adds	r2, #176	@ 0xb0
 800709c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	32b0      	adds	r2, #176	@ 0xb0
 80070ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e01a      	b.n	80070ee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80070b8:	78fb      	ldrb	r3, [r7, #3]
 80070ba:	4619      	mov	r1, r3
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f002 fa06 	bl	80094ce <USBD_LL_GetRxDataSize>
 80070c2:	4602      	mov	r2, r0
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	33b0      	adds	r3, #176	@ 0xb0
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80070e8:	4611      	mov	r1, r2
 80070ea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b084      	sub	sp, #16
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	32b0      	adds	r2, #176	@ 0xb0
 8007108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800710c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d101      	bne.n	8007118 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007114:	2303      	movs	r3, #3
 8007116:	e024      	b.n	8007162 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	33b0      	adds	r3, #176	@ 0xb0
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4413      	add	r3, r2
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d019      	beq.n	8007160 <USBD_CDC_EP0_RxReady+0x6a>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007132:	2bff      	cmp	r3, #255	@ 0xff
 8007134:	d014      	beq.n	8007160 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	33b0      	adds	r3, #176	@ 0xb0
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	4413      	add	r3, r2
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800714e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007156:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	22ff      	movs	r2, #255	@ 0xff
 800715c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b086      	sub	sp, #24
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007174:	2182      	movs	r1, #130	@ 0x82
 8007176:	4818      	ldr	r0, [pc, #96]	@ (80071d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007178:	f000 fd62 	bl	8007c40 <USBD_GetEpDesc>
 800717c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800717e:	2101      	movs	r1, #1
 8007180:	4815      	ldr	r0, [pc, #84]	@ (80071d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007182:	f000 fd5d 	bl	8007c40 <USBD_GetEpDesc>
 8007186:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007188:	2181      	movs	r1, #129	@ 0x81
 800718a:	4813      	ldr	r0, [pc, #76]	@ (80071d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800718c:	f000 fd58 	bl	8007c40 <USBD_GetEpDesc>
 8007190:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d002      	beq.n	800719e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	2210      	movs	r2, #16
 800719c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d006      	beq.n	80071b2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071ac:	711a      	strb	r2, [r3, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d006      	beq.n	80071c6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071c0:	711a      	strb	r2, [r3, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2243      	movs	r2, #67	@ 0x43
 80071ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80071cc:	4b02      	ldr	r3, [pc, #8]	@ (80071d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3718      	adds	r7, #24
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	20000050 	.word	0x20000050

080071dc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80071e4:	2182      	movs	r1, #130	@ 0x82
 80071e6:	4818      	ldr	r0, [pc, #96]	@ (8007248 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80071e8:	f000 fd2a 	bl	8007c40 <USBD_GetEpDesc>
 80071ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80071ee:	2101      	movs	r1, #1
 80071f0:	4815      	ldr	r0, [pc, #84]	@ (8007248 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80071f2:	f000 fd25 	bl	8007c40 <USBD_GetEpDesc>
 80071f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80071f8:	2181      	movs	r1, #129	@ 0x81
 80071fa:	4813      	ldr	r0, [pc, #76]	@ (8007248 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80071fc:	f000 fd20 	bl	8007c40 <USBD_GetEpDesc>
 8007200:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2210      	movs	r2, #16
 800720c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d006      	beq.n	8007222 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	2200      	movs	r2, #0
 8007218:	711a      	strb	r2, [r3, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f042 0202 	orr.w	r2, r2, #2
 8007220:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d006      	beq.n	8007236 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	711a      	strb	r2, [r3, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f042 0202 	orr.w	r2, r2, #2
 8007234:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2243      	movs	r2, #67	@ 0x43
 800723a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800723c:	4b02      	ldr	r3, [pc, #8]	@ (8007248 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800723e:	4618      	mov	r0, r3
 8007240:	3718      	adds	r7, #24
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	20000050 	.word	0x20000050

0800724c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b086      	sub	sp, #24
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007254:	2182      	movs	r1, #130	@ 0x82
 8007256:	4818      	ldr	r0, [pc, #96]	@ (80072b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007258:	f000 fcf2 	bl	8007c40 <USBD_GetEpDesc>
 800725c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800725e:	2101      	movs	r1, #1
 8007260:	4815      	ldr	r0, [pc, #84]	@ (80072b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007262:	f000 fced 	bl	8007c40 <USBD_GetEpDesc>
 8007266:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007268:	2181      	movs	r1, #129	@ 0x81
 800726a:	4813      	ldr	r0, [pc, #76]	@ (80072b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800726c:	f000 fce8 	bl	8007c40 <USBD_GetEpDesc>
 8007270:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	2210      	movs	r2, #16
 800727c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d006      	beq.n	8007292 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	2200      	movs	r2, #0
 8007288:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800728c:	711a      	strb	r2, [r3, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d006      	beq.n	80072a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072a0:	711a      	strb	r2, [r3, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2243      	movs	r2, #67	@ 0x43
 80072aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80072ac:	4b02      	ldr	r3, [pc, #8]	@ (80072b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	20000050 	.word	0x20000050

080072bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	220a      	movs	r2, #10
 80072c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80072ca:	4b03      	ldr	r3, [pc, #12]	@ (80072d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	2000000c 	.word	0x2000000c

080072dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d101      	bne.n	80072f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e009      	b.n	8007304 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	33b0      	adds	r3, #176	@ 0xb0
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4413      	add	r3, r2
 80072fe:	683a      	ldr	r2, [r7, #0]
 8007300:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007310:	b480      	push	{r7}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	32b0      	adds	r2, #176	@ 0xb0
 8007326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800732a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007332:	2303      	movs	r3, #3
 8007334:	e008      	b.n	8007348 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	371c      	adds	r7, #28
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	32b0      	adds	r2, #176	@ 0xb0
 8007368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800736c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007374:	2303      	movs	r3, #3
 8007376:	e004      	b.n	8007382 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	683a      	ldr	r2, [r7, #0]
 800737c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
	...

08007390 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	32b0      	adds	r2, #176	@ 0xb0
 80073a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80073a8:	2301      	movs	r3, #1
 80073aa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d101      	bne.n	80073b6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e025      	b.n	8007402 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d11f      	bne.n	8007400 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80073c8:	4b10      	ldr	r3, [pc, #64]	@ (800740c <USBD_CDC_TransmitPacket+0x7c>)
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	f003 020f 	and.w	r2, r3, #15
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	4613      	mov	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4403      	add	r3, r0
 80073e2:	3314      	adds	r3, #20
 80073e4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80073e6:	4b09      	ldr	r3, [pc, #36]	@ (800740c <USBD_CDC_TransmitPacket+0x7c>)
 80073e8:	7819      	ldrb	r1, [r3, #0]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f002 f827 	bl	800944a <USBD_LL_Transmit>

    ret = USBD_OK;
 80073fc:	2300      	movs	r3, #0
 80073fe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007400:	7bfb      	ldrb	r3, [r7, #15]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	20000093 	.word	0x20000093

08007410 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	32b0      	adds	r2, #176	@ 0xb0
 8007422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007426:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	32b0      	adds	r2, #176	@ 0xb0
 8007432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800743a:	2303      	movs	r3, #3
 800743c:	e018      	b.n	8007470 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	7c1b      	ldrb	r3, [r3, #16]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10a      	bne.n	800745c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007446:	4b0c      	ldr	r3, [pc, #48]	@ (8007478 <USBD_CDC_ReceivePacket+0x68>)
 8007448:	7819      	ldrb	r1, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007450:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f002 f819 	bl	800948c <USBD_LL_PrepareReceive>
 800745a:	e008      	b.n	800746e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800745c:	4b06      	ldr	r3, [pc, #24]	@ (8007478 <USBD_CDC_ReceivePacket+0x68>)
 800745e:	7819      	ldrb	r1, [r3, #0]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007466:	2340      	movs	r3, #64	@ 0x40
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f002 f80f 	bl	800948c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	20000094 	.word	0x20000094

0800747c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	4613      	mov	r3, r2
 8007488:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d101      	bne.n	8007494 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007490:	2303      	movs	r3, #3
 8007492:	e01f      	b.n	80074d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2200      	movs	r2, #0
 80074a0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	79fa      	ldrb	r2, [r7, #7]
 80074c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f001 fe89 	bl	80091e0 <USBD_LL_Init>
 80074ce:	4603      	mov	r3, r0
 80074d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80074d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3718      	adds	r7, #24
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074e6:	2300      	movs	r3, #0
 80074e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e025      	b.n	8007540 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	32ae      	adds	r2, #174	@ 0xae
 8007506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800750a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00f      	beq.n	8007530 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	32ae      	adds	r2, #174	@ 0xae
 800751a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800751e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007520:	f107 020e 	add.w	r2, r7, #14
 8007524:	4610      	mov	r0, r2
 8007526:	4798      	blx	r3
 8007528:	4602      	mov	r2, r0
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007536:	1c5a      	adds	r2, r3, #1
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f001 fe91 	bl	8009278 <USBD_LL_Start>
 8007556:	4603      	mov	r3, r0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007568:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800756a:	4618      	mov	r0, r3
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b084      	sub	sp, #16
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
 800757e:	460b      	mov	r3, r1
 8007580:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800758c:	2b00      	cmp	r3, #0
 800758e:	d009      	beq.n	80075a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	78fa      	ldrb	r2, [r7, #3]
 800759a:	4611      	mov	r1, r2
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	4798      	blx	r3
 80075a0:	4603      	mov	r3, r0
 80075a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b084      	sub	sp, #16
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
 80075b6:	460b      	mov	r3, r1
 80075b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80075ba:	2300      	movs	r3, #0
 80075bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	78fa      	ldrb	r2, [r7, #3]
 80075c8:	4611      	mov	r1, r2
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	4798      	blx	r3
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d001      	beq.n	80075d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80075d4:	2303      	movs	r3, #3
 80075d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b084      	sub	sp, #16
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80075f2:	6839      	ldr	r1, [r7, #0]
 80075f4:	4618      	mov	r0, r3
 80075f6:	f001 f922 	bl	800883e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007608:	461a      	mov	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007616:	f003 031f 	and.w	r3, r3, #31
 800761a:	2b02      	cmp	r3, #2
 800761c:	d01a      	beq.n	8007654 <USBD_LL_SetupStage+0x72>
 800761e:	2b02      	cmp	r3, #2
 8007620:	d822      	bhi.n	8007668 <USBD_LL_SetupStage+0x86>
 8007622:	2b00      	cmp	r3, #0
 8007624:	d002      	beq.n	800762c <USBD_LL_SetupStage+0x4a>
 8007626:	2b01      	cmp	r3, #1
 8007628:	d00a      	beq.n	8007640 <USBD_LL_SetupStage+0x5e>
 800762a:	e01d      	b.n	8007668 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fb77 	bl	8007d28 <USBD_StdDevReq>
 800763a:	4603      	mov	r3, r0
 800763c:	73fb      	strb	r3, [r7, #15]
      break;
 800763e:	e020      	b.n	8007682 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007646:	4619      	mov	r1, r3
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fbdf 	bl	8007e0c <USBD_StdItfReq>
 800764e:	4603      	mov	r3, r0
 8007650:	73fb      	strb	r3, [r7, #15]
      break;
 8007652:	e016      	b.n	8007682 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800765a:	4619      	mov	r1, r3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fc41 	bl	8007ee4 <USBD_StdEPReq>
 8007662:	4603      	mov	r3, r0
 8007664:	73fb      	strb	r3, [r7, #15]
      break;
 8007666:	e00c      	b.n	8007682 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800766e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007672:	b2db      	uxtb	r3, r3
 8007674:	4619      	mov	r1, r3
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f001 fe5e 	bl	8009338 <USBD_LL_StallEP>
 800767c:	4603      	mov	r3, r0
 800767e:	73fb      	strb	r3, [r7, #15]
      break;
 8007680:	bf00      	nop
  }

  return ret;
 8007682:	7bfb      	ldrb	r3, [r7, #15]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b086      	sub	sp, #24
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	460b      	mov	r3, r1
 8007696:	607a      	str	r2, [r7, #4]
 8007698:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800769a:	2300      	movs	r3, #0
 800769c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800769e:	7afb      	ldrb	r3, [r7, #11]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d177      	bne.n	8007794 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80076aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	f040 80a1 	bne.w	80077fa <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	8992      	ldrh	r2, [r2, #12]
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d91c      	bls.n	80076fe <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	8992      	ldrh	r2, [r2, #12]
 80076cc:	1a9a      	subs	r2, r3, r2
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	8992      	ldrh	r2, [r2, #12]
 80076da:	441a      	add	r2, r3
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	6919      	ldr	r1, [r3, #16]
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	899b      	ldrh	r3, [r3, #12]
 80076e8:	461a      	mov	r2, r3
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	4293      	cmp	r3, r2
 80076f0:	bf38      	it	cc
 80076f2:	4613      	movcc	r3, r2
 80076f4:	461a      	mov	r2, r3
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f001 f9a8 	bl	8008a4c <USBD_CtlContinueRx>
 80076fc:	e07d      	b.n	80077fa <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007704:	f003 031f 	and.w	r3, r3, #31
 8007708:	2b02      	cmp	r3, #2
 800770a:	d014      	beq.n	8007736 <USBD_LL_DataOutStage+0xaa>
 800770c:	2b02      	cmp	r3, #2
 800770e:	d81d      	bhi.n	800774c <USBD_LL_DataOutStage+0xc0>
 8007710:	2b00      	cmp	r3, #0
 8007712:	d002      	beq.n	800771a <USBD_LL_DataOutStage+0x8e>
 8007714:	2b01      	cmp	r3, #1
 8007716:	d003      	beq.n	8007720 <USBD_LL_DataOutStage+0x94>
 8007718:	e018      	b.n	800774c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800771a:	2300      	movs	r3, #0
 800771c:	75bb      	strb	r3, [r7, #22]
            break;
 800771e:	e018      	b.n	8007752 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007726:	b2db      	uxtb	r3, r3
 8007728:	4619      	mov	r1, r3
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f000 fa6e 	bl	8007c0c <USBD_CoreFindIF>
 8007730:	4603      	mov	r3, r0
 8007732:	75bb      	strb	r3, [r7, #22]
            break;
 8007734:	e00d      	b.n	8007752 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800773c:	b2db      	uxtb	r3, r3
 800773e:	4619      	mov	r1, r3
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 fa70 	bl	8007c26 <USBD_CoreFindEP>
 8007746:	4603      	mov	r3, r0
 8007748:	75bb      	strb	r3, [r7, #22]
            break;
 800774a:	e002      	b.n	8007752 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800774c:	2300      	movs	r3, #0
 800774e:	75bb      	strb	r3, [r7, #22]
            break;
 8007750:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007752:	7dbb      	ldrb	r3, [r7, #22]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d119      	bne.n	800778c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2b03      	cmp	r3, #3
 8007762:	d113      	bne.n	800778c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007764:	7dba      	ldrb	r2, [r7, #22]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	32ae      	adds	r2, #174	@ 0xae
 800776a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00b      	beq.n	800778c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8007774:	7dba      	ldrb	r2, [r7, #22]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800777c:	7dba      	ldrb	r2, [r7, #22]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	32ae      	adds	r2, #174	@ 0xae
 8007782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f001 f96e 	bl	8008a6e <USBD_CtlSendStatus>
 8007792:	e032      	b.n	80077fa <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007794:	7afb      	ldrb	r3, [r7, #11]
 8007796:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800779a:	b2db      	uxtb	r3, r3
 800779c:	4619      	mov	r1, r3
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f000 fa41 	bl	8007c26 <USBD_CoreFindEP>
 80077a4:	4603      	mov	r3, r0
 80077a6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077a8:	7dbb      	ldrb	r3, [r7, #22]
 80077aa:	2bff      	cmp	r3, #255	@ 0xff
 80077ac:	d025      	beq.n	80077fa <USBD_LL_DataOutStage+0x16e>
 80077ae:	7dbb      	ldrb	r3, [r7, #22]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d122      	bne.n	80077fa <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	2b03      	cmp	r3, #3
 80077be:	d117      	bne.n	80077f0 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80077c0:	7dba      	ldrb	r2, [r7, #22]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	32ae      	adds	r2, #174	@ 0xae
 80077c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00f      	beq.n	80077f0 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80077d0:	7dba      	ldrb	r2, [r7, #22]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80077d8:	7dba      	ldrb	r2, [r7, #22]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	32ae      	adds	r2, #174	@ 0xae
 80077de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	7afa      	ldrb	r2, [r7, #11]
 80077e6:	4611      	mov	r1, r2
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	4798      	blx	r3
 80077ec:	4603      	mov	r3, r0
 80077ee:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80077f0:	7dfb      	ldrb	r3, [r7, #23]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d001      	beq.n	80077fa <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80077f6:	7dfb      	ldrb	r3, [r7, #23]
 80077f8:	e000      	b.n	80077fc <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3718      	adds	r7, #24
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	460b      	mov	r3, r1
 800780e:	607a      	str	r2, [r7, #4]
 8007810:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007812:	7afb      	ldrb	r3, [r7, #11]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d178      	bne.n	800790a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	3314      	adds	r3, #20
 800781c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007824:	2b02      	cmp	r3, #2
 8007826:	d163      	bne.n	80078f0 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	693a      	ldr	r2, [r7, #16]
 800782e:	8992      	ldrh	r2, [r2, #12]
 8007830:	4293      	cmp	r3, r2
 8007832:	d91c      	bls.n	800786e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	8992      	ldrh	r2, [r2, #12]
 800783c:	1a9a      	subs	r2, r3, r2
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	8992      	ldrh	r2, [r2, #12]
 800784a:	441a      	add	r2, r3
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	6919      	ldr	r1, [r3, #16]
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	461a      	mov	r2, r3
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f001 f8c4 	bl	80089e8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007860:	2300      	movs	r3, #0
 8007862:	2200      	movs	r2, #0
 8007864:	2100      	movs	r1, #0
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f001 fe10 	bl	800948c <USBD_LL_PrepareReceive>
 800786c:	e040      	b.n	80078f0 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	899b      	ldrh	r3, [r3, #12]
 8007872:	461a      	mov	r2, r3
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	429a      	cmp	r2, r3
 800787a:	d11c      	bne.n	80078b6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007884:	4293      	cmp	r3, r2
 8007886:	d316      	bcc.n	80078b6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007892:	429a      	cmp	r2, r3
 8007894:	d20f      	bcs.n	80078b6 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007896:	2200      	movs	r2, #0
 8007898:	2100      	movs	r1, #0
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f001 f8a4 	bl	80089e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078a8:	2300      	movs	r3, #0
 80078aa:	2200      	movs	r2, #0
 80078ac:	2100      	movs	r1, #0
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f001 fdec 	bl	800948c <USBD_LL_PrepareReceive>
 80078b4:	e01c      	b.n	80078f0 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b03      	cmp	r3, #3
 80078c0:	d10f      	bne.n	80078e2 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d009      	beq.n	80078e2 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80078e2:	2180      	movs	r1, #128	@ 0x80
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f001 fd27 	bl	8009338 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f001 f8d2 	bl	8008a94 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d03a      	beq.n	8007970 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f7ff fe30 	bl	8007560 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007908:	e032      	b.n	8007970 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800790a:	7afb      	ldrb	r3, [r7, #11]
 800790c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007910:	b2db      	uxtb	r3, r3
 8007912:	4619      	mov	r1, r3
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f000 f986 	bl	8007c26 <USBD_CoreFindEP>
 800791a:	4603      	mov	r3, r0
 800791c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800791e:	7dfb      	ldrb	r3, [r7, #23]
 8007920:	2bff      	cmp	r3, #255	@ 0xff
 8007922:	d025      	beq.n	8007970 <USBD_LL_DataInStage+0x16c>
 8007924:	7dfb      	ldrb	r3, [r7, #23]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d122      	bne.n	8007970 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b03      	cmp	r3, #3
 8007934:	d11c      	bne.n	8007970 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007936:	7dfa      	ldrb	r2, [r7, #23]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	32ae      	adds	r2, #174	@ 0xae
 800793c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007940:	695b      	ldr	r3, [r3, #20]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d014      	beq.n	8007970 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8007946:	7dfa      	ldrb	r2, [r7, #23]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800794e:	7dfa      	ldrb	r2, [r7, #23]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	32ae      	adds	r2, #174	@ 0xae
 8007954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	7afa      	ldrb	r2, [r7, #11]
 800795c:	4611      	mov	r1, r2
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	4798      	blx	r3
 8007962:	4603      	mov	r3, r0
 8007964:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007966:	7dbb      	ldrb	r3, [r7, #22]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d001      	beq.n	8007970 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800796c:	7dbb      	ldrb	r3, [r7, #22]
 800796e:	e000      	b.n	8007972 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3718      	adds	r7, #24
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b084      	sub	sp, #16
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007982:	2300      	movs	r3, #0
 8007984:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d014      	beq.n	80079e0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00e      	beq.n	80079e0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	6852      	ldr	r2, [r2, #4]
 80079ce:	b2d2      	uxtb	r2, r2
 80079d0:	4611      	mov	r1, r2
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	4798      	blx	r3
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d001      	beq.n	80079e0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80079dc:	2303      	movs	r3, #3
 80079de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079e0:	2340      	movs	r3, #64	@ 0x40
 80079e2:	2200      	movs	r2, #0
 80079e4:	2100      	movs	r1, #0
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f001 fc61 	bl	80092ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2240      	movs	r2, #64	@ 0x40
 80079f8:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079fc:	2340      	movs	r3, #64	@ 0x40
 80079fe:	2200      	movs	r2, #0
 8007a00:	2180      	movs	r1, #128	@ 0x80
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f001 fc53 	bl	80092ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2240      	movs	r2, #64	@ 0x40
 8007a14:	841a      	strh	r2, [r3, #32]

  return ret;
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	460b      	mov	r3, r1
 8007a2a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	78fa      	ldrb	r2, [r7, #3]
 8007a30:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b04      	cmp	r3, #4
 8007a52:	d006      	beq.n	8007a62 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a5a:	b2da      	uxtb	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2204      	movs	r2, #4
 8007a66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	2b04      	cmp	r3, #4
 8007a8a:	d106      	bne.n	8007a9a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007a92:	b2da      	uxtb	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	d110      	bne.n	8007ade <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00b      	beq.n	8007ade <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007acc:	69db      	ldr	r3, [r3, #28]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d005      	beq.n	8007ade <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ad8:	69db      	ldr	r3, [r3, #28]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	460b      	mov	r3, r1
 8007af2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	32ae      	adds	r2, #174	@ 0xae
 8007afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b06:	2303      	movs	r3, #3
 8007b08:	e01c      	b.n	8007b44 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d115      	bne.n	8007b42 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	32ae      	adds	r2, #174	@ 0xae
 8007b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b24:	6a1b      	ldr	r3, [r3, #32]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00b      	beq.n	8007b42 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	32ae      	adds	r2, #174	@ 0xae
 8007b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	78fa      	ldrb	r2, [r7, #3]
 8007b3c:	4611      	mov	r1, r2
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	460b      	mov	r3, r1
 8007b56:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	32ae      	adds	r2, #174	@ 0xae
 8007b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d101      	bne.n	8007b6e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e01c      	b.n	8007ba8 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d115      	bne.n	8007ba6 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	32ae      	adds	r2, #174	@ 0xae
 8007b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00b      	beq.n	8007ba6 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	32ae      	adds	r2, #174	@ 0xae
 8007b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b9e:	78fa      	ldrb	r2, [r7, #3]
 8007ba0:	4611      	mov	r1, r2
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3708      	adds	r7, #8
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr

08007bc6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b084      	sub	sp, #16
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00e      	beq.n	8007c02 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	6852      	ldr	r2, [r2, #4]
 8007bf0:	b2d2      	uxtb	r2, r2
 8007bf2:	4611      	mov	r1, r2
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	4798      	blx	r3
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	460b      	mov	r3, r1
 8007c16:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c18:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
 8007c2e:	460b      	mov	r3, r1
 8007c30:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c32:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b086      	sub	sp, #24
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	460b      	mov	r3, r1
 8007c4a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007c54:	2300      	movs	r3, #0
 8007c56:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	885b      	ldrh	r3, [r3, #2]
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	7812      	ldrb	r2, [r2, #0]
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d91f      	bls.n	8007ca6 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007c6c:	e013      	b.n	8007c96 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007c6e:	f107 030a 	add.w	r3, r7, #10
 8007c72:	4619      	mov	r1, r3
 8007c74:	6978      	ldr	r0, [r7, #20]
 8007c76:	f000 f81b 	bl	8007cb0 <USBD_GetNextDesc>
 8007c7a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	785b      	ldrb	r3, [r3, #1]
 8007c80:	2b05      	cmp	r3, #5
 8007c82:	d108      	bne.n	8007c96 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	789b      	ldrb	r3, [r3, #2]
 8007c8c:	78fa      	ldrb	r2, [r7, #3]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d008      	beq.n	8007ca4 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007c92:	2300      	movs	r3, #0
 8007c94:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	885b      	ldrh	r3, [r3, #2]
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	897b      	ldrh	r3, [r7, #10]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d8e5      	bhi.n	8007c6e <USBD_GetEpDesc+0x2e>
 8007ca2:	e000      	b.n	8007ca6 <USBD_GetEpDesc+0x66>
          break;
 8007ca4:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007ca6:	693b      	ldr	r3, [r7, #16]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3718      	adds	r7, #24
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	881b      	ldrh	r3, [r3, #0]
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	7812      	ldrb	r2, [r2, #0]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007cda:	68fb      	ldr	r3, [r7, #12]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3714      	adds	r7, #20
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b087      	sub	sp, #28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d06:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007d0a:	021b      	lsls	r3, r3, #8
 8007d0c:	b21a      	sxth	r2, r3
 8007d0e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	b21b      	sxth	r3, r3
 8007d16:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007d18:	89fb      	ldrh	r3, [r7, #14]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	371c      	adds	r7, #28
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
	...

08007d28 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d32:	2300      	movs	r3, #0
 8007d34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d3e:	2b40      	cmp	r3, #64	@ 0x40
 8007d40:	d005      	beq.n	8007d4e <USBD_StdDevReq+0x26>
 8007d42:	2b40      	cmp	r3, #64	@ 0x40
 8007d44:	d857      	bhi.n	8007df6 <USBD_StdDevReq+0xce>
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00f      	beq.n	8007d6a <USBD_StdDevReq+0x42>
 8007d4a:	2b20      	cmp	r3, #32
 8007d4c:	d153      	bne.n	8007df6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	32ae      	adds	r2, #174	@ 0xae
 8007d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	4798      	blx	r3
 8007d64:	4603      	mov	r3, r0
 8007d66:	73fb      	strb	r3, [r7, #15]
      break;
 8007d68:	e04a      	b.n	8007e00 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	785b      	ldrb	r3, [r3, #1]
 8007d6e:	2b09      	cmp	r3, #9
 8007d70:	d83b      	bhi.n	8007dea <USBD_StdDevReq+0xc2>
 8007d72:	a201      	add	r2, pc, #4	@ (adr r2, 8007d78 <USBD_StdDevReq+0x50>)
 8007d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d78:	08007dcd 	.word	0x08007dcd
 8007d7c:	08007de1 	.word	0x08007de1
 8007d80:	08007deb 	.word	0x08007deb
 8007d84:	08007dd7 	.word	0x08007dd7
 8007d88:	08007deb 	.word	0x08007deb
 8007d8c:	08007dab 	.word	0x08007dab
 8007d90:	08007da1 	.word	0x08007da1
 8007d94:	08007deb 	.word	0x08007deb
 8007d98:	08007dc3 	.word	0x08007dc3
 8007d9c:	08007db5 	.word	0x08007db5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fa3e 	bl	8008224 <USBD_GetDescriptor>
          break;
 8007da8:	e024      	b.n	8007df4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007daa:	6839      	ldr	r1, [r7, #0]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fba3 	bl	80084f8 <USBD_SetAddress>
          break;
 8007db2:	e01f      	b.n	8007df4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007db4:	6839      	ldr	r1, [r7, #0]
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fbe2 	bl	8008580 <USBD_SetConfig>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	73fb      	strb	r3, [r7, #15]
          break;
 8007dc0:	e018      	b.n	8007df4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007dc2:	6839      	ldr	r1, [r7, #0]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fc85 	bl	80086d4 <USBD_GetConfig>
          break;
 8007dca:	e013      	b.n	8007df4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fcb6 	bl	8008740 <USBD_GetStatus>
          break;
 8007dd4:	e00e      	b.n	8007df4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007dd6:	6839      	ldr	r1, [r7, #0]
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 fce5 	bl	80087a8 <USBD_SetFeature>
          break;
 8007dde:	e009      	b.n	8007df4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fd09 	bl	80087fa <USBD_ClrFeature>
          break;
 8007de8:	e004      	b.n	8007df4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007dea:	6839      	ldr	r1, [r7, #0]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fd60 	bl	80088b2 <USBD_CtlError>
          break;
 8007df2:	bf00      	nop
      }
      break;
 8007df4:	e004      	b.n	8007e00 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007df6:	6839      	ldr	r1, [r7, #0]
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fd5a 	bl	80088b2 <USBD_CtlError>
      break;
 8007dfe:	bf00      	nop
  }

  return ret;
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop

08007e0c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e22:	2b40      	cmp	r3, #64	@ 0x40
 8007e24:	d005      	beq.n	8007e32 <USBD_StdItfReq+0x26>
 8007e26:	2b40      	cmp	r3, #64	@ 0x40
 8007e28:	d852      	bhi.n	8007ed0 <USBD_StdItfReq+0xc4>
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d001      	beq.n	8007e32 <USBD_StdItfReq+0x26>
 8007e2e:	2b20      	cmp	r3, #32
 8007e30:	d14e      	bne.n	8007ed0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d840      	bhi.n	8007ec2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	889b      	ldrh	r3, [r3, #4]
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d836      	bhi.n	8007eb8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	889b      	ldrh	r3, [r3, #4]
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	4619      	mov	r1, r3
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f7ff feda 	bl	8007c0c <USBD_CoreFindIF>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e5c:	7bbb      	ldrb	r3, [r7, #14]
 8007e5e:	2bff      	cmp	r3, #255	@ 0xff
 8007e60:	d01d      	beq.n	8007e9e <USBD_StdItfReq+0x92>
 8007e62:	7bbb      	ldrb	r3, [r7, #14]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d11a      	bne.n	8007e9e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007e68:	7bba      	ldrb	r2, [r7, #14]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	32ae      	adds	r2, #174	@ 0xae
 8007e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00f      	beq.n	8007e98 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007e78:	7bba      	ldrb	r2, [r7, #14]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e80:	7bba      	ldrb	r2, [r7, #14]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	32ae      	adds	r2, #174	@ 0xae
 8007e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	4798      	blx	r3
 8007e92:	4603      	mov	r3, r0
 8007e94:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e96:	e004      	b.n	8007ea2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e9c:	e001      	b.n	8007ea2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	88db      	ldrh	r3, [r3, #6]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d110      	bne.n	8007ecc <USBD_StdItfReq+0xc0>
 8007eaa:	7bfb      	ldrb	r3, [r7, #15]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10d      	bne.n	8007ecc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fddc 	bl	8008a6e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007eb6:	e009      	b.n	8007ecc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fcf9 	bl	80088b2 <USBD_CtlError>
          break;
 8007ec0:	e004      	b.n	8007ecc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007ec2:	6839      	ldr	r1, [r7, #0]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fcf4 	bl	80088b2 <USBD_CtlError>
          break;
 8007eca:	e000      	b.n	8007ece <USBD_StdItfReq+0xc2>
          break;
 8007ecc:	bf00      	nop
      }
      break;
 8007ece:	e004      	b.n	8007eda <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007ed0:	6839      	ldr	r1, [r7, #0]
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fced 	bl	80088b2 <USBD_CtlError>
      break;
 8007ed8:	bf00      	nop
  }

  return ret;
 8007eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	889b      	ldrh	r3, [r3, #4]
 8007ef6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f00:	2b40      	cmp	r3, #64	@ 0x40
 8007f02:	d007      	beq.n	8007f14 <USBD_StdEPReq+0x30>
 8007f04:	2b40      	cmp	r3, #64	@ 0x40
 8007f06:	f200 8181 	bhi.w	800820c <USBD_StdEPReq+0x328>
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d02a      	beq.n	8007f64 <USBD_StdEPReq+0x80>
 8007f0e:	2b20      	cmp	r3, #32
 8007f10:	f040 817c 	bne.w	800820c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f14:	7bbb      	ldrb	r3, [r7, #14]
 8007f16:	4619      	mov	r1, r3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7ff fe84 	bl	8007c26 <USBD_CoreFindEP>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f22:	7b7b      	ldrb	r3, [r7, #13]
 8007f24:	2bff      	cmp	r3, #255	@ 0xff
 8007f26:	f000 8176 	beq.w	8008216 <USBD_StdEPReq+0x332>
 8007f2a:	7b7b      	ldrb	r3, [r7, #13]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f040 8172 	bne.w	8008216 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8007f32:	7b7a      	ldrb	r2, [r7, #13]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007f3a:	7b7a      	ldrb	r2, [r7, #13]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	32ae      	adds	r2, #174	@ 0xae
 8007f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f000 8165 	beq.w	8008216 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007f4c:	7b7a      	ldrb	r2, [r7, #13]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	32ae      	adds	r2, #174	@ 0xae
 8007f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	6839      	ldr	r1, [r7, #0]
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	4798      	blx	r3
 8007f5e:	4603      	mov	r3, r0
 8007f60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f62:	e158      	b.n	8008216 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	785b      	ldrb	r3, [r3, #1]
 8007f68:	2b03      	cmp	r3, #3
 8007f6a:	d008      	beq.n	8007f7e <USBD_StdEPReq+0x9a>
 8007f6c:	2b03      	cmp	r3, #3
 8007f6e:	f300 8147 	bgt.w	8008200 <USBD_StdEPReq+0x31c>
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f000 809b 	beq.w	80080ae <USBD_StdEPReq+0x1ca>
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d03c      	beq.n	8007ff6 <USBD_StdEPReq+0x112>
 8007f7c:	e140      	b.n	8008200 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d002      	beq.n	8007f90 <USBD_StdEPReq+0xac>
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	d016      	beq.n	8007fbc <USBD_StdEPReq+0xd8>
 8007f8e:	e02c      	b.n	8007fea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f90:	7bbb      	ldrb	r3, [r7, #14]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00d      	beq.n	8007fb2 <USBD_StdEPReq+0xce>
 8007f96:	7bbb      	ldrb	r3, [r7, #14]
 8007f98:	2b80      	cmp	r3, #128	@ 0x80
 8007f9a:	d00a      	beq.n	8007fb2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f9c:	7bbb      	ldrb	r3, [r7, #14]
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f001 f9c9 	bl	8009338 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fa6:	2180      	movs	r1, #128	@ 0x80
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f001 f9c5 	bl	8009338 <USBD_LL_StallEP>
 8007fae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fb0:	e020      	b.n	8007ff4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fc7c 	bl	80088b2 <USBD_CtlError>
              break;
 8007fba:	e01b      	b.n	8007ff4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	885b      	ldrh	r3, [r3, #2]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10e      	bne.n	8007fe2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007fc4:	7bbb      	ldrb	r3, [r7, #14]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00b      	beq.n	8007fe2 <USBD_StdEPReq+0xfe>
 8007fca:	7bbb      	ldrb	r3, [r7, #14]
 8007fcc:	2b80      	cmp	r3, #128	@ 0x80
 8007fce:	d008      	beq.n	8007fe2 <USBD_StdEPReq+0xfe>
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	88db      	ldrh	r3, [r3, #6]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d104      	bne.n	8007fe2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fd8:	7bbb      	ldrb	r3, [r7, #14]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f001 f9ab 	bl	8009338 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fd43 	bl	8008a6e <USBD_CtlSendStatus>

              break;
 8007fe8:	e004      	b.n	8007ff4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fc60 	bl	80088b2 <USBD_CtlError>
              break;
 8007ff2:	bf00      	nop
          }
          break;
 8007ff4:	e109      	b.n	800820a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d002      	beq.n	8008008 <USBD_StdEPReq+0x124>
 8008002:	2b03      	cmp	r3, #3
 8008004:	d016      	beq.n	8008034 <USBD_StdEPReq+0x150>
 8008006:	e04b      	b.n	80080a0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008008:	7bbb      	ldrb	r3, [r7, #14]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00d      	beq.n	800802a <USBD_StdEPReq+0x146>
 800800e:	7bbb      	ldrb	r3, [r7, #14]
 8008010:	2b80      	cmp	r3, #128	@ 0x80
 8008012:	d00a      	beq.n	800802a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008014:	7bbb      	ldrb	r3, [r7, #14]
 8008016:	4619      	mov	r1, r3
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f001 f98d 	bl	8009338 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800801e:	2180      	movs	r1, #128	@ 0x80
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f001 f989 	bl	8009338 <USBD_LL_StallEP>
 8008026:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008028:	e040      	b.n	80080ac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800802a:	6839      	ldr	r1, [r7, #0]
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 fc40 	bl	80088b2 <USBD_CtlError>
              break;
 8008032:	e03b      	b.n	80080ac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	885b      	ldrh	r3, [r3, #2]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d136      	bne.n	80080aa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800803c:	7bbb      	ldrb	r3, [r7, #14]
 800803e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008042:	2b00      	cmp	r3, #0
 8008044:	d004      	beq.n	8008050 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008046:	7bbb      	ldrb	r3, [r7, #14]
 8008048:	4619      	mov	r1, r3
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f001 f993 	bl	8009376 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fd0c 	bl	8008a6e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008056:	7bbb      	ldrb	r3, [r7, #14]
 8008058:	4619      	mov	r1, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7ff fde3 	bl	8007c26 <USBD_CoreFindEP>
 8008060:	4603      	mov	r3, r0
 8008062:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008064:	7b7b      	ldrb	r3, [r7, #13]
 8008066:	2bff      	cmp	r3, #255	@ 0xff
 8008068:	d01f      	beq.n	80080aa <USBD_StdEPReq+0x1c6>
 800806a:	7b7b      	ldrb	r3, [r7, #13]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d11c      	bne.n	80080aa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008070:	7b7a      	ldrb	r2, [r7, #13]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008078:	7b7a      	ldrb	r2, [r7, #13]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	32ae      	adds	r2, #174	@ 0xae
 800807e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d010      	beq.n	80080aa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008088:	7b7a      	ldrb	r2, [r7, #13]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	32ae      	adds	r2, #174	@ 0xae
 800808e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	6839      	ldr	r1, [r7, #0]
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	4798      	blx	r3
 800809a:	4603      	mov	r3, r0
 800809c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800809e:	e004      	b.n	80080aa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80080a0:	6839      	ldr	r1, [r7, #0]
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fc05 	bl	80088b2 <USBD_CtlError>
              break;
 80080a8:	e000      	b.n	80080ac <USBD_StdEPReq+0x1c8>
              break;
 80080aa:	bf00      	nop
          }
          break;
 80080ac:	e0ad      	b.n	800820a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d002      	beq.n	80080c0 <USBD_StdEPReq+0x1dc>
 80080ba:	2b03      	cmp	r3, #3
 80080bc:	d033      	beq.n	8008126 <USBD_StdEPReq+0x242>
 80080be:	e099      	b.n	80081f4 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080c0:	7bbb      	ldrb	r3, [r7, #14]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d007      	beq.n	80080d6 <USBD_StdEPReq+0x1f2>
 80080c6:	7bbb      	ldrb	r3, [r7, #14]
 80080c8:	2b80      	cmp	r3, #128	@ 0x80
 80080ca:	d004      	beq.n	80080d6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80080cc:	6839      	ldr	r1, [r7, #0]
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fbef 	bl	80088b2 <USBD_CtlError>
                break;
 80080d4:	e093      	b.n	80081fe <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	da0b      	bge.n	80080f6 <USBD_StdEPReq+0x212>
 80080de:	7bbb      	ldrb	r3, [r7, #14]
 80080e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80080e4:	4613      	mov	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	3310      	adds	r3, #16
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	4413      	add	r3, r2
 80080f2:	3304      	adds	r3, #4
 80080f4:	e00b      	b.n	800810e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080f6:	7bbb      	ldrb	r3, [r7, #14]
 80080f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080fc:	4613      	mov	r3, r2
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	4413      	add	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	4413      	add	r3, r2
 800810c:	3304      	adds	r3, #4
 800810e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	2200      	movs	r2, #0
 8008114:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	330e      	adds	r3, #14
 800811a:	2202      	movs	r2, #2
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fc44 	bl	80089ac <USBD_CtlSendData>
              break;
 8008124:	e06b      	b.n	80081fe <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008126:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800812a:	2b00      	cmp	r3, #0
 800812c:	da11      	bge.n	8008152 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800812e:	7bbb      	ldrb	r3, [r7, #14]
 8008130:	f003 020f 	and.w	r2, r3, #15
 8008134:	6879      	ldr	r1, [r7, #4]
 8008136:	4613      	mov	r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	4413      	add	r3, r2
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	440b      	add	r3, r1
 8008140:	3323      	adds	r3, #35	@ 0x23
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d117      	bne.n	8008178 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008148:	6839      	ldr	r1, [r7, #0]
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fbb1 	bl	80088b2 <USBD_CtlError>
                  break;
 8008150:	e055      	b.n	80081fe <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008152:	7bbb      	ldrb	r3, [r7, #14]
 8008154:	f003 020f 	and.w	r2, r3, #15
 8008158:	6879      	ldr	r1, [r7, #4]
 800815a:	4613      	mov	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4413      	add	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	440b      	add	r3, r1
 8008164:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d104      	bne.n	8008178 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fb9e 	bl	80088b2 <USBD_CtlError>
                  break;
 8008176:	e042      	b.n	80081fe <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008178:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800817c:	2b00      	cmp	r3, #0
 800817e:	da0b      	bge.n	8008198 <USBD_StdEPReq+0x2b4>
 8008180:	7bbb      	ldrb	r3, [r7, #14]
 8008182:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008186:	4613      	mov	r3, r2
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	4413      	add	r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	3310      	adds	r3, #16
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	4413      	add	r3, r2
 8008194:	3304      	adds	r3, #4
 8008196:	e00b      	b.n	80081b0 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008198:	7bbb      	ldrb	r3, [r7, #14]
 800819a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800819e:	4613      	mov	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	4413      	add	r3, r2
 80081ae:	3304      	adds	r3, #4
 80081b0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80081b2:	7bbb      	ldrb	r3, [r7, #14]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d002      	beq.n	80081be <USBD_StdEPReq+0x2da>
 80081b8:	7bbb      	ldrb	r3, [r7, #14]
 80081ba:	2b80      	cmp	r3, #128	@ 0x80
 80081bc:	d103      	bne.n	80081c6 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	2200      	movs	r2, #0
 80081c2:	739a      	strb	r2, [r3, #14]
 80081c4:	e00e      	b.n	80081e4 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80081c6:	7bbb      	ldrb	r3, [r7, #14]
 80081c8:	4619      	mov	r1, r3
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f001 f8f2 	bl	80093b4 <USBD_LL_IsStallEP>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d003      	beq.n	80081de <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	2201      	movs	r2, #1
 80081da:	739a      	strb	r2, [r3, #14]
 80081dc:	e002      	b.n	80081e4 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	2200      	movs	r2, #0
 80081e2:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	330e      	adds	r3, #14
 80081e8:	2202      	movs	r2, #2
 80081ea:	4619      	mov	r1, r3
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fbdd 	bl	80089ac <USBD_CtlSendData>
              break;
 80081f2:	e004      	b.n	80081fe <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fb5b 	bl	80088b2 <USBD_CtlError>
              break;
 80081fc:	bf00      	nop
          }
          break;
 80081fe:	e004      	b.n	800820a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8008200:	6839      	ldr	r1, [r7, #0]
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 fb55 	bl	80088b2 <USBD_CtlError>
          break;
 8008208:	bf00      	nop
      }
      break;
 800820a:	e005      	b.n	8008218 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800820c:	6839      	ldr	r1, [r7, #0]
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 fb4f 	bl	80088b2 <USBD_CtlError>
      break;
 8008214:	e000      	b.n	8008218 <USBD_StdEPReq+0x334>
      break;
 8008216:	bf00      	nop
  }

  return ret;
 8008218:	7bfb      	ldrb	r3, [r7, #15]
}
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
	...

08008224 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800822e:	2300      	movs	r3, #0
 8008230:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008232:	2300      	movs	r3, #0
 8008234:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008236:	2300      	movs	r3, #0
 8008238:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	885b      	ldrh	r3, [r3, #2]
 800823e:	0a1b      	lsrs	r3, r3, #8
 8008240:	b29b      	uxth	r3, r3
 8008242:	3b01      	subs	r3, #1
 8008244:	2b06      	cmp	r3, #6
 8008246:	f200 8128 	bhi.w	800849a <USBD_GetDescriptor+0x276>
 800824a:	a201      	add	r2, pc, #4	@ (adr r2, 8008250 <USBD_GetDescriptor+0x2c>)
 800824c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008250:	0800826d 	.word	0x0800826d
 8008254:	08008285 	.word	0x08008285
 8008258:	080082c5 	.word	0x080082c5
 800825c:	0800849b 	.word	0x0800849b
 8008260:	0800849b 	.word	0x0800849b
 8008264:	0800843b 	.word	0x0800843b
 8008268:	08008467 	.word	0x08008467
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	7c12      	ldrb	r2, [r2, #16]
 8008278:	f107 0108 	add.w	r1, r7, #8
 800827c:	4610      	mov	r0, r2
 800827e:	4798      	blx	r3
 8008280:	60f8      	str	r0, [r7, #12]
      break;
 8008282:	e112      	b.n	80084aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	7c1b      	ldrb	r3, [r3, #16]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10d      	bne.n	80082a8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008294:	f107 0208 	add.w	r2, r7, #8
 8008298:	4610      	mov	r0, r2
 800829a:	4798      	blx	r3
 800829c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	3301      	adds	r3, #1
 80082a2:	2202      	movs	r2, #2
 80082a4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80082a6:	e100      	b.n	80084aa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b0:	f107 0208 	add.w	r2, r7, #8
 80082b4:	4610      	mov	r0, r2
 80082b6:	4798      	blx	r3
 80082b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	3301      	adds	r3, #1
 80082be:	2202      	movs	r2, #2
 80082c0:	701a      	strb	r2, [r3, #0]
      break;
 80082c2:	e0f2      	b.n	80084aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	885b      	ldrh	r3, [r3, #2]
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	2b05      	cmp	r3, #5
 80082cc:	f200 80ac 	bhi.w	8008428 <USBD_GetDescriptor+0x204>
 80082d0:	a201      	add	r2, pc, #4	@ (adr r2, 80082d8 <USBD_GetDescriptor+0xb4>)
 80082d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d6:	bf00      	nop
 80082d8:	080082f1 	.word	0x080082f1
 80082dc:	08008325 	.word	0x08008325
 80082e0:	08008359 	.word	0x08008359
 80082e4:	0800838d 	.word	0x0800838d
 80082e8:	080083c1 	.word	0x080083c1
 80082ec:	080083f5 	.word	0x080083f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00b      	beq.n	8008314 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	7c12      	ldrb	r2, [r2, #16]
 8008308:	f107 0108 	add.w	r1, r7, #8
 800830c:	4610      	mov	r0, r2
 800830e:	4798      	blx	r3
 8008310:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008312:	e091      	b.n	8008438 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008314:	6839      	ldr	r1, [r7, #0]
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 facb 	bl	80088b2 <USBD_CtlError>
            err++;
 800831c:	7afb      	ldrb	r3, [r7, #11]
 800831e:	3301      	adds	r3, #1
 8008320:	72fb      	strb	r3, [r7, #11]
          break;
 8008322:	e089      	b.n	8008438 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00b      	beq.n	8008348 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	7c12      	ldrb	r2, [r2, #16]
 800833c:	f107 0108 	add.w	r1, r7, #8
 8008340:	4610      	mov	r0, r2
 8008342:	4798      	blx	r3
 8008344:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008346:	e077      	b.n	8008438 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008348:	6839      	ldr	r1, [r7, #0]
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fab1 	bl	80088b2 <USBD_CtlError>
            err++;
 8008350:	7afb      	ldrb	r3, [r7, #11]
 8008352:	3301      	adds	r3, #1
 8008354:	72fb      	strb	r3, [r7, #11]
          break;
 8008356:	e06f      	b.n	8008438 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00b      	beq.n	800837c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	7c12      	ldrb	r2, [r2, #16]
 8008370:	f107 0108 	add.w	r1, r7, #8
 8008374:	4610      	mov	r0, r2
 8008376:	4798      	blx	r3
 8008378:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800837a:	e05d      	b.n	8008438 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800837c:	6839      	ldr	r1, [r7, #0]
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fa97 	bl	80088b2 <USBD_CtlError>
            err++;
 8008384:	7afb      	ldrb	r3, [r7, #11]
 8008386:	3301      	adds	r3, #1
 8008388:	72fb      	strb	r3, [r7, #11]
          break;
 800838a:	e055      	b.n	8008438 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00b      	beq.n	80083b0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	7c12      	ldrb	r2, [r2, #16]
 80083a4:	f107 0108 	add.w	r1, r7, #8
 80083a8:	4610      	mov	r0, r2
 80083aa:	4798      	blx	r3
 80083ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ae:	e043      	b.n	8008438 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083b0:	6839      	ldr	r1, [r7, #0]
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fa7d 	bl	80088b2 <USBD_CtlError>
            err++;
 80083b8:	7afb      	ldrb	r3, [r7, #11]
 80083ba:	3301      	adds	r3, #1
 80083bc:	72fb      	strb	r3, [r7, #11]
          break;
 80083be:	e03b      	b.n	8008438 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083c6:	695b      	ldr	r3, [r3, #20]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00b      	beq.n	80083e4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083d2:	695b      	ldr	r3, [r3, #20]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	7c12      	ldrb	r2, [r2, #16]
 80083d8:	f107 0108 	add.w	r1, r7, #8
 80083dc:	4610      	mov	r0, r2
 80083de:	4798      	blx	r3
 80083e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083e2:	e029      	b.n	8008438 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083e4:	6839      	ldr	r1, [r7, #0]
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fa63 	bl	80088b2 <USBD_CtlError>
            err++;
 80083ec:	7afb      	ldrb	r3, [r7, #11]
 80083ee:	3301      	adds	r3, #1
 80083f0:	72fb      	strb	r3, [r7, #11]
          break;
 80083f2:	e021      	b.n	8008438 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00b      	beq.n	8008418 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	7c12      	ldrb	r2, [r2, #16]
 800840c:	f107 0108 	add.w	r1, r7, #8
 8008410:	4610      	mov	r0, r2
 8008412:	4798      	blx	r3
 8008414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008416:	e00f      	b.n	8008438 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008418:	6839      	ldr	r1, [r7, #0]
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fa49 	bl	80088b2 <USBD_CtlError>
            err++;
 8008420:	7afb      	ldrb	r3, [r7, #11]
 8008422:	3301      	adds	r3, #1
 8008424:	72fb      	strb	r3, [r7, #11]
          break;
 8008426:	e007      	b.n	8008438 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008428:	6839      	ldr	r1, [r7, #0]
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fa41 	bl	80088b2 <USBD_CtlError>
          err++;
 8008430:	7afb      	ldrb	r3, [r7, #11]
 8008432:	3301      	adds	r3, #1
 8008434:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008436:	bf00      	nop
      }
      break;
 8008438:	e037      	b.n	80084aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	7c1b      	ldrb	r3, [r3, #16]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d109      	bne.n	8008456 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800844a:	f107 0208 	add.w	r2, r7, #8
 800844e:	4610      	mov	r0, r2
 8008450:	4798      	blx	r3
 8008452:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008454:	e029      	b.n	80084aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fa2a 	bl	80088b2 <USBD_CtlError>
        err++;
 800845e:	7afb      	ldrb	r3, [r7, #11]
 8008460:	3301      	adds	r3, #1
 8008462:	72fb      	strb	r3, [r7, #11]
      break;
 8008464:	e021      	b.n	80084aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	7c1b      	ldrb	r3, [r3, #16]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10d      	bne.n	800848a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008476:	f107 0208 	add.w	r2, r7, #8
 800847a:	4610      	mov	r0, r2
 800847c:	4798      	blx	r3
 800847e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	3301      	adds	r3, #1
 8008484:	2207      	movs	r2, #7
 8008486:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008488:	e00f      	b.n	80084aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800848a:	6839      	ldr	r1, [r7, #0]
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fa10 	bl	80088b2 <USBD_CtlError>
        err++;
 8008492:	7afb      	ldrb	r3, [r7, #11]
 8008494:	3301      	adds	r3, #1
 8008496:	72fb      	strb	r3, [r7, #11]
      break;
 8008498:	e007      	b.n	80084aa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 fa08 	bl	80088b2 <USBD_CtlError>
      err++;
 80084a2:	7afb      	ldrb	r3, [r7, #11]
 80084a4:	3301      	adds	r3, #1
 80084a6:	72fb      	strb	r3, [r7, #11]
      break;
 80084a8:	bf00      	nop
  }

  if (err != 0U)
 80084aa:	7afb      	ldrb	r3, [r7, #11]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d11e      	bne.n	80084ee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	88db      	ldrh	r3, [r3, #6]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d016      	beq.n	80084e6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80084b8:	893b      	ldrh	r3, [r7, #8]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00e      	beq.n	80084dc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	88da      	ldrh	r2, [r3, #6]
 80084c2:	893b      	ldrh	r3, [r7, #8]
 80084c4:	4293      	cmp	r3, r2
 80084c6:	bf28      	it	cs
 80084c8:	4613      	movcs	r3, r2
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80084ce:	893b      	ldrh	r3, [r7, #8]
 80084d0:	461a      	mov	r2, r3
 80084d2:	68f9      	ldr	r1, [r7, #12]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fa69 	bl	80089ac <USBD_CtlSendData>
 80084da:	e009      	b.n	80084f0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f9e7 	bl	80088b2 <USBD_CtlError>
 80084e4:	e004      	b.n	80084f0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fac1 	bl	8008a6e <USBD_CtlSendStatus>
 80084ec:	e000      	b.n	80084f0 <USBD_GetDescriptor+0x2cc>
    return;
 80084ee:	bf00      	nop
  }
}
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop

080084f8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	889b      	ldrh	r3, [r3, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d131      	bne.n	800856e <USBD_SetAddress+0x76>
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	88db      	ldrh	r3, [r3, #6]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d12d      	bne.n	800856e <USBD_SetAddress+0x76>
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	885b      	ldrh	r3, [r3, #2]
 8008516:	2b7f      	cmp	r3, #127	@ 0x7f
 8008518:	d829      	bhi.n	800856e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	885b      	ldrh	r3, [r3, #2]
 800851e:	b2db      	uxtb	r3, r3
 8008520:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008524:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b03      	cmp	r3, #3
 8008530:	d104      	bne.n	800853c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f9bc 	bl	80088b2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800853a:	e01d      	b.n	8008578 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	7bfa      	ldrb	r2, [r7, #15]
 8008540:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008544:	7bfb      	ldrb	r3, [r7, #15]
 8008546:	4619      	mov	r1, r3
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 ff5f 	bl	800940c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fa8d 	bl	8008a6e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008554:	7bfb      	ldrb	r3, [r7, #15]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d004      	beq.n	8008564 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2202      	movs	r2, #2
 800855e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008562:	e009      	b.n	8008578 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800856c:	e004      	b.n	8008578 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 f99e 	bl	80088b2 <USBD_CtlError>
  }
}
 8008576:	bf00      	nop
 8008578:	bf00      	nop
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	885b      	ldrh	r3, [r3, #2]
 8008592:	b2da      	uxtb	r2, r3
 8008594:	4b4e      	ldr	r3, [pc, #312]	@ (80086d0 <USBD_SetConfig+0x150>)
 8008596:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008598:	4b4d      	ldr	r3, [pc, #308]	@ (80086d0 <USBD_SetConfig+0x150>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d905      	bls.n	80085ac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80085a0:	6839      	ldr	r1, [r7, #0]
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f985 	bl	80088b2 <USBD_CtlError>
    return USBD_FAIL;
 80085a8:	2303      	movs	r3, #3
 80085aa:	e08c      	b.n	80086c6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d002      	beq.n	80085be <USBD_SetConfig+0x3e>
 80085b8:	2b03      	cmp	r3, #3
 80085ba:	d029      	beq.n	8008610 <USBD_SetConfig+0x90>
 80085bc:	e075      	b.n	80086aa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80085be:	4b44      	ldr	r3, [pc, #272]	@ (80086d0 <USBD_SetConfig+0x150>)
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d020      	beq.n	8008608 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80085c6:	4b42      	ldr	r3, [pc, #264]	@ (80086d0 <USBD_SetConfig+0x150>)
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	461a      	mov	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085d0:	4b3f      	ldr	r3, [pc, #252]	@ (80086d0 <USBD_SetConfig+0x150>)
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	4619      	mov	r1, r3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7fe ffcd 	bl	8007576 <USBD_SetClassConfig>
 80085dc:	4603      	mov	r3, r0
 80085de:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80085e0:	7bfb      	ldrb	r3, [r7, #15]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d008      	beq.n	80085f8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80085e6:	6839      	ldr	r1, [r7, #0]
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f962 	bl	80088b2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2202      	movs	r2, #2
 80085f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085f6:	e065      	b.n	80086c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 fa38 	bl	8008a6e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2203      	movs	r2, #3
 8008602:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008606:	e05d      	b.n	80086c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 fa30 	bl	8008a6e <USBD_CtlSendStatus>
      break;
 800860e:	e059      	b.n	80086c4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008610:	4b2f      	ldr	r3, [pc, #188]	@ (80086d0 <USBD_SetConfig+0x150>)
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d112      	bne.n	800863e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2202      	movs	r2, #2
 800861c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008620:	4b2b      	ldr	r3, [pc, #172]	@ (80086d0 <USBD_SetConfig+0x150>)
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	461a      	mov	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800862a:	4b29      	ldr	r3, [pc, #164]	@ (80086d0 <USBD_SetConfig+0x150>)
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f7fe ffbc 	bl	80075ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 fa19 	bl	8008a6e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800863c:	e042      	b.n	80086c4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800863e:	4b24      	ldr	r3, [pc, #144]	@ (80086d0 <USBD_SetConfig+0x150>)
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	461a      	mov	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	429a      	cmp	r2, r3
 800864a:	d02a      	beq.n	80086a2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	b2db      	uxtb	r3, r3
 8008652:	4619      	mov	r1, r3
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f7fe ffaa 	bl	80075ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800865a:	4b1d      	ldr	r3, [pc, #116]	@ (80086d0 <USBD_SetConfig+0x150>)
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	461a      	mov	r2, r3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008664:	4b1a      	ldr	r3, [pc, #104]	@ (80086d0 <USBD_SetConfig+0x150>)
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	4619      	mov	r1, r3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f7fe ff83 	bl	8007576 <USBD_SetClassConfig>
 8008670:	4603      	mov	r3, r0
 8008672:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008674:	7bfb      	ldrb	r3, [r7, #15]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00f      	beq.n	800869a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800867a:	6839      	ldr	r1, [r7, #0]
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f918 	bl	80088b2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	b2db      	uxtb	r3, r3
 8008688:	4619      	mov	r1, r3
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7fe ff8f 	bl	80075ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2202      	movs	r2, #2
 8008694:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008698:	e014      	b.n	80086c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f9e7 	bl	8008a6e <USBD_CtlSendStatus>
      break;
 80086a0:	e010      	b.n	80086c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f9e3 	bl	8008a6e <USBD_CtlSendStatus>
      break;
 80086a8:	e00c      	b.n	80086c4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80086aa:	6839      	ldr	r1, [r7, #0]
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f900 	bl	80088b2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086b2:	4b07      	ldr	r3, [pc, #28]	@ (80086d0 <USBD_SetConfig+0x150>)
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	4619      	mov	r1, r3
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f7fe ff78 	bl	80075ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80086be:	2303      	movs	r3, #3
 80086c0:	73fb      	strb	r3, [r7, #15]
      break;
 80086c2:	bf00      	nop
  }

  return ret;
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	200041c0 	.word	0x200041c0

080086d4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	88db      	ldrh	r3, [r3, #6]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d004      	beq.n	80086f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80086e6:	6839      	ldr	r1, [r7, #0]
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 f8e2 	bl	80088b2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80086ee:	e023      	b.n	8008738 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	dc02      	bgt.n	8008702 <USBD_GetConfig+0x2e>
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	dc03      	bgt.n	8008708 <USBD_GetConfig+0x34>
 8008700:	e015      	b.n	800872e <USBD_GetConfig+0x5a>
 8008702:	2b03      	cmp	r3, #3
 8008704:	d00b      	beq.n	800871e <USBD_GetConfig+0x4a>
 8008706:	e012      	b.n	800872e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	3308      	adds	r3, #8
 8008712:	2201      	movs	r2, #1
 8008714:	4619      	mov	r1, r3
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f948 	bl	80089ac <USBD_CtlSendData>
        break;
 800871c:	e00c      	b.n	8008738 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	3304      	adds	r3, #4
 8008722:	2201      	movs	r2, #1
 8008724:	4619      	mov	r1, r3
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f940 	bl	80089ac <USBD_CtlSendData>
        break;
 800872c:	e004      	b.n	8008738 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f8be 	bl	80088b2 <USBD_CtlError>
        break;
 8008736:	bf00      	nop
}
 8008738:	bf00      	nop
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008750:	b2db      	uxtb	r3, r3
 8008752:	3b01      	subs	r3, #1
 8008754:	2b02      	cmp	r3, #2
 8008756:	d81e      	bhi.n	8008796 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	88db      	ldrh	r3, [r3, #6]
 800875c:	2b02      	cmp	r3, #2
 800875e:	d004      	beq.n	800876a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f8a5 	bl	80088b2 <USBD_CtlError>
        break;
 8008768:	e01a      	b.n	80087a0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2201      	movs	r2, #1
 800876e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008776:	2b00      	cmp	r3, #0
 8008778:	d005      	beq.n	8008786 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	f043 0202 	orr.w	r2, r3, #2
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	330c      	adds	r3, #12
 800878a:	2202      	movs	r2, #2
 800878c:	4619      	mov	r1, r3
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 f90c 	bl	80089ac <USBD_CtlSendData>
      break;
 8008794:	e004      	b.n	80087a0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f88a 	bl	80088b2 <USBD_CtlError>
      break;
 800879e:	bf00      	nop
  }
}
 80087a0:	bf00      	nop
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	885b      	ldrh	r3, [r3, #2]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d107      	bne.n	80087ca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f953 	bl	8008a6e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80087c8:	e013      	b.n	80087f2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	885b      	ldrh	r3, [r3, #2]
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d10b      	bne.n	80087ea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	889b      	ldrh	r3, [r3, #4]
 80087d6:	0a1b      	lsrs	r3, r3, #8
 80087d8:	b29b      	uxth	r3, r3
 80087da:	b2da      	uxtb	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f943 	bl	8008a6e <USBD_CtlSendStatus>
}
 80087e8:	e003      	b.n	80087f2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f860 	bl	80088b2 <USBD_CtlError>
}
 80087f2:	bf00      	nop
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b082      	sub	sp, #8
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
 8008802:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800880a:	b2db      	uxtb	r3, r3
 800880c:	3b01      	subs	r3, #1
 800880e:	2b02      	cmp	r3, #2
 8008810:	d80b      	bhi.n	800882a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	885b      	ldrh	r3, [r3, #2]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d10c      	bne.n	8008834 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f923 	bl	8008a6e <USBD_CtlSendStatus>
      }
      break;
 8008828:	e004      	b.n	8008834 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800882a:	6839      	ldr	r1, [r7, #0]
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 f840 	bl	80088b2 <USBD_CtlError>
      break;
 8008832:	e000      	b.n	8008836 <USBD_ClrFeature+0x3c>
      break;
 8008834:	bf00      	nop
  }
}
 8008836:	bf00      	nop
 8008838:	3708      	adds	r7, #8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b084      	sub	sp, #16
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	781a      	ldrb	r2, [r3, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	3301      	adds	r3, #1
 8008858:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	781a      	ldrb	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	3301      	adds	r3, #1
 8008866:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f7ff fa3d 	bl	8007ce8 <SWAPBYTE>
 800886e:	4603      	mov	r3, r0
 8008870:	461a      	mov	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	3301      	adds	r3, #1
 800887a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	3301      	adds	r3, #1
 8008880:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f7ff fa30 	bl	8007ce8 <SWAPBYTE>
 8008888:	4603      	mov	r3, r0
 800888a:	461a      	mov	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	3301      	adds	r3, #1
 8008894:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	3301      	adds	r3, #1
 800889a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f7ff fa23 	bl	8007ce8 <SWAPBYTE>
 80088a2:	4603      	mov	r3, r0
 80088a4:	461a      	mov	r2, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	80da      	strh	r2, [r3, #6]
}
 80088aa:	bf00      	nop
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b082      	sub	sp, #8
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
 80088ba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80088bc:	2180      	movs	r1, #128	@ 0x80
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fd3a 	bl	8009338 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80088c4:	2100      	movs	r1, #0
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fd36 	bl	8009338 <USBD_LL_StallEP>
}
 80088cc:	bf00      	nop
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b086      	sub	sp, #24
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80088e0:	2300      	movs	r3, #0
 80088e2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d042      	beq.n	8008970 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80088ee:	6938      	ldr	r0, [r7, #16]
 80088f0:	f000 f842 	bl	8008978 <USBD_GetLen>
 80088f4:	4603      	mov	r3, r0
 80088f6:	3301      	adds	r3, #1
 80088f8:	005b      	lsls	r3, r3, #1
 80088fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088fe:	d808      	bhi.n	8008912 <USBD_GetString+0x3e>
 8008900:	6938      	ldr	r0, [r7, #16]
 8008902:	f000 f839 	bl	8008978 <USBD_GetLen>
 8008906:	4603      	mov	r3, r0
 8008908:	3301      	adds	r3, #1
 800890a:	b29b      	uxth	r3, r3
 800890c:	005b      	lsls	r3, r3, #1
 800890e:	b29a      	uxth	r2, r3
 8008910:	e001      	b.n	8008916 <USBD_GetString+0x42>
 8008912:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800891a:	7dfb      	ldrb	r3, [r7, #23]
 800891c:	68ba      	ldr	r2, [r7, #8]
 800891e:	4413      	add	r3, r2
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	7812      	ldrb	r2, [r2, #0]
 8008924:	701a      	strb	r2, [r3, #0]
  idx++;
 8008926:	7dfb      	ldrb	r3, [r7, #23]
 8008928:	3301      	adds	r3, #1
 800892a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800892c:	7dfb      	ldrb	r3, [r7, #23]
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	4413      	add	r3, r2
 8008932:	2203      	movs	r2, #3
 8008934:	701a      	strb	r2, [r3, #0]
  idx++;
 8008936:	7dfb      	ldrb	r3, [r7, #23]
 8008938:	3301      	adds	r3, #1
 800893a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800893c:	e013      	b.n	8008966 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800893e:	7dfb      	ldrb	r3, [r7, #23]
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	4413      	add	r3, r2
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	7812      	ldrb	r2, [r2, #0]
 8008948:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	3301      	adds	r3, #1
 800894e:	613b      	str	r3, [r7, #16]
    idx++;
 8008950:	7dfb      	ldrb	r3, [r7, #23]
 8008952:	3301      	adds	r3, #1
 8008954:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008956:	7dfb      	ldrb	r3, [r7, #23]
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	4413      	add	r3, r2
 800895c:	2200      	movs	r2, #0
 800895e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008960:	7dfb      	ldrb	r3, [r7, #23]
 8008962:	3301      	adds	r3, #1
 8008964:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1e7      	bne.n	800893e <USBD_GetString+0x6a>
 800896e:	e000      	b.n	8008972 <USBD_GetString+0x9e>
    return;
 8008970:	bf00      	nop
  }
}
 8008972:	3718      	adds	r7, #24
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008980:	2300      	movs	r3, #0
 8008982:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008988:	e005      	b.n	8008996 <USBD_GetLen+0x1e>
  {
    len++;
 800898a:	7bfb      	ldrb	r3, [r7, #15]
 800898c:	3301      	adds	r3, #1
 800898e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	3301      	adds	r3, #1
 8008994:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1f5      	bne.n	800898a <USBD_GetLen+0x12>
  }

  return len;
 800899e:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3714      	adds	r7, #20
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2202      	movs	r2, #2
 80089bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	68ba      	ldr	r2, [r7, #8]
 80089ca:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	2100      	movs	r1, #0
 80089d8:	68f8      	ldr	r0, [r7, #12]
 80089da:	f000 fd36 	bl	800944a <USBD_LL_Transmit>

  return USBD_OK;
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3710      	adds	r7, #16
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	2100      	movs	r1, #0
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f000 fd25 	bl	800944a <USBD_LL_Transmit>

  return USBD_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b084      	sub	sp, #16
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	60f8      	str	r0, [r7, #12]
 8008a12:	60b9      	str	r1, [r7, #8]
 8008a14:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2203      	movs	r2, #3
 8008a1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	68ba      	ldr	r2, [r7, #8]
 8008a2a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68ba      	ldr	r2, [r7, #8]
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	f000 fd25 	bl	800948c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	68ba      	ldr	r2, [r7, #8]
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	68f8      	ldr	r0, [r7, #12]
 8008a60:	f000 fd14 	bl	800948c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b082      	sub	sp, #8
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2204      	movs	r2, #4
 8008a7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a7e:	2300      	movs	r3, #0
 8008a80:	2200      	movs	r2, #0
 8008a82:	2100      	movs	r1, #0
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fce0 	bl	800944a <USBD_LL_Transmit>

  return USBD_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3708      	adds	r7, #8
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2205      	movs	r2, #5
 8008aa0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fcee 	bl	800948c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
	...

08008abc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	4912      	ldr	r1, [pc, #72]	@ (8008b0c <MX_USB_DEVICE_Init+0x50>)
 8008ac4:	4812      	ldr	r0, [pc, #72]	@ (8008b10 <MX_USB_DEVICE_Init+0x54>)
 8008ac6:	f7fe fcd9 	bl	800747c <USBD_Init>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d001      	beq.n	8008ad4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ad0:	f7f8 f936 	bl	8000d40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ad4:	490f      	ldr	r1, [pc, #60]	@ (8008b14 <MX_USB_DEVICE_Init+0x58>)
 8008ad6:	480e      	ldr	r0, [pc, #56]	@ (8008b10 <MX_USB_DEVICE_Init+0x54>)
 8008ad8:	f7fe fd00 	bl	80074dc <USBD_RegisterClass>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d001      	beq.n	8008ae6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008ae2:	f7f8 f92d 	bl	8000d40 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008ae6:	490c      	ldr	r1, [pc, #48]	@ (8008b18 <MX_USB_DEVICE_Init+0x5c>)
 8008ae8:	4809      	ldr	r0, [pc, #36]	@ (8008b10 <MX_USB_DEVICE_Init+0x54>)
 8008aea:	f7fe fbf7 	bl	80072dc <USBD_CDC_RegisterInterface>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d001      	beq.n	8008af8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008af4:	f7f8 f924 	bl	8000d40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008af8:	4805      	ldr	r0, [pc, #20]	@ (8008b10 <MX_USB_DEVICE_Init+0x54>)
 8008afa:	f7fe fd25 	bl	8007548 <USBD_Start>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d001      	beq.n	8008b08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008b04:	f7f8 f91c 	bl	8000d40 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008b08:	bf00      	nop
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	200000b4 	.word	0x200000b4
 8008b10:	200041c4 	.word	0x200041c4
 8008b14:	20000018 	.word	0x20000018
 8008b18:	200000a0 	.word	0x200000a0

08008b1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b20:	2200      	movs	r2, #0
 8008b22:	4905      	ldr	r1, [pc, #20]	@ (8008b38 <CDC_Init_FS+0x1c>)
 8008b24:	4805      	ldr	r0, [pc, #20]	@ (8008b3c <CDC_Init_FS+0x20>)
 8008b26:	f7fe fbf3 	bl	8007310 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008b2a:	4905      	ldr	r1, [pc, #20]	@ (8008b40 <CDC_Init_FS+0x24>)
 8008b2c:	4803      	ldr	r0, [pc, #12]	@ (8008b3c <CDC_Init_FS+0x20>)
 8008b2e:	f7fe fc11 	bl	8007354 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008b32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	20004ca0 	.word	0x20004ca0
 8008b3c:	200041c4 	.word	0x200041c4
 8008b40:	200044a0 	.word	0x200044a0

08008b44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008b44:	b480      	push	{r7}
 8008b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008b48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	6039      	str	r1, [r7, #0]
 8008b5e:	71fb      	strb	r3, [r7, #7]
 8008b60:	4613      	mov	r3, r2
 8008b62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b64:	79fb      	ldrb	r3, [r7, #7]
 8008b66:	2b23      	cmp	r3, #35	@ 0x23
 8008b68:	f200 8098 	bhi.w	8008c9c <CDC_Control_FS+0x148>
 8008b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8008b74 <CDC_Control_FS+0x20>)
 8008b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b72:	bf00      	nop
 8008b74:	08008c9d 	.word	0x08008c9d
 8008b78:	08008c9d 	.word	0x08008c9d
 8008b7c:	08008c9d 	.word	0x08008c9d
 8008b80:	08008c9d 	.word	0x08008c9d
 8008b84:	08008c9d 	.word	0x08008c9d
 8008b88:	08008c9d 	.word	0x08008c9d
 8008b8c:	08008c9d 	.word	0x08008c9d
 8008b90:	08008c9d 	.word	0x08008c9d
 8008b94:	08008c9d 	.word	0x08008c9d
 8008b98:	08008c9d 	.word	0x08008c9d
 8008b9c:	08008c9d 	.word	0x08008c9d
 8008ba0:	08008c9d 	.word	0x08008c9d
 8008ba4:	08008c9d 	.word	0x08008c9d
 8008ba8:	08008c9d 	.word	0x08008c9d
 8008bac:	08008c9d 	.word	0x08008c9d
 8008bb0:	08008c9d 	.word	0x08008c9d
 8008bb4:	08008c9d 	.word	0x08008c9d
 8008bb8:	08008c9d 	.word	0x08008c9d
 8008bbc:	08008c9d 	.word	0x08008c9d
 8008bc0:	08008c9d 	.word	0x08008c9d
 8008bc4:	08008c9d 	.word	0x08008c9d
 8008bc8:	08008c9d 	.word	0x08008c9d
 8008bcc:	08008c9d 	.word	0x08008c9d
 8008bd0:	08008c9d 	.word	0x08008c9d
 8008bd4:	08008c9d 	.word	0x08008c9d
 8008bd8:	08008c9d 	.word	0x08008c9d
 8008bdc:	08008c9d 	.word	0x08008c9d
 8008be0:	08008c9d 	.word	0x08008c9d
 8008be4:	08008c9d 	.word	0x08008c9d
 8008be8:	08008c9d 	.word	0x08008c9d
 8008bec:	08008c9d 	.word	0x08008c9d
 8008bf0:	08008c9d 	.word	0x08008c9d
 8008bf4:	08008c05 	.word	0x08008c05
 8008bf8:	08008c49 	.word	0x08008c49
 8008bfc:	08008c9d 	.word	0x08008c9d
 8008c00:	08008c9d 	.word	0x08008c9d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	461a      	mov	r2, r3
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	021b      	lsls	r3, r3, #8
 8008c12:	431a      	orrs	r2, r3
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	3302      	adds	r3, #2
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	041b      	lsls	r3, r3, #16
 8008c1c:	431a      	orrs	r2, r3
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	3303      	adds	r3, #3
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	061b      	lsls	r3, r3, #24
 8008c26:	4313      	orrs	r3, r2
 8008c28:	461a      	mov	r2, r3
 8008c2a:	4b20      	ldr	r3, [pc, #128]	@ (8008cac <CDC_Control_FS+0x158>)
 8008c2c:	601a      	str	r2, [r3, #0]
    	LineCoding.format = pbuf[4];
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	791a      	ldrb	r2, [r3, #4]
 8008c32:	4b1e      	ldr	r3, [pc, #120]	@ (8008cac <CDC_Control_FS+0x158>)
 8008c34:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype = pbuf[5];
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	795a      	ldrb	r2, [r3, #5]
 8008c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8008cac <CDC_Control_FS+0x158>)
 8008c3c:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype = pbuf[6];
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	799a      	ldrb	r2, [r3, #6]
 8008c42:	4b1a      	ldr	r3, [pc, #104]	@ (8008cac <CDC_Control_FS+0x158>)
 8008c44:	719a      	strb	r2, [r3, #6]
    break;
 8008c46:	e02a      	b.n	8008c9e <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t) (LineCoding.bitrate);
 8008c48:	4b18      	ldr	r3, [pc, #96]	@ (8008cac <CDC_Control_FS+0x158>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	b2da      	uxtb	r2, r3
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t) (LineCoding.bitrate >> 8);
 8008c52:	4b16      	ldr	r3, [pc, #88]	@ (8008cac <CDC_Control_FS+0x158>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	0a1a      	lsrs	r2, r3, #8
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	b2d2      	uxtb	r2, r2
 8008c5e:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t) (LineCoding.bitrate >> 16);
 8008c60:	4b12      	ldr	r3, [pc, #72]	@ (8008cac <CDC_Control_FS+0x158>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	0c1a      	lsrs	r2, r3, #16
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	3302      	adds	r3, #2
 8008c6a:	b2d2      	uxtb	r2, r2
 8008c6c:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t) (LineCoding.bitrate >> 24);
 8008c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8008cac <CDC_Control_FS+0x158>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	0e1a      	lsrs	r2, r3, #24
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	3303      	adds	r3, #3
 8008c78:	b2d2      	uxtb	r2, r2
 8008c7a:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	3304      	adds	r3, #4
 8008c80:	4a0a      	ldr	r2, [pc, #40]	@ (8008cac <CDC_Control_FS+0x158>)
 8008c82:	7912      	ldrb	r2, [r2, #4]
 8008c84:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	3305      	adds	r3, #5
 8008c8a:	4a08      	ldr	r2, [pc, #32]	@ (8008cac <CDC_Control_FS+0x158>)
 8008c8c:	7952      	ldrb	r2, [r2, #5]
 8008c8e:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	3306      	adds	r3, #6
 8008c94:	4a05      	ldr	r2, [pc, #20]	@ (8008cac <CDC_Control_FS+0x158>)
 8008c96:	7992      	ldrb	r2, [r2, #6]
 8008c98:	701a      	strb	r2, [r3, #0]
    break;
 8008c9a:	e000      	b.n	8008c9e <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008c9c:	bf00      	nop
  }

  return (USBD_OK);
 8008c9e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	20000098 	.word	0x20000098

08008cb0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008cba:	6879      	ldr	r1, [r7, #4]
 8008cbc:	4805      	ldr	r0, [pc, #20]	@ (8008cd4 <CDC_Receive_FS+0x24>)
 8008cbe:	f7fe fb49 	bl	8007354 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008cc2:	4804      	ldr	r0, [pc, #16]	@ (8008cd4 <CDC_Receive_FS+0x24>)
 8008cc4:	f7fe fba4 	bl	8007410 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008cc8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	200041c4 	.word	0x200041c4

08008cd8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8008d20 <CDC_Transmit_FS+0x48>)
 8008cea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008cee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d001      	beq.n	8008cfe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e00b      	b.n	8008d16 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008cfe:	887b      	ldrh	r3, [r7, #2]
 8008d00:	461a      	mov	r2, r3
 8008d02:	6879      	ldr	r1, [r7, #4]
 8008d04:	4806      	ldr	r0, [pc, #24]	@ (8008d20 <CDC_Transmit_FS+0x48>)
 8008d06:	f7fe fb03 	bl	8007310 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008d0a:	4805      	ldr	r0, [pc, #20]	@ (8008d20 <CDC_Transmit_FS+0x48>)
 8008d0c:	f7fe fb40 	bl	8007390 <USBD_CDC_TransmitPacket>
 8008d10:	4603      	mov	r3, r0
 8008d12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	200041c4 	.word	0x200041c4

08008d24 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b087      	sub	sp, #28
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	4613      	mov	r3, r2
 8008d30:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008d32:	2300      	movs	r3, #0
 8008d34:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008d36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	371c      	adds	r7, #28
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr
	...

08008d48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	4603      	mov	r3, r0
 8008d50:	6039      	str	r1, [r7, #0]
 8008d52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	2212      	movs	r2, #18
 8008d58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008d5a:	4b03      	ldr	r3, [pc, #12]	@ (8008d68 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr
 8008d68:	200000d0 	.word	0x200000d0

08008d6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	4603      	mov	r3, r0
 8008d74:	6039      	str	r1, [r7, #0]
 8008d76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	2204      	movs	r2, #4
 8008d7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008d7e:	4b03      	ldr	r3, [pc, #12]	@ (8008d8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr
 8008d8c:	200000e4 	.word	0x200000e4

08008d90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	4603      	mov	r3, r0
 8008d98:	6039      	str	r1, [r7, #0]
 8008d9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d9c:	79fb      	ldrb	r3, [r7, #7]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d105      	bne.n	8008dae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008da2:	683a      	ldr	r2, [r7, #0]
 8008da4:	4907      	ldr	r1, [pc, #28]	@ (8008dc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008da6:	4808      	ldr	r0, [pc, #32]	@ (8008dc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008da8:	f7ff fd94 	bl	80088d4 <USBD_GetString>
 8008dac:	e004      	b.n	8008db8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008dae:	683a      	ldr	r2, [r7, #0]
 8008db0:	4904      	ldr	r1, [pc, #16]	@ (8008dc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008db2:	4805      	ldr	r0, [pc, #20]	@ (8008dc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008db4:	f7ff fd8e 	bl	80088d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008db8:	4b02      	ldr	r3, [pc, #8]	@ (8008dc4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3708      	adds	r7, #8
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	200054a0 	.word	0x200054a0
 8008dc8:	08009608 	.word	0x08009608

08008dcc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	6039      	str	r1, [r7, #0]
 8008dd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008dd8:	683a      	ldr	r2, [r7, #0]
 8008dda:	4904      	ldr	r1, [pc, #16]	@ (8008dec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ddc:	4804      	ldr	r0, [pc, #16]	@ (8008df0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008dde:	f7ff fd79 	bl	80088d4 <USBD_GetString>
  return USBD_StrDesc;
 8008de2:	4b02      	ldr	r3, [pc, #8]	@ (8008dec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3708      	adds	r7, #8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	200054a0 	.word	0x200054a0
 8008df0:	08009620 	.word	0x08009620

08008df4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	6039      	str	r1, [r7, #0]
 8008dfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	221a      	movs	r2, #26
 8008e04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e06:	f000 f843 	bl	8008e90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008e0a:	4b02      	ldr	r3, [pc, #8]	@ (8008e14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3708      	adds	r7, #8
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	200000e8 	.word	0x200000e8

08008e18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	4603      	mov	r3, r0
 8008e20:	6039      	str	r1, [r7, #0]
 8008e22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e24:	79fb      	ldrb	r3, [r7, #7]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d105      	bne.n	8008e36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e2a:	683a      	ldr	r2, [r7, #0]
 8008e2c:	4907      	ldr	r1, [pc, #28]	@ (8008e4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e2e:	4808      	ldr	r0, [pc, #32]	@ (8008e50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e30:	f7ff fd50 	bl	80088d4 <USBD_GetString>
 8008e34:	e004      	b.n	8008e40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e36:	683a      	ldr	r2, [r7, #0]
 8008e38:	4904      	ldr	r1, [pc, #16]	@ (8008e4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e3a:	4805      	ldr	r0, [pc, #20]	@ (8008e50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e3c:	f7ff fd4a 	bl	80088d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e40:	4b02      	ldr	r3, [pc, #8]	@ (8008e4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3708      	adds	r7, #8
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	200054a0 	.word	0x200054a0
 8008e50:	08009634 	.word	0x08009634

08008e54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	6039      	str	r1, [r7, #0]
 8008e5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e60:	79fb      	ldrb	r3, [r7, #7]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d105      	bne.n	8008e72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e66:	683a      	ldr	r2, [r7, #0]
 8008e68:	4907      	ldr	r1, [pc, #28]	@ (8008e88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e6a:	4808      	ldr	r0, [pc, #32]	@ (8008e8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e6c:	f7ff fd32 	bl	80088d4 <USBD_GetString>
 8008e70:	e004      	b.n	8008e7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e72:	683a      	ldr	r2, [r7, #0]
 8008e74:	4904      	ldr	r1, [pc, #16]	@ (8008e88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e76:	4805      	ldr	r0, [pc, #20]	@ (8008e8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e78:	f7ff fd2c 	bl	80088d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e7c:	4b02      	ldr	r3, [pc, #8]	@ (8008e88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3708      	adds	r7, #8
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	200054a0 	.word	0x200054a0
 8008e8c:	08009640 	.word	0x08009640

08008e90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008e96:	4b0f      	ldr	r3, [pc, #60]	@ (8008ed4 <Get_SerialNum+0x44>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8008ed8 <Get_SerialNum+0x48>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8008edc <Get_SerialNum+0x4c>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4413      	add	r3, r2
 8008eae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d009      	beq.n	8008eca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008eb6:	2208      	movs	r2, #8
 8008eb8:	4909      	ldr	r1, [pc, #36]	@ (8008ee0 <Get_SerialNum+0x50>)
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f000 f814 	bl	8008ee8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ec0:	2204      	movs	r2, #4
 8008ec2:	4908      	ldr	r1, [pc, #32]	@ (8008ee4 <Get_SerialNum+0x54>)
 8008ec4:	68b8      	ldr	r0, [r7, #8]
 8008ec6:	f000 f80f 	bl	8008ee8 <IntToUnicode>
  }
}
 8008eca:	bf00      	nop
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	1fff7a10 	.word	0x1fff7a10
 8008ed8:	1fff7a14 	.word	0x1fff7a14
 8008edc:	1fff7a18 	.word	0x1fff7a18
 8008ee0:	200000ea 	.word	0x200000ea
 8008ee4:	200000fa 	.word	0x200000fa

08008ee8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b087      	sub	sp, #28
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008efa:	2300      	movs	r3, #0
 8008efc:	75fb      	strb	r3, [r7, #23]
 8008efe:	e027      	b.n	8008f50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	0f1b      	lsrs	r3, r3, #28
 8008f04:	2b09      	cmp	r3, #9
 8008f06:	d80b      	bhi.n	8008f20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	0f1b      	lsrs	r3, r3, #28
 8008f0c:	b2da      	uxtb	r2, r3
 8008f0e:	7dfb      	ldrb	r3, [r7, #23]
 8008f10:	005b      	lsls	r3, r3, #1
 8008f12:	4619      	mov	r1, r3
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	440b      	add	r3, r1
 8008f18:	3230      	adds	r2, #48	@ 0x30
 8008f1a:	b2d2      	uxtb	r2, r2
 8008f1c:	701a      	strb	r2, [r3, #0]
 8008f1e:	e00a      	b.n	8008f36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	0f1b      	lsrs	r3, r3, #28
 8008f24:	b2da      	uxtb	r2, r3
 8008f26:	7dfb      	ldrb	r3, [r7, #23]
 8008f28:	005b      	lsls	r3, r3, #1
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	440b      	add	r3, r1
 8008f30:	3237      	adds	r2, #55	@ 0x37
 8008f32:	b2d2      	uxtb	r2, r2
 8008f34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	011b      	lsls	r3, r3, #4
 8008f3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f3c:	7dfb      	ldrb	r3, [r7, #23]
 8008f3e:	005b      	lsls	r3, r3, #1
 8008f40:	3301      	adds	r3, #1
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	4413      	add	r3, r2
 8008f46:	2200      	movs	r2, #0
 8008f48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f4a:	7dfb      	ldrb	r3, [r7, #23]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	75fb      	strb	r3, [r7, #23]
 8008f50:	7dfa      	ldrb	r2, [r7, #23]
 8008f52:	79fb      	ldrb	r3, [r7, #7]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d3d3      	bcc.n	8008f00 <IntToUnicode+0x18>
  }
}
 8008f58:	bf00      	nop
 8008f5a:	bf00      	nop
 8008f5c:	371c      	adds	r7, #28
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
	...

08008f68 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b08a      	sub	sp, #40	@ 0x28
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f70:	f107 0314 	add.w	r3, r7, #20
 8008f74:	2200      	movs	r2, #0
 8008f76:	601a      	str	r2, [r3, #0]
 8008f78:	605a      	str	r2, [r3, #4]
 8008f7a:	609a      	str	r2, [r3, #8]
 8008f7c:	60da      	str	r2, [r3, #12]
 8008f7e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f88:	d13a      	bne.n	8009000 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	613b      	str	r3, [r7, #16]
 8008f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8009008 <HAL_PCD_MspInit+0xa0>)
 8008f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f92:	4a1d      	ldr	r2, [pc, #116]	@ (8009008 <HAL_PCD_MspInit+0xa0>)
 8008f94:	f043 0301 	orr.w	r3, r3, #1
 8008f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8008f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8009008 <HAL_PCD_MspInit+0xa0>)
 8008f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f9e:	f003 0301 	and.w	r3, r3, #1
 8008fa2:	613b      	str	r3, [r7, #16]
 8008fa4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008fa6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fac:	2302      	movs	r3, #2
 8008fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008fb8:	230a      	movs	r3, #10
 8008fba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fbc:	f107 0314 	add.w	r3, r7, #20
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	4812      	ldr	r0, [pc, #72]	@ (800900c <HAL_PCD_MspInit+0xa4>)
 8008fc4:	f7f9 fb82 	bl	80026cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8009008 <HAL_PCD_MspInit+0xa0>)
 8008fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fcc:	4a0e      	ldr	r2, [pc, #56]	@ (8009008 <HAL_PCD_MspInit+0xa0>)
 8008fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fd2:	6353      	str	r3, [r2, #52]	@ 0x34
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	60fb      	str	r3, [r7, #12]
 8008fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8009008 <HAL_PCD_MspInit+0xa0>)
 8008fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fdc:	4a0a      	ldr	r2, [pc, #40]	@ (8009008 <HAL_PCD_MspInit+0xa0>)
 8008fde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008fe2:	6453      	str	r3, [r2, #68]	@ 0x44
 8008fe4:	4b08      	ldr	r3, [pc, #32]	@ (8009008 <HAL_PCD_MspInit+0xa0>)
 8008fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fe8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008fec:	60fb      	str	r3, [r7, #12]
 8008fee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	2043      	movs	r0, #67	@ 0x43
 8008ff6:	f7f8 ffc2 	bl	8001f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008ffa:	2043      	movs	r0, #67	@ 0x43
 8008ffc:	f7f8 ffdb 	bl	8001fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009000:	bf00      	nop
 8009002:	3728      	adds	r7, #40	@ 0x28
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	40023800 	.word	0x40023800
 800900c:	40020000 	.word	0x40020000

08009010 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009024:	4619      	mov	r1, r3
 8009026:	4610      	mov	r0, r2
 8009028:	f7fe fadb 	bl	80075e2 <USBD_LL_SetupStage>
}
 800902c:	bf00      	nop
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	460b      	mov	r3, r1
 800903e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009046:	78fa      	ldrb	r2, [r7, #3]
 8009048:	6879      	ldr	r1, [r7, #4]
 800904a:	4613      	mov	r3, r2
 800904c:	00db      	lsls	r3, r3, #3
 800904e:	4413      	add	r3, r2
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	440b      	add	r3, r1
 8009054:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	78fb      	ldrb	r3, [r7, #3]
 800905c:	4619      	mov	r1, r3
 800905e:	f7fe fb15 	bl	800768c <USBD_LL_DataOutStage>
}
 8009062:	bf00      	nop
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b082      	sub	sp, #8
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
 8009072:	460b      	mov	r3, r1
 8009074:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800907c:	78fa      	ldrb	r2, [r7, #3]
 800907e:	6879      	ldr	r1, [r7, #4]
 8009080:	4613      	mov	r3, r2
 8009082:	00db      	lsls	r3, r3, #3
 8009084:	4413      	add	r3, r2
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	440b      	add	r3, r1
 800908a:	3320      	adds	r3, #32
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	78fb      	ldrb	r3, [r7, #3]
 8009090:	4619      	mov	r1, r3
 8009092:	f7fe fbb7 	bl	8007804 <USBD_LL_DataInStage>
}
 8009096:	bf00      	nop
 8009098:	3708      	adds	r7, #8
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b082      	sub	sp, #8
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7fe fcfb 	bl	8007aa8 <USBD_LL_SOF>
}
 80090b2:	bf00      	nop
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b084      	sub	sp, #16
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80090c2:	2301      	movs	r3, #1
 80090c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	79db      	ldrb	r3, [r3, #7]
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	d001      	beq.n	80090d2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80090ce:	f7f7 fe37 	bl	8000d40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80090d8:	7bfa      	ldrb	r2, [r7, #15]
 80090da:	4611      	mov	r1, r2
 80090dc:	4618      	mov	r0, r3
 80090de:	f7fe fc9f 	bl	8007a20 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7fe fc46 	bl	800797a <USBD_LL_Reset>
}
 80090ee:	bf00      	nop
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
	...

080090f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009106:	4618      	mov	r0, r3
 8009108:	f7fe fc9a 	bl	8007a40 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	6812      	ldr	r2, [r2, #0]
 800911a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800911e:	f043 0301 	orr.w	r3, r3, #1
 8009122:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	7adb      	ldrb	r3, [r3, #11]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d005      	beq.n	8009138 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800912c:	4b04      	ldr	r3, [pc, #16]	@ (8009140 <HAL_PCD_SuspendCallback+0x48>)
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	4a03      	ldr	r2, [pc, #12]	@ (8009140 <HAL_PCD_SuspendCallback+0x48>)
 8009132:	f043 0306 	orr.w	r3, r3, #6
 8009136:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009138:	bf00      	nop
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	e000ed00 	.word	0xe000ed00

08009144 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009152:	4618      	mov	r0, r3
 8009154:	f7fe fc90 	bl	8007a78 <USBD_LL_Resume>
}
 8009158:	bf00      	nop
 800915a:	3708      	adds	r7, #8
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	460b      	mov	r3, r1
 800916a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009172:	78fa      	ldrb	r2, [r7, #3]
 8009174:	4611      	mov	r1, r2
 8009176:	4618      	mov	r0, r3
 8009178:	f7fe fce8 	bl	8007b4c <USBD_LL_IsoOUTIncomplete>
}
 800917c:	bf00      	nop
 800917e:	3708      	adds	r7, #8
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	460b      	mov	r3, r1
 800918e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009196:	78fa      	ldrb	r2, [r7, #3]
 8009198:	4611      	mov	r1, r2
 800919a:	4618      	mov	r0, r3
 800919c:	f7fe fca4 	bl	8007ae8 <USBD_LL_IsoINIncomplete>
}
 80091a0:	bf00      	nop
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7fe fcfa 	bl	8007bb0 <USBD_LL_DevConnected>
}
 80091bc:	bf00      	nop
 80091be:	3708      	adds	r7, #8
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fe fcf7 	bl	8007bc6 <USBD_LL_DevDisconnected>
}
 80091d8:	bf00      	nop
 80091da:	3708      	adds	r7, #8
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d13c      	bne.n	800926a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80091f0:	4a20      	ldr	r2, [pc, #128]	@ (8009274 <USBD_LL_Init+0x94>)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a1e      	ldr	r2, [pc, #120]	@ (8009274 <USBD_LL_Init+0x94>)
 80091fc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009200:	4b1c      	ldr	r3, [pc, #112]	@ (8009274 <USBD_LL_Init+0x94>)
 8009202:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009206:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009208:	4b1a      	ldr	r3, [pc, #104]	@ (8009274 <USBD_LL_Init+0x94>)
 800920a:	2204      	movs	r2, #4
 800920c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800920e:	4b19      	ldr	r3, [pc, #100]	@ (8009274 <USBD_LL_Init+0x94>)
 8009210:	2202      	movs	r2, #2
 8009212:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009214:	4b17      	ldr	r3, [pc, #92]	@ (8009274 <USBD_LL_Init+0x94>)
 8009216:	2200      	movs	r2, #0
 8009218:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800921a:	4b16      	ldr	r3, [pc, #88]	@ (8009274 <USBD_LL_Init+0x94>)
 800921c:	2202      	movs	r2, #2
 800921e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009220:	4b14      	ldr	r3, [pc, #80]	@ (8009274 <USBD_LL_Init+0x94>)
 8009222:	2200      	movs	r2, #0
 8009224:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009226:	4b13      	ldr	r3, [pc, #76]	@ (8009274 <USBD_LL_Init+0x94>)
 8009228:	2200      	movs	r2, #0
 800922a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800922c:	4b11      	ldr	r3, [pc, #68]	@ (8009274 <USBD_LL_Init+0x94>)
 800922e:	2200      	movs	r2, #0
 8009230:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009232:	4b10      	ldr	r3, [pc, #64]	@ (8009274 <USBD_LL_Init+0x94>)
 8009234:	2200      	movs	r2, #0
 8009236:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009238:	4b0e      	ldr	r3, [pc, #56]	@ (8009274 <USBD_LL_Init+0x94>)
 800923a:	2200      	movs	r2, #0
 800923c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800923e:	480d      	ldr	r0, [pc, #52]	@ (8009274 <USBD_LL_Init+0x94>)
 8009240:	f7f9 fbc8 	bl	80029d4 <HAL_PCD_Init>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d001      	beq.n	800924e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800924a:	f7f7 fd79 	bl	8000d40 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800924e:	2180      	movs	r1, #128	@ 0x80
 8009250:	4808      	ldr	r0, [pc, #32]	@ (8009274 <USBD_LL_Init+0x94>)
 8009252:	f7fa fdf4 	bl	8003e3e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009256:	2240      	movs	r2, #64	@ 0x40
 8009258:	2100      	movs	r1, #0
 800925a:	4806      	ldr	r0, [pc, #24]	@ (8009274 <USBD_LL_Init+0x94>)
 800925c:	f7fa fda8 	bl	8003db0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009260:	2280      	movs	r2, #128	@ 0x80
 8009262:	2101      	movs	r1, #1
 8009264:	4803      	ldr	r0, [pc, #12]	@ (8009274 <USBD_LL_Init+0x94>)
 8009266:	f7fa fda3 	bl	8003db0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	200056a0 	.word	0x200056a0

08009278 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009280:	2300      	movs	r3, #0
 8009282:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009284:	2300      	movs	r3, #0
 8009286:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800928e:	4618      	mov	r0, r3
 8009290:	f7f9 fcaf 	bl	8002bf2 <HAL_PCD_Start>
 8009294:	4603      	mov	r3, r0
 8009296:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009298:	7bfb      	ldrb	r3, [r7, #15]
 800929a:	4618      	mov	r0, r3
 800929c:	f000 f942 	bl	8009524 <USBD_Get_USB_Status>
 80092a0:	4603      	mov	r3, r0
 80092a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3710      	adds	r7, #16
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b084      	sub	sp, #16
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
 80092b6:	4608      	mov	r0, r1
 80092b8:	4611      	mov	r1, r2
 80092ba:	461a      	mov	r2, r3
 80092bc:	4603      	mov	r3, r0
 80092be:	70fb      	strb	r3, [r7, #3]
 80092c0:	460b      	mov	r3, r1
 80092c2:	70bb      	strb	r3, [r7, #2]
 80092c4:	4613      	mov	r3, r2
 80092c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092c8:	2300      	movs	r3, #0
 80092ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092cc:	2300      	movs	r3, #0
 80092ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80092d6:	78bb      	ldrb	r3, [r7, #2]
 80092d8:	883a      	ldrh	r2, [r7, #0]
 80092da:	78f9      	ldrb	r1, [r7, #3]
 80092dc:	f7fa f983 	bl	80035e6 <HAL_PCD_EP_Open>
 80092e0:	4603      	mov	r3, r0
 80092e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092e4:	7bfb      	ldrb	r3, [r7, #15]
 80092e6:	4618      	mov	r0, r3
 80092e8:	f000 f91c 	bl	8009524 <USBD_Get_USB_Status>
 80092ec:	4603      	mov	r3, r0
 80092ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b084      	sub	sp, #16
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
 8009302:	460b      	mov	r3, r1
 8009304:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009306:	2300      	movs	r3, #0
 8009308:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800930a:	2300      	movs	r3, #0
 800930c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009314:	78fa      	ldrb	r2, [r7, #3]
 8009316:	4611      	mov	r1, r2
 8009318:	4618      	mov	r0, r3
 800931a:	f7fa f9ce 	bl	80036ba <HAL_PCD_EP_Close>
 800931e:	4603      	mov	r3, r0
 8009320:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009322:	7bfb      	ldrb	r3, [r7, #15]
 8009324:	4618      	mov	r0, r3
 8009326:	f000 f8fd 	bl	8009524 <USBD_Get_USB_Status>
 800932a:	4603      	mov	r3, r0
 800932c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800932e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009330:	4618      	mov	r0, r3
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	460b      	mov	r3, r1
 8009342:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009344:	2300      	movs	r3, #0
 8009346:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009348:	2300      	movs	r3, #0
 800934a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009352:	78fa      	ldrb	r2, [r7, #3]
 8009354:	4611      	mov	r1, r2
 8009356:	4618      	mov	r0, r3
 8009358:	f7fa fa86 	bl	8003868 <HAL_PCD_EP_SetStall>
 800935c:	4603      	mov	r3, r0
 800935e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009360:	7bfb      	ldrb	r3, [r7, #15]
 8009362:	4618      	mov	r0, r3
 8009364:	f000 f8de 	bl	8009524 <USBD_Get_USB_Status>
 8009368:	4603      	mov	r3, r0
 800936a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800936c:	7bbb      	ldrb	r3, [r7, #14]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b084      	sub	sp, #16
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
 800937e:	460b      	mov	r3, r1
 8009380:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009382:	2300      	movs	r3, #0
 8009384:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009390:	78fa      	ldrb	r2, [r7, #3]
 8009392:	4611      	mov	r1, r2
 8009394:	4618      	mov	r0, r3
 8009396:	f7fa faca 	bl	800392e <HAL_PCD_EP_ClrStall>
 800939a:	4603      	mov	r3, r0
 800939c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800939e:	7bfb      	ldrb	r3, [r7, #15]
 80093a0:	4618      	mov	r0, r3
 80093a2:	f000 f8bf 	bl	8009524 <USBD_Get_USB_Status>
 80093a6:	4603      	mov	r3, r0
 80093a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	460b      	mov	r3, r1
 80093be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80093c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80093c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	da0b      	bge.n	80093e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80093d0:	78fb      	ldrb	r3, [r7, #3]
 80093d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093d6:	68f9      	ldr	r1, [r7, #12]
 80093d8:	4613      	mov	r3, r2
 80093da:	00db      	lsls	r3, r3, #3
 80093dc:	4413      	add	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	440b      	add	r3, r1
 80093e2:	3316      	adds	r3, #22
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	e00b      	b.n	8009400 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80093e8:	78fb      	ldrb	r3, [r7, #3]
 80093ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093ee:	68f9      	ldr	r1, [r7, #12]
 80093f0:	4613      	mov	r3, r2
 80093f2:	00db      	lsls	r3, r3, #3
 80093f4:	4413      	add	r3, r2
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	440b      	add	r3, r1
 80093fa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80093fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009400:	4618      	mov	r0, r3
 8009402:	3714      	adds	r7, #20
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	460b      	mov	r3, r1
 8009416:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800941c:	2300      	movs	r3, #0
 800941e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009426:	78fa      	ldrb	r2, [r7, #3]
 8009428:	4611      	mov	r1, r2
 800942a:	4618      	mov	r0, r3
 800942c:	f7fa f8b7 	bl	800359e <HAL_PCD_SetAddress>
 8009430:	4603      	mov	r3, r0
 8009432:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009434:	7bfb      	ldrb	r3, [r7, #15]
 8009436:	4618      	mov	r0, r3
 8009438:	f000 f874 	bl	8009524 <USBD_Get_USB_Status>
 800943c:	4603      	mov	r3, r0
 800943e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009440:	7bbb      	ldrb	r3, [r7, #14]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b086      	sub	sp, #24
 800944e:	af00      	add	r7, sp, #0
 8009450:	60f8      	str	r0, [r7, #12]
 8009452:	607a      	str	r2, [r7, #4]
 8009454:	603b      	str	r3, [r7, #0]
 8009456:	460b      	mov	r3, r1
 8009458:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800945a:	2300      	movs	r3, #0
 800945c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800945e:	2300      	movs	r3, #0
 8009460:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009468:	7af9      	ldrb	r1, [r7, #11]
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	f7fa f9c1 	bl	80037f4 <HAL_PCD_EP_Transmit>
 8009472:	4603      	mov	r3, r0
 8009474:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009476:	7dfb      	ldrb	r3, [r7, #23]
 8009478:	4618      	mov	r0, r3
 800947a:	f000 f853 	bl	8009524 <USBD_Get_USB_Status>
 800947e:	4603      	mov	r3, r0
 8009480:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009482:	7dbb      	ldrb	r3, [r7, #22]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3718      	adds	r7, #24
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b086      	sub	sp, #24
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	607a      	str	r2, [r7, #4]
 8009496:	603b      	str	r3, [r7, #0]
 8009498:	460b      	mov	r3, r1
 800949a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800949c:	2300      	movs	r3, #0
 800949e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094a0:	2300      	movs	r3, #0
 80094a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80094aa:	7af9      	ldrb	r1, [r7, #11]
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	f7fa f94d 	bl	800374e <HAL_PCD_EP_Receive>
 80094b4:	4603      	mov	r3, r0
 80094b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094b8:	7dfb      	ldrb	r3, [r7, #23]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f000 f832 	bl	8009524 <USBD_Get_USB_Status>
 80094c0:	4603      	mov	r3, r0
 80094c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80094c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3718      	adds	r7, #24
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b082      	sub	sp, #8
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
 80094d6:	460b      	mov	r3, r1
 80094d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80094e0:	78fa      	ldrb	r2, [r7, #3]
 80094e2:	4611      	mov	r1, r2
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7fa f96d 	bl	80037c4 <HAL_PCD_EP_GetRxCount>
 80094ea:	4603      	mov	r3, r0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3708      	adds	r7, #8
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80094fc:	4b03      	ldr	r3, [pc, #12]	@ (800950c <USBD_static_malloc+0x18>)
}
 80094fe:	4618      	mov	r0, r3
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	20005b84 	.word	0x20005b84

08009510 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]

}
 8009518:	bf00      	nop
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009524:	b480      	push	{r7}
 8009526:	b085      	sub	sp, #20
 8009528:	af00      	add	r7, sp, #0
 800952a:	4603      	mov	r3, r0
 800952c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800952e:	2300      	movs	r3, #0
 8009530:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009532:	79fb      	ldrb	r3, [r7, #7]
 8009534:	2b03      	cmp	r3, #3
 8009536:	d817      	bhi.n	8009568 <USBD_Get_USB_Status+0x44>
 8009538:	a201      	add	r2, pc, #4	@ (adr r2, 8009540 <USBD_Get_USB_Status+0x1c>)
 800953a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953e:	bf00      	nop
 8009540:	08009551 	.word	0x08009551
 8009544:	08009557 	.word	0x08009557
 8009548:	0800955d 	.word	0x0800955d
 800954c:	08009563 	.word	0x08009563
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009550:	2300      	movs	r3, #0
 8009552:	73fb      	strb	r3, [r7, #15]
    break;
 8009554:	e00b      	b.n	800956e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009556:	2303      	movs	r3, #3
 8009558:	73fb      	strb	r3, [r7, #15]
    break;
 800955a:	e008      	b.n	800956e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800955c:	2301      	movs	r3, #1
 800955e:	73fb      	strb	r3, [r7, #15]
    break;
 8009560:	e005      	b.n	800956e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009562:	2303      	movs	r3, #3
 8009564:	73fb      	strb	r3, [r7, #15]
    break;
 8009566:	e002      	b.n	800956e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009568:	2303      	movs	r3, #3
 800956a:	73fb      	strb	r3, [r7, #15]
    break;
 800956c:	bf00      	nop
  }
  return usb_status;
 800956e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3714      	adds	r7, #20
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <memset>:
 800957c:	4402      	add	r2, r0
 800957e:	4603      	mov	r3, r0
 8009580:	4293      	cmp	r3, r2
 8009582:	d100      	bne.n	8009586 <memset+0xa>
 8009584:	4770      	bx	lr
 8009586:	f803 1b01 	strb.w	r1, [r3], #1
 800958a:	e7f9      	b.n	8009580 <memset+0x4>

0800958c <__libc_init_array>:
 800958c:	b570      	push	{r4, r5, r6, lr}
 800958e:	4d0d      	ldr	r5, [pc, #52]	@ (80095c4 <__libc_init_array+0x38>)
 8009590:	4c0d      	ldr	r4, [pc, #52]	@ (80095c8 <__libc_init_array+0x3c>)
 8009592:	1b64      	subs	r4, r4, r5
 8009594:	10a4      	asrs	r4, r4, #2
 8009596:	2600      	movs	r6, #0
 8009598:	42a6      	cmp	r6, r4
 800959a:	d109      	bne.n	80095b0 <__libc_init_array+0x24>
 800959c:	4d0b      	ldr	r5, [pc, #44]	@ (80095cc <__libc_init_array+0x40>)
 800959e:	4c0c      	ldr	r4, [pc, #48]	@ (80095d0 <__libc_init_array+0x44>)
 80095a0:	f000 f826 	bl	80095f0 <_init>
 80095a4:	1b64      	subs	r4, r4, r5
 80095a6:	10a4      	asrs	r4, r4, #2
 80095a8:	2600      	movs	r6, #0
 80095aa:	42a6      	cmp	r6, r4
 80095ac:	d105      	bne.n	80095ba <__libc_init_array+0x2e>
 80095ae:	bd70      	pop	{r4, r5, r6, pc}
 80095b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80095b4:	4798      	blx	r3
 80095b6:	3601      	adds	r6, #1
 80095b8:	e7ee      	b.n	8009598 <__libc_init_array+0xc>
 80095ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80095be:	4798      	blx	r3
 80095c0:	3601      	adds	r6, #1
 80095c2:	e7f2      	b.n	80095aa <__libc_init_array+0x1e>
 80095c4:	08009670 	.word	0x08009670
 80095c8:	08009670 	.word	0x08009670
 80095cc:	08009670 	.word	0x08009670
 80095d0:	08009674 	.word	0x08009674

080095d4 <memcpy>:
 80095d4:	440a      	add	r2, r1
 80095d6:	4291      	cmp	r1, r2
 80095d8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80095dc:	d100      	bne.n	80095e0 <memcpy+0xc>
 80095de:	4770      	bx	lr
 80095e0:	b510      	push	{r4, lr}
 80095e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095ea:	4291      	cmp	r1, r2
 80095ec:	d1f9      	bne.n	80095e2 <memcpy+0xe>
 80095ee:	bd10      	pop	{r4, pc}

080095f0 <_init>:
 80095f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095f2:	bf00      	nop
 80095f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095f6:	bc08      	pop	{r3}
 80095f8:	469e      	mov	lr, r3
 80095fa:	4770      	bx	lr

080095fc <_fini>:
 80095fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fe:	bf00      	nop
 8009600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009602:	bc08      	pop	{r3}
 8009604:	469e      	mov	lr, r3
 8009606:	4770      	bx	lr
